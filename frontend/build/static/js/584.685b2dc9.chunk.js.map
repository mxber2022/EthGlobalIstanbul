{"version":3,"file":"static/js/584.685b2dc9.chunk.js","mappings":"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","sources":["../node_modules/@web3auth/base-solana-adapter/node_modules/@web3auth/base/src/chain/IChainInterface.ts","../node_modules/@web3auth/base-solana-adapter/node_modules/@web3auth/base/src/chain/config.ts","../node_modules/@web3auth/base-solana-adapter/node_modules/@web3auth/base/src/errors/index.ts","../node_modules/@web3auth/base-solana-adapter/node_modules/@web3auth/base/src/wallet/index.ts","../node_modules/@web3auth/base-solana-adapter/node_modules/@web3auth/base/src/adapter/IAdapter.ts","../node_modules/@web3auth/base-solana-adapter/node_modules/@web3auth/base/src/constants.ts","../node_modules/@web3auth/base-solana-adapter/node_modules/@web3auth/base/src/loglevel.ts","../node_modules/@web3auth/base-solana-adapter/node_modules/@web3auth/base/src/utils.ts","../node_modules/@web3auth/base-solana-adapter/src/baseSolanaAdapter.ts","../node_modules/@web3auth/base-solana-adapter/node_modules/@web3auth/base/src/adapter/utils.ts"],"sourcesContent":["export const CHAIN_NAMESPACES = {\n  EIP155: \"eip155\",\n  SOLANA: \"solana\",\n  OTHER: \"other\",\n} as const;\n// eip155 for all evm chains\nexport type ChainNamespaceType = (typeof CHAIN_NAMESPACES)[keyof typeof CHAIN_NAMESPACES];\n\nexport const ADAPTER_NAMESPACES = {\n  EIP155: \"eip155\",\n  SOLANA: \"solana\",\n  MULTICHAIN: \"multichain\",\n} as const;\n// eip155 for all evm chains\nexport type AdapterNamespaceType = (typeof ADAPTER_NAMESPACES)[keyof typeof ADAPTER_NAMESPACES];\n\nexport type CustomChainConfig = {\n  chainNamespace: ChainNamespaceType;\n  /**\n   * The chain id of the chain\n   */\n  chainId: string;\n  /**\n   * RPC target Url for the chain\n   */\n  rpcTarget: string;\n  /**\n   * Display Name for the chain\n   */\n  displayName: string;\n  /**\n   * Url of the block explorer\n   */\n  blockExplorer: string;\n  /**\n   * Default currency ticker of the network (e.g: ETH)\n   */\n  ticker: string;\n  /**\n   * Name for currency ticker (e.g: `Ethereum`)\n   */\n  tickerName: string;\n  /**\n   * Number of decimals for the currency ticker (e.g: 18)\n   */\n  decimals?: number;\n};\n","import { CHAIN_NAMESPACES, ChainNamespaceType, CustomChainConfig } from \"./IChainInterface\";\nconst getDefaultNetworkId = (chainNamespace: ChainNamespaceType): number => {\n  if (chainNamespace === CHAIN_NAMESPACES.EIP155) {\n    return 1;\n  } else if (chainNamespace === CHAIN_NAMESPACES.SOLANA) {\n    return 1;\n  }\n  throw new Error(`Chain namespace ${chainNamespace} is not supported`);\n};\n\nexport const getEvmChainConfig = (chainId: number): CustomChainConfig | null => {\n  const chainNamespace = CHAIN_NAMESPACES.EIP155;\n  if (chainId === 1) {\n    return {\n      chainNamespace,\n      chainId: \"0x1\",\n      rpcTarget: `https://rpc.ankr.com/eth`,\n      displayName: \"Ethereum Mainnet\",\n      blockExplorer: \"https://etherscan.io/\",\n      ticker: \"ETH\",\n      tickerName: \"Ethereum\",\n      decimals: 18,\n    };\n  }\n  if (chainId === 3) {\n    return {\n      chainNamespace,\n      chainId: \"0x3\",\n      rpcTarget: `https://rpc.ankr.com/eth_ropsten`,\n      displayName: \"Ropsten Testnet\",\n      blockExplorer: \"https://ropsten.etherscan.io/\",\n      ticker: \"ETH\",\n      tickerName: \"Ethereum\",\n      decimals: 18,\n    };\n  }\n  if (chainId === 4) {\n    return {\n      chainNamespace,\n      chainId: \"0x4\",\n      rpcTarget: `https://rpc.ankr.com/eth_rinkeby`,\n      displayName: \"Rinkeby Testnet\",\n      blockExplorer: \"https://rinkeby.etherscan.io/\",\n      ticker: \"ETH\",\n      tickerName: \"Ethereum\",\n      decimals: 18,\n    };\n  }\n  if (chainId === 5) {\n    return {\n      chainNamespace,\n      chainId: \"0x5\",\n      rpcTarget: `https://rpc.ankr.com/eth_goerli`,\n      displayName: \"Goerli Testnet\",\n      blockExplorer: \"https://goerli.etherscan.io/\",\n      ticker: \"ETH\",\n      tickerName: \"Ethereum\",\n      decimals: 18,\n    };\n  }\n  if (chainId === 137) {\n    return {\n      chainNamespace,\n      chainId: \"0x89\",\n      rpcTarget: \"https://rpc.ankr.com/polygon\",\n      displayName: \"Polygon Mainnet\",\n      blockExplorer: \"https://polygonscan.com\",\n      ticker: \"MATIC\",\n      tickerName: \"Polygon\",\n    };\n  }\n  if (chainId === 80001) {\n    return {\n      chainNamespace,\n      chainId: \"0x13881\",\n      rpcTarget: \"https://rpc.ankr.com/polygon_mumbai\",\n      displayName: \"Polygon Mumbai Testnet\",\n      blockExplorer: \"https://mumbai.polygonscan.com/\",\n      ticker: \"MATIC\",\n      tickerName: \"Polygon\",\n      decimals: 18,\n    };\n  }\n  if (chainId === 56) {\n    return {\n      chainNamespace,\n      chainId: \"0x38\",\n      rpcTarget: \"https://rpc.ankr.com/bsc\",\n      displayName: \"Binance SmartChain Mainnet\",\n      blockExplorer: \"https://bscscan.com\",\n      ticker: \"BNB\",\n      tickerName: \"Binance SmartChain\",\n      decimals: 18,\n    };\n  }\n  if (chainId === 97) {\n    return {\n      chainNamespace,\n      chainId: \"0x61\",\n      rpcTarget: \"https://rpc.ankr.com/bsc_testnet_chapel\",\n      displayName: \"Binance SmartChain Testnet\",\n      blockExplorer: \"https://testnet.bscscan.com\",\n      ticker: \"BNB\",\n      tickerName: \"Binance SmartChain\",\n      decimals: 18,\n    };\n  }\n  if (chainId === 25) {\n    return {\n      chainNamespace,\n      chainId: \"0x19\",\n      rpcTarget: \"https://rpc.cronos.org\",\n      displayName: \"Cronos Mainnet\",\n      blockExplorer: \"https://cronoscan.com/\",\n      ticker: \"CRO\",\n      tickerName: \"Cronos\",\n    };\n  }\n  if (chainId === 338) {\n    return {\n      chainNamespace,\n      chainId: \"0x152\",\n      rpcTarget: \"https://rpc-t3.cronos.org/\",\n      displayName: \"Cronos Testnet\",\n      blockExplorer: \"https://cronoscan.com/\",\n      ticker: \"CRO\",\n      tickerName: \"Cronos\",\n      decimals: 18,\n    };\n  }\n  if (chainId === 8217) {\n    return {\n      chainNamespace,\n      chainId: \"0x2019\",\n      rpcTarget: \"https://public-node-api.klaytnapi.com/v1/cypress\",\n      displayName: \"Klaytn Mainnet\",\n      blockExplorer: \"https://scope.klaytn.com\",\n      ticker: \"KLAY\",\n      tickerName: \"Klaytn\",\n      decimals: 18,\n    };\n  }\n\n  return null;\n};\n\nexport const getSolanaChainConfig = (chainId: number): CustomChainConfig | null => {\n  const chainNamespace = CHAIN_NAMESPACES.SOLANA;\n  if (chainId === 1) {\n    return {\n      chainNamespace,\n      chainId: \"0x1\",\n      rpcTarget: \"https://rpc.ankr.com/solana\",\n      displayName: \"Solana Mainnet\",\n      blockExplorer: \"https://explorer.solana.com\",\n      ticker: \"SOL\",\n      tickerName: \"Solana\",\n      decimals: 9,\n    };\n  } else if (chainId === 2) {\n    return {\n      chainNamespace,\n      chainId: \"0x2\",\n      rpcTarget: \"https://api.testnet.solana.com\",\n      displayName: \"Solana Testnet\",\n      blockExplorer: \"https://explorer.solana.com?cluster=testnet\",\n      ticker: \"SOL\",\n      tickerName: \"Solana\",\n      decimals: 9,\n    };\n  } else if (chainId === 3) {\n    return {\n      chainNamespace,\n      chainId: \"0x3\",\n      rpcTarget: \"https://api.devnet.solana.com\",\n      displayName: \"Solana Devnet\",\n      blockExplorer: \"https://explorer.solana.com?cluster=devnet\",\n      ticker: \"SOL\",\n      tickerName: \"Solana\",\n      decimals: 9,\n    };\n  }\n\n  return null;\n};\n\nexport const getChainConfig = (chainNamespace: ChainNamespaceType, chainId?: number | string): CustomChainConfig | null => {\n  if (chainNamespace === CHAIN_NAMESPACES.OTHER) return null;\n  const finalChainId = chainId ? (typeof chainId === \"number\" ? chainId : parseInt(chainId, 16)) : getDefaultNetworkId(chainNamespace);\n  if (chainNamespace === CHAIN_NAMESPACES.EIP155) {\n    return getEvmChainConfig(finalChainId);\n  } else if (chainNamespace === CHAIN_NAMESPACES.SOLANA) {\n    return getSolanaChainConfig(finalChainId);\n  }\n  return null;\n};\n","import { CustomError } from \"ts-custom-error\";\n\n// @flow\nexport interface IWeb3AuthError extends CustomError {\n  code: number;\n  message: string;\n  toString(): string;\n}\n\nexport type ErrorCodes = {\n  [key: number]: string;\n};\n\nexport abstract class Web3AuthError extends CustomError implements IWeb3AuthError {\n  code: number;\n\n  message: string;\n\n  public constructor(code: number, message?: string) {\n    // takes care of stack and proto\n    super(message);\n\n    this.code = code;\n    this.message = message || \"\";\n    // Set name explicitly as minification can mangle class names\n    Object.defineProperty(this, \"name\", { value: \"Web3AuthError\" });\n  }\n\n  toJSON(): IWeb3AuthError {\n    return {\n      name: this.name,\n      code: this.code,\n      message: this.message,\n    };\n  }\n\n  toString(): string {\n    return JSON.stringify(this.toJSON());\n  }\n}\n\nexport class WalletInitializationError extends Web3AuthError {\n  protected static messages: ErrorCodes = {\n    5000: \"Custom\",\n    5001: \"Wallet is not found\",\n    5002: \"Wallet is not installed\",\n    5003: \"Wallet is not ready yet\",\n    5004: \"Wallet window is blocked\",\n    5005: \"Wallet window has been closed by the user\",\n    5006: \"Incompatible chain namespace provided\",\n    5007: \"Adapter has already been included\",\n    5008: \"Invalid provider Config\",\n    5009: \"Provider is not ready yet\",\n    5010: \"Failed to connect with rpc url\",\n    5011: \"Invalid params passed in\",\n    5013: \"Invalid network provided\",\n  };\n\n  public constructor(code: number, message?: string) {\n    // takes care of stack and proto\n    super(code, message);\n\n    // Set name explicitly as minification can mangle class names\n    Object.defineProperty(this, \"name\", { value: \"WalletInitializationError\" });\n  }\n\n  public static fromCode(code: number, extraMessage = \"\"): IWeb3AuthError {\n    return new WalletInitializationError(code, `${WalletInitializationError.messages[code]}, ${extraMessage}`);\n  }\n\n  // Custom methods\n  public static notFound(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5001, extraMessage);\n  }\n\n  public static notInstalled(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5002, extraMessage);\n  }\n\n  public static notReady(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5003, extraMessage);\n  }\n\n  public static windowBlocked(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5004, extraMessage);\n  }\n\n  public static windowClosed(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5005, extraMessage);\n  }\n\n  public static incompatibleChainNameSpace(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5006, extraMessage);\n  }\n\n  public static duplicateAdapterError(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5007, extraMessage);\n  }\n\n  public static invalidProviderConfigError(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5008, extraMessage);\n  }\n\n  public static providerNotReadyError(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5009, extraMessage);\n  }\n\n  public static rpcConnectionError(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5010, extraMessage);\n  }\n\n  public static invalidParams(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5011, extraMessage);\n  }\n\n  public static invalidNetwork(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5013, extraMessage);\n  }\n}\n\n/**\n * wallet login errors\n */\n\nexport class WalletLoginError extends Web3AuthError {\n  protected static messages: ErrorCodes = {\n    5000: \"Custom\",\n    5111: \"Failed to connect with wallet\",\n    5112: \"Failed to disconnect from wallet\",\n    5113: \"Wallet is not connected\",\n    5114: \"Wallet popup has been closed by the user\",\n    5115: \"User has already enabled mfa, please use the @web3auth/web3auth-web sdk for login with mfa\",\n  };\n\n  public constructor(code: number, message?: string) {\n    // takes care of stack and proto\n    super(code, message);\n\n    // Set name explicitly as minification can mangle class names\n    Object.defineProperty(this, \"name\", { value: \"WalletLoginError\" });\n  }\n\n  public static fromCode(code: number, extraMessage = \"\"): IWeb3AuthError {\n    return new WalletLoginError(code, `${WalletLoginError.messages[code]}. ${extraMessage}`);\n  }\n\n  public static connectionError(extraMessage = \"\"): IWeb3AuthError {\n    return WalletLoginError.fromCode(5111, extraMessage);\n  }\n\n  public static disconnectionError(extraMessage = \"\"): IWeb3AuthError {\n    return WalletLoginError.fromCode(5112, extraMessage);\n  }\n\n  public static notConnectedError(extraMessage = \"\"): IWeb3AuthError {\n    return WalletLoginError.fromCode(5113, extraMessage);\n  }\n\n  public static popupClosed(extraMessage = \"\"): IWeb3AuthError {\n    return WalletLoginError.fromCode(5114, extraMessage);\n  }\n\n  public static mfaEnabled(extraMessage = \"\"): IWeb3AuthError {\n    return WalletLoginError.fromCode(5115, extraMessage);\n  }\n}\n","export const MULTI_CHAIN_ADAPTERS = {\n  OPENLOGIN: \"openlogin\",\n  WALLET_CONNECT_V1: \"wallet-connect-v1\",\n  WALLET_CONNECT_V2: \"wallet-connect-v2\",\n};\n\nexport const SOLANA_ADAPTERS = {\n  TORUS_SOLANA: \"torus-solana\",\n  PHANTOM: \"phantom\",\n  SOLFLARE: \"solflare\",\n  SLOPE: \"slope\",\n  ...MULTI_CHAIN_ADAPTERS,\n};\n\nexport const EVM_ADAPTERS = {\n  TORUS_EVM: \"torus-evm\",\n  METAMASK: \"metamask\",\n  COINBASE: \"coinbase\",\n  ...MULTI_CHAIN_ADAPTERS,\n};\n\nexport const WALLET_ADAPTERS = {\n  ...EVM_ADAPTERS,\n  ...SOLANA_ADAPTERS,\n};\nexport type WALLET_ADAPTER_TYPE = (typeof WALLET_ADAPTERS)[keyof typeof WALLET_ADAPTERS];\nexport type SOLANA_ADAPTER_TYPE = (typeof SOLANA_ADAPTERS)[keyof typeof SOLANA_ADAPTERS];\nexport type EVM_ADAPTER_TYPE = (typeof EVM_ADAPTERS)[keyof typeof EVM_ADAPTERS];\nexport type MULTI_CHAIN_ADAPTER_TYPE = (typeof MULTI_CHAIN_ADAPTERS)[keyof typeof MULTI_CHAIN_ADAPTERS];\n\nexport const ADAPTER_NAMES = {\n  [MULTI_CHAIN_ADAPTERS.OPENLOGIN]: \"OpenLogin\",\n  [MULTI_CHAIN_ADAPTERS.WALLET_CONNECT_V1]: \"Wallet Connect v1\",\n  [MULTI_CHAIN_ADAPTERS.WALLET_CONNECT_V2]: \"Wallet Connect v2\",\n  [SOLANA_ADAPTERS.TORUS_SOLANA]: \"Torus\",\n  [SOLANA_ADAPTERS.PHANTOM]: \"Phantom\",\n  [SOLANA_ADAPTERS.SOLFLARE]: \"Solflare\",\n  [SOLANA_ADAPTERS.SLOPE]: \"Slope\",\n  [EVM_ADAPTERS.TORUS_EVM]: \"Torus\",\n  [EVM_ADAPTERS.METAMASK]: \"Metamask\",\n  [EVM_ADAPTERS.COINBASE]: \"Coinbase\",\n};\n","import { OPENLOGIN_NETWORK, OPENLOGIN_NETWORK_TYPE, OpenloginUserInfo } from \"@toruslabs/openlogin\";\nimport { SafeEventEmitter } from \"@toruslabs/openlogin-jrpc\";\n\nimport { getChainConfig } from \"../chain/config\";\nimport { AdapterNamespaceType, CHAIN_NAMESPACES, ChainNamespaceType, CustomChainConfig } from \"../chain/IChainInterface\";\nimport { WalletInitializationError, WalletLoginError } from \"../errors\";\nimport { SafeEventEmitterProvider } from \"../provider/IProvider\";\nimport { WALLET_ADAPTERS } from \"../wallet\";\n\nexport type UserInfo = OpenloginUserInfo;\n\nexport const ADAPTER_CATEGORY = {\n  EXTERNAL: \"external\",\n  IN_APP: \"in_app\",\n} as const;\nexport type ADAPTER_CATEGORY_TYPE = (typeof ADAPTER_CATEGORY)[keyof typeof ADAPTER_CATEGORY];\n\nexport interface AdapterInitOptions {\n  /**\n   * Whether to auto connect to the adapter based on redirect mode or saved adapters\n   */\n  autoConnect?: boolean;\n}\n\nexport const ADAPTER_STATUS = {\n  NOT_READY: \"not_ready\",\n  READY: \"ready\",\n  CONNECTING: \"connecting\",\n  CONNECTED: \"connected\",\n  DISCONNECTED: \"disconnected\",\n  ERRORED: \"errored\",\n} as const;\n\nexport const ADAPTER_EVENTS = {\n  ...ADAPTER_STATUS,\n  ADAPTER_DATA_UPDATED: \"adapter_data_updated\",\n} as const;\nexport type ADAPTER_STATUS_TYPE = (typeof ADAPTER_STATUS)[keyof typeof ADAPTER_STATUS];\n\nexport type CONNECTED_EVENT_DATA = {\n  adapter: string;\n  reconnected: boolean;\n};\n\nexport type UserAuthInfo = { idToken: string };\n\nexport interface BaseAdapterSettings {\n  clientId?: string;\n  sessionTime?: number;\n  chainConfig?: Partial<CustomChainConfig> & Pick<CustomChainConfig, \"chainNamespace\">;\n  web3AuthNetwork?: OPENLOGIN_NETWORK_TYPE;\n  useCoreKitKey?: boolean;\n}\n\nexport interface IAdapter<T> extends SafeEventEmitter {\n  adapterNamespace: AdapterNamespaceType;\n  currentChainNamespace: ChainNamespaceType;\n  chainConfigProxy: CustomChainConfig | null;\n  type: ADAPTER_CATEGORY_TYPE;\n  name: string;\n  sessionTime: number;\n  web3AuthNetwork: OPENLOGIN_NETWORK_TYPE;\n  clientId: string;\n  status: ADAPTER_STATUS_TYPE;\n  provider: SafeEventEmitterProvider | null;\n  adapterData?: unknown;\n  init(options?: AdapterInitOptions): Promise<void>;\n  disconnect(options?: { cleanup: boolean }): Promise<void>;\n  connect(params?: T): Promise<SafeEventEmitterProvider | null>;\n  getUserInfo(): Promise<Partial<UserInfo>>;\n  setAdapterSettings(adapterSettings: BaseAdapterSettings): void;\n  authenticateUser(): Promise<UserAuthInfo>;\n}\n\nexport abstract class BaseAdapter<T> extends SafeEventEmitter implements IAdapter<T> {\n  public adapterData?: unknown = {};\n\n  public sessionTime = 86400;\n\n  public clientId: string;\n\n  public web3AuthNetwork: OPENLOGIN_NETWORK_TYPE = OPENLOGIN_NETWORK.MAINNET;\n\n  protected rehydrated = false;\n\n  // should be added in constructor or from setAdapterSettings function\n  // before calling init function.\n  protected chainConfig: CustomChainConfig | null = null;\n\n  public abstract adapterNamespace: AdapterNamespaceType;\n\n  public abstract currentChainNamespace: ChainNamespaceType;\n\n  public abstract type: ADAPTER_CATEGORY_TYPE;\n\n  public abstract name: string;\n\n  public abstract status: ADAPTER_STATUS_TYPE;\n\n  constructor(options: BaseAdapterSettings = {}) {\n    super();\n    this.setAdapterSettings(options);\n  }\n\n  get chainConfigProxy(): CustomChainConfig | null {\n    return this.chainConfig ? { ...this.chainConfig } : null;\n  }\n\n  public abstract get provider(): SafeEventEmitterProvider | null;\n\n  public setAdapterSettings(options: BaseAdapterSettings): void {\n    if (this.status === ADAPTER_STATUS.READY) return;\n    if (options?.sessionTime) {\n      this.sessionTime = options.sessionTime;\n    }\n    if (options?.clientId) {\n      this.clientId = options.clientId;\n    }\n    if (options?.web3AuthNetwork) {\n      this.web3AuthNetwork = options.web3AuthNetwork;\n    }\n    const customChainConfig = options.chainConfig;\n    if (customChainConfig) {\n      if (!customChainConfig.chainNamespace) throw WalletInitializationError.notReady(\"ChainNamespace is required while setting chainConfig\");\n      this.currentChainNamespace = customChainConfig.chainNamespace;\n      // chainId is optional in this function.\n      // we go with mainnet chainId by default.\n      const defaultChainConfig = getChainConfig(customChainConfig.chainNamespace, customChainConfig.chainId);\n      // NOTE: It is being forced casted to CustomChainConfig to handle OTHER Chainnamespace\n      // where chainConfig is not required.\n      const finalChainConfig = { ...(defaultChainConfig || {}), ...customChainConfig } as CustomChainConfig;\n\n      this.chainConfig = finalChainConfig;\n    }\n  }\n\n  checkConnectionRequirements(): void {\n    // we reconnect without killing existing wallet connect session on calling connect again.\n    if (this.name === WALLET_ADAPTERS.WALLET_CONNECT_V1 && this.status === ADAPTER_STATUS.CONNECTING) return;\n    else if (this.status === ADAPTER_STATUS.CONNECTING) throw WalletInitializationError.notReady(\"Already connecting\");\n\n    if (this.status === ADAPTER_STATUS.CONNECTED) throw WalletLoginError.connectionError(\"Already connected\");\n    if (this.status !== ADAPTER_STATUS.READY)\n      throw WalletLoginError.connectionError(\n        \"Wallet adapter is not ready yet, Please wait for init function to resolve before calling connect/connectTo function\"\n      );\n  }\n\n  checkInitializationRequirements(): void {\n    if (!this.clientId) throw WalletInitializationError.invalidParams(\"Please initialize Web3Auth with a valid clientId in constructor\");\n    if (!this.chainConfig) throw WalletInitializationError.invalidParams(\"rpcTarget is required in chainConfig\");\n    if (!this.chainConfig.rpcTarget && this.chainConfig.chainNamespace !== CHAIN_NAMESPACES.OTHER) {\n      throw WalletInitializationError.invalidParams(\"rpcTarget is required in chainConfig\");\n    }\n\n    if (!this.chainConfig.chainId && this.chainConfig.chainNamespace !== CHAIN_NAMESPACES.OTHER) {\n      throw WalletInitializationError.invalidParams(\"chainID is required in chainConfig\");\n    }\n    if (this.status === ADAPTER_STATUS.NOT_READY) return;\n    if (this.status === ADAPTER_STATUS.CONNECTED) throw WalletInitializationError.notReady(\"Already connected\");\n    if (this.status === ADAPTER_STATUS.READY) throw WalletInitializationError.notReady(\"Adapter is already initialized\");\n  }\n\n  checkDisconnectionRequirements(): void {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.disconnectionError(\"Not connected with wallet\");\n  }\n\n  updateAdapterData(data: unknown): void {\n    this.adapterData = data;\n    this.emit(ADAPTER_EVENTS.ADAPTER_DATA_UPDATED, { adapterName: this.name, data });\n  }\n\n  abstract init(options?: AdapterInitOptions): Promise<void>;\n  abstract connect(params?: T): Promise<SafeEventEmitterProvider | null>;\n  abstract disconnect(): Promise<void>;\n  abstract getUserInfo(): Promise<Partial<UserInfo>>;\n  abstract authenticateUser(): Promise<UserAuthInfo>;\n}\n\nexport interface BaseAdapterConfig {\n  label: string;\n  showOnModal?: boolean;\n  showOnMobile?: boolean;\n  showOnDesktop?: boolean;\n}\n\nexport type LoginMethodConfig = Record<\n  string,\n  {\n    /**\n     * Display Name. If not provided, we use the default for openlogin app\n     */\n    name: string;\n    /**\n     * Description for button. If provided, it renders as a full length button. else, icon button\n     */\n    description?: string;\n    /**\n     * Logo to be shown on mouse hover. If not provided, we use the default for openlogin app\n     */\n    logoHover?: string;\n    /**\n     * Logo to be shown on dark background (dark theme). If not provided, we use the default for openlogin app\n     */\n    logoLight?: string;\n    /**\n     * Logo to be shown on light background (light theme). If not provided, we use the default for openlogin app\n     */\n    logoDark?: string;\n    /**\n     * Show login button on the main list\n     */\n    mainOption?: boolean;\n    /**\n     * Whether to show the login button on modal or not\n     */\n    showOnModal?: boolean;\n    /**\n     * Whether to show the login button on desktop\n     */\n    showOnDesktop?: boolean;\n    /**\n     * Whether to show the login button on mobile\n     */\n    showOnMobile?: boolean;\n  }\n>;\n\nexport interface IWalletConnectExtensionAdapter {\n  name: string;\n  chains: ChainNamespaceType[];\n  logo: string;\n  mobile: {\n    native: string;\n    universal: string;\n  };\n  desktop: {\n    native: string;\n    universal: string;\n  };\n}\n\nexport interface WalletConnectV1Data {\n  uri: string;\n  extensionAdapters: IWalletConnectExtensionAdapter[];\n}\n\nexport interface IAdapterDataEvent {\n  adapterName: string;\n  data: unknown;\n}\n\nexport interface INetworkSwitchProvider {\n  addChain(chainConfig: CustomChainConfig): Promise<void>;\n  switchChain(chainId: string): Promise<void>;\n}\nexport interface INetworkSwitch {\n  addNetwork(params: { chainConfig: CustomChainConfig; appOrigin: string }): Promise<boolean>;\n  switchNetwork(params: { currentChainConfig: CustomChainConfig; newChainConfig: Partial<CustomChainConfig>; appOrigin: string }): Promise<boolean>;\n}\n\nexport abstract class BaseNetworkSwitch implements INetworkSwitch {\n  abstract switchNetwork(params: {\n    currentChainConfig: CustomChainConfig;\n    newChainConfig: Partial<CustomChainConfig>;\n    appOrigin: string;\n  }): Promise<boolean>;\n\n  abstract addNetwork(params: { chainConfig: CustomChainConfig; appOrigin: string }): Promise<boolean>;\n}\n","export const authServer = \"https://authjs.web3auth.io\";\n","import loglevel from \"loglevel\";\n\nexport default loglevel.getLogger(\"web3auth-logger\");\n","export function storageAvailable(type: \"sessionStorage\" | \"localStorage\"): boolean {\n  let storageExists = false;\n  let storageLength = 0;\n  let storage: Storage;\n  try {\n    storage = (window as any)[type];\n    storageExists = true;\n    storageLength = storage.length;\n    const x = \"__storage_test__\";\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return true;\n  } catch (error: unknown) {\n    const _error = error as DOMException;\n    return !!(\n      _error &&\n      // everything except Firefox\n      (_error.code === 22 ||\n        // Firefox\n        _error.code === 1014 ||\n        // test name field too, because code might not be present\n        // everything except Firefox\n        _error.name === \"QuotaExceededError\" ||\n        // Firefox\n        _error.name === \"NS_ERROR_DOM_QUOTA_REACHED\") &&\n      // acknowledge QuotaExceededError only if there's something already stored\n      storageExists &&\n      storageLength !== 0\n    );\n  }\n}\n\nexport const isHexStrict = (hex: string): boolean => {\n  return (typeof hex === \"string\" || typeof hex === \"number\") && /^(-)?0x[0-9a-f]*$/i.test(hex);\n};\n","import {\n  ADAPTER_EVENTS,\n  ADAPTER_STATUS,\n  AdapterInitOptions,\n  BaseAdapter,\n  CHAIN_NAMESPACES,\n  checkIfTokenIsExpired,\n  clearToken,\n  getChainConfig,\n  getSavedToken,\n  saveToken,\n  signChallenge,\n  UserAuthInfo,\n  verifySignedChallenge,\n  WalletLoginError,\n} from \"@web3auth/base\";\nimport bs58 from \"bs58\";\n\nexport abstract class BaseSolanaAdapter<T> extends BaseAdapter<T> {\n  async init(_?: AdapterInitOptions): Promise<void> {\n    if (!this.chainConfig) this.chainConfig = getChainConfig(CHAIN_NAMESPACES.SOLANA, 1);\n  }\n\n  async authenticateUser(): Promise<UserAuthInfo> {\n    if (!this.provider || this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError();\n\n    const { chainNamespace, chainId } = this.chainConfig;\n\n    const accounts = await this.provider.request<string[]>({\n      method: \"getAccounts\",\n    });\n    if (accounts && accounts.length > 0) {\n      const existingToken = getSavedToken(accounts[0] as string, this.name);\n      if (existingToken) {\n        const isExpired = checkIfTokenIsExpired(existingToken);\n        if (!isExpired) {\n          return { idToken: existingToken };\n        }\n      }\n\n      const payload = {\n        domain: window.location.origin,\n        uri: window.location.href,\n        address: accounts[0],\n        chainId: parseInt(chainId, 16),\n        version: \"1\",\n        nonce: Math.random().toString(36).slice(2),\n        issuedAt: new Date().toISOString(),\n      };\n\n      const challenge = await signChallenge(payload, chainNamespace);\n      const encodedMessage = new TextEncoder().encode(challenge);\n      const signedMessage = await this.provider.request<Uint8Array>({\n        method: \"signMessage\",\n        params: {\n          message: encodedMessage,\n          display: \"utf8\",\n        },\n      });\n      const idToken = await verifySignedChallenge(\n        chainNamespace,\n        bs58.encode(signedMessage as Uint8Array),\n        challenge,\n        this.name,\n        this.sessionTime,\n        this.clientId,\n        this.web3AuthNetwork\n      );\n      saveToken(accounts[0] as string, this.name, idToken);\n      return {\n        idToken,\n      };\n    }\n    throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n  }\n\n  async disconnectSession(): Promise<void> {\n    super.checkDisconnectionRequirements();\n    const accounts = await this.provider.request<string[]>({\n      method: \"getAccounts\",\n    });\n    if (accounts && accounts.length > 0) {\n      clearToken(accounts[0], this.name);\n    }\n  }\n\n  async disconnect(): Promise<void> {\n    this.rehydrated = false;\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n}\n","import { post } from \"@toruslabs/http-helpers\";\nimport { OPENLOGIN_NETWORK_TYPE } from \"@toruslabs/openlogin\";\nimport JwtDecode from \"jwt-decode\";\n\nimport { ChainNamespaceType } from \"../chain/IChainInterface\";\nimport { authServer } from \"../constants\";\nimport log from \"../loglevel\";\nimport { storageAvailable } from \"../utils\";\n\nexport const checkIfTokenIsExpired = (token: string) => {\n  const decoded = JwtDecode<{ exp: number }>(token);\n  if (!decoded.exp) {\n    return true;\n  }\n  if (decoded.exp < Math.floor(Date.now() / 1000)) {\n    return true;\n  }\n  return false;\n};\n\nexport const signChallenge = async (payload: Record<string, string | number>, chainNamespace: ChainNamespaceType): Promise<string> => {\n  const t = chainNamespace === \"solana\" ? \"sip99\" : \"eip191\";\n  const header = {\n    t,\n  };\n\n  const network = chainNamespace === \"solana\" ? \"solana\" : \"ethereum\";\n  const data = {\n    payload,\n    header,\n    network,\n  };\n  const res = await post<{ success: boolean; challenge: string }>(`${authServer}/siww/get`, data);\n  if (!res.success) {\n    throw new Error(\"Failed to authenticate user, Please reach out to Web3Auth Support team\");\n  }\n\n  return res.challenge;\n};\n\nexport const verifySignedChallenge = async (\n  chainNamespace: ChainNamespaceType,\n  signedMessage: string,\n  challenge: string,\n  issuer: string,\n  sessionTime: number,\n  clientId?: string,\n  web3AuthNetwork?: OPENLOGIN_NETWORK_TYPE\n): Promise<string> => {\n  const t = chainNamespace === \"solana\" ? \"sip99\" : \"eip191\";\n  const sigData = {\n    signature: {\n      s: signedMessage,\n      t,\n    },\n    message: challenge,\n    issuer,\n    audience: window.location.hostname,\n    timeout: sessionTime,\n  };\n\n  const idTokenRes = await post<{ success: boolean; token: string; error?: string }>(`${authServer}/siww/verify`, sigData, {\n    headers: {\n      client_id: clientId,\n      wallet_provider: issuer,\n      web3auth_network: web3AuthNetwork,\n    },\n  });\n  if (!idTokenRes.success) {\n    log.error(\"Failed to authenticate user, ,message verification failed\", idTokenRes.error);\n    throw new Error(\"Failed to authenticate user, ,message verification failed\");\n  }\n  return idTokenRes.token;\n};\n\nexport const getSavedToken = (userAddress: string, issuer: string) => {\n  if (storageAvailable(\"localStorage\")) {\n    return localStorage.getItem(`${userAddress.toLowerCase()}_${issuer}`);\n  }\n  return null;\n};\n\nexport const saveToken = (userAddress: string, issuer: string, token: string) => {\n  if (storageAvailable(\"localStorage\")) {\n    return localStorage.setItem(`${userAddress.toLowerCase()}_${issuer}`, token);\n  }\n  return null;\n};\n\nexport const clearToken = (userAddress: string, issuer: string) => {\n  if (storageAvailable(\"localStorage\")) {\n    return localStorage.removeItem(`${userAddress.toLowerCase()}_${issuer}`);\n  }\n  return null;\n};\n"],"names":["CHAIN_NAMESPACES","getChainConfig","chainNamespace","chainId","finalChainId","parseInt","Error","concat","getDefaultNetworkId","rpcTarget","displayName","blockExplorer","ticker","tickerName","decimals","getEvmChainConfig","getSolanaChainConfig","Web3AuthError","CustomError","constructor","code","message","super","_defineProperty","this","Object","defineProperty","value","toJSON","name","toString","JSON","stringify","WalletInitializationError","fromCode","extraMessage","arguments","length","undefined","messages","notFound","notInstalled","notReady","windowBlocked","windowClosed","incompatibleChainNameSpace","duplicateAdapterError","invalidProviderConfigError","providerNotReadyError","rpcConnectionError","invalidParams","invalidNetwork","WalletLoginError","connectionError","disconnectionError","notConnectedError","popupClosed","mfaEnabled","MULTI_CHAIN_ADAPTERS","OPENLOGIN","WALLET_CONNECT_V1","WALLET_CONNECT_V2","SOLANA_ADAPTERS","_objectSpread$1","TORUS_SOLANA","PHANTOM","SOLFLARE","SLOPE","EVM_ADAPTERS","TORUS_EVM","METAMASK","COINBASE","WALLET_ADAPTERS","ADAPTER_STATUS","NOT_READY","READY","CONNECTING","CONNECTED","DISCONNECTED","ERRORED","ADAPTER_EVENTS","_objectSpread","ADAPTER_DATA_UPDATED","BaseAdapter","SafeEventEmitter","options","OPENLOGIN_NETWORK","MAINNET","setAdapterSettings","chainConfigProxy","chainConfig","status","sessionTime","clientId","web3AuthNetwork","customChainConfig","currentChainNamespace","finalChainConfig","checkConnectionRequirements","checkInitializationRequirements","checkDisconnectionRequirements","updateAdapterData","data","adapterData","emit","adapterName","authServer","log","loglevel","storageAvailable","type","storage","storageExists","storageLength","window","x","setItem","removeItem","error","_error","BaseSolanaAdapter","init","_","authenticateUser","provider","accounts","request","method","existingToken","userAddress","issuer","localStorage","getItem","toLowerCase","token","decoded","JwtDecode","exp","Math","floor","Date","now","checkIfTokenIsExpired","idToken","payload","domain","location","origin","uri","href","address","version","nonce","random","slice","issuedAt","toISOString","challenge","async","header","t","network","res","post","success","signChallenge","encodedMessage","TextEncoder","encode","signedMessage","params","display","sigData","signature","s","audience","hostname","timeout","idTokenRes","headers","client_id","wallet_provider","web3auth_network","verifySignedChallenge","bs58","saveToken","getSavedToken","disconnectSession","clearToken","disconnect","rehydrated"],"sourceRoot":""}