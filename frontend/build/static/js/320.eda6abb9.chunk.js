"use strict";(self.webpackChunkethglobalistanbul=self.webpackChunkethglobalistanbul||[]).push([[320],{6320:(e,t,i)=>{i.r(t),i.d(t,{OpenloginAdapter:()=>g,getOpenloginDefaultOptions:()=>h});var n=i(13453),o=i(4942),r=i(28779),s=i(12169),a=i(57381),l=i.n(a);const h=()=>({adapterSettings:{network:n.dr.MAINNET,clientId:"",uxMode:n.$e.POPUP},loginSettings:{}});function c(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function p(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?c(Object(i),!0).forEach((function(t){(0,o.Z)(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):c(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}class g extends r.J5{constructor(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};super(e),(0,o.Z)(this,"name",r.rW.OPENLOGIN),(0,o.Z)(this,"adapterNamespace",r.yk.MULTICHAIN),(0,o.Z)(this,"type",r.hN.IN_APP),(0,o.Z)(this,"openloginInstance",null),(0,o.Z)(this,"status",r.MP.NOT_READY),(0,o.Z)(this,"currentChainNamespace",r.EN.EIP155),(0,o.Z)(this,"openloginOptions",void 0),(0,o.Z)(this,"loginSettings",{loginProvider:""}),(0,o.Z)(this,"privKeyProvider",null),this.setAdapterSettings(p(p({},e.adapterSettings),{},{chainConfig:e.chainConfig,clientId:e.clientId||"",sessionTime:e.sessionTime,web3AuthNetwork:e.web3AuthNetwork,useCoreKitKey:e.useCoreKitKey})),this.loginSettings=e.loginSettings||{loginProvider:""}}get chainConfigProxy(){return this.chainConfig?p({},this.chainConfig):null}get provider(){var e;return(null===(e=this.privKeyProvider)||void 0===e?void 0:e.provider)||null}set provider(e){throw new Error("Not implemented")}async init(e){if(super.checkInitializationRequirements(),!this.clientId)throw r.Ty.invalidParams("clientId is required before openlogin's initialization");if(!this.openloginOptions)throw r.Ty.invalidParams("openloginOptions is required before openlogin's initialization");let t=!1;if(this.openloginOptions.uxMode===n.$e.REDIRECT||this.openloginOptions.uxMode===n.$e.SESSIONLESS_REDIRECT){const e=(0,n.Gv)();Object.keys(e).length>0&&e._pid&&(t=!0)}this.openloginOptions=p(p({},this.openloginOptions),{},{replaceUrlOnRedirect:t}),this.openloginInstance=new n.ZP(p(p({},this.openloginOptions),{},{clientId:this.clientId,network:this.openloginOptions.network||this.web3AuthNetwork||n.dr.MAINNET})),r.cM.debug("initializing openlogin adapter init"),await this.openloginInstance.init(),this.status=r.MP.READY,this.emit(r.n2.READY,r.rW.OPENLOGIN);try{r.cM.debug("initializing openlogin adapter");this._getFinalPrivKey()&&(e.autoConnect||t)&&(this.rehydrated=!0,await this.connect())}catch(i){r.cM.error("Failed to connect with cached openlogin provider",i),this.emit("ERRORED",i)}}async connect(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{loginProvider:""};super.checkConnectionRequirements(),this.status=r.MP.CONNECTING,this.emit(r.n2.CONNECTING,p(p({},e),{},{adapter:r.rW.OPENLOGIN}));try{return await this.connectWithProvider(e),this.provider}catch(t){if(r.cM.error("Failed to connect with openlogin provider",t),this.status=r.MP.READY,this.emit(r.n2.ERRORED,t),null!==t&&void 0!==t&&t.message.includes("user closed popup"))throw r.RM.popupClosed();throw r.RM.connectionError("Failed to login with openlogin")}}async disconnect(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{cleanup:!1};if(this.status!==r.MP.CONNECTED)throw r.RM.notConnectedError("Not connected with wallet");if(!this.openloginInstance)throw r.Ty.notReady("openloginInstance is not ready");await this.openloginInstance.logout(),e.cleanup?(this.status=r.MP.NOT_READY,this.openloginInstance=null,this.privKeyProvider=null):this.status=r.MP.READY,this.rehydrated=!1,this.emit(r.n2.DISCONNECTED)}async authenticateUser(){if(this.status!==r.MP.CONNECTED)throw r.RM.notConnectedError("Not connected with wallet, Please login/connect first");return{idToken:(await this.getUserInfo()).idToken}}async getUserInfo(){if(this.status!==r.MP.CONNECTED)throw r.RM.notConnectedError("Not connected with wallet");if(!this.openloginInstance)throw r.Ty.notReady("openloginInstance is not ready");return await this.openloginInstance.getUserInfo()}setAdapterSettings(e){super.setAdapterSettings(e);const t=h();r.cM.info("setting adapter settings",e),this.openloginOptions=p(p(p({},t.adapterSettings),this.openloginOptions),e),e.web3AuthNetwork&&(this.openloginOptions.network=e.web3AuthNetwork),void 0!==e.useCoreKitKey&&(this.openloginOptions.useCoreKitKey=e.useCoreKitKey)}_getFinalPrivKey(){var e;if(!this.openloginInstance)return"";let t=this.openloginInstance.privKey;return null!==(e=this.openloginOptions)&&void 0!==e&&e.useCoreKitKey&&this.openloginInstance.coreKitKey&&(t=this.openloginInstance.coreKitKey),t}async connectWithProvider(){var e;let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{loginProvider:""};if(!this.chainConfig)throw r.Ty.invalidParams("chainConfig is required before initialization");if(!this.openloginInstance)throw r.Ty.notReady("openloginInstance is not ready");if(this.currentChainNamespace===r.EN.SOLANA){const{SolanaPrivateKeyProvider:e}=await Promise.all([i.e(201),i.e(945),i.e(833)]).then(i.bind(i,57945));this.privKeyProvider=new e({config:{chainConfig:this.chainConfig}})}else if(this.currentChainNamespace===r.EN.EIP155){const{EthereumPrivateKeyProvider:e}=await Promise.all([i.e(454),i.e(755)]).then(i.bind(i,58454));this.privKeyProvider=new e({config:{chainConfig:this.chainConfig}})}else{if(this.currentChainNamespace!==r.EN.OTHER)throw new Error("Invalid chainNamespace: ".concat(this.currentChainNamespace," found while connecting to wallet"));this.privKeyProvider=new s.FL}if(!this._getFinalPrivKey()||null!==(e=t.extraLoginOptions)&&void 0!==e&&e.id_token){var o;if(this.loginSettings.curve||(this.loginSettings.curve=this.currentChainNamespace===r.EN.SOLANA?n.x7.ED25519:n.x7.SECP256K1),!t.loginProvider&&!this.loginSettings.loginProvider)throw r.Ty.invalidParams("loginProvider is required for login");await this.openloginInstance.login(l()(this.loginSettings,t,{extraLoginOptions:p(p({},t.extraLoginOptions||{}),{},{login_hint:t.login_hint||(null===(o=t.extraLoginOptions)||void 0===o?void 0:o.login_hint)})}))}let a=this._getFinalPrivKey();if(a){if(this.currentChainNamespace===r.EN.SOLANA){const{getED25519Key:e}=await Promise.all([i.e(201),i.e(274)]).then(i.bind(i,42240));a=e(a).sk.toString("hex")}await this.privKeyProvider.setupProvider(a),this.status=r.MP.CONNECTED,this.emit(r.n2.CONNECTED,{adapter:r.rW.OPENLOGIN,reconnected:this.rehydrated})}}}}}]);
//# sourceMappingURL=320.eda6abb9.chunk.js.map