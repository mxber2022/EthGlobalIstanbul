{"version":3,"file":"static/js/945.99521d5a.chunk.js","mappings":"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","sources":["../../src/Layout.ts","../node_modules/@solana/buffer-layout/node_modules/buffer/index.js","../node_modules/@noble/hashes/src/_sha2.ts","../node_modules/@noble/hashes/src/sha512.ts","../node_modules/@noble/curves/src/abstract/modular.ts","../node_modules/@noble/curves/src/abstract/curve.ts","../node_modules/@noble/curves/src/abstract/edwards.ts","../node_modules/@noble/curves/src/ed25519.ts","../node_modules/@noble/hashes/src/sha256.ts","../node_modules/@solana/web3.js/node_modules/superstruct/src/error.ts","../node_modules/@solana/web3.js/node_modules/superstruct/src/utils.ts","../node_modules/@solana/web3.js/node_modules/superstruct/src/struct.ts","../node_modules/@solana/web3.js/node_modules/superstruct/src/structs/utilities.ts","../node_modules/@solana/web3.js/node_modules/superstruct/src/structs/types.ts","../node_modules/@solana/web3.js/node_modules/superstruct/src/structs/coercions.ts","../node_modules/@noble/hashes/src/hmac.ts","../node_modules/@noble/curves/src/abstract/weierstrass.ts","../node_modules/@noble/curves/src/_shortw_utils.ts","../node_modules/@noble/curves/src/secp256k1.ts","../node_modules/@solana/web3.js/src/utils/ed25519.ts","../node_modules/@solana/web3.js/src/utils/to-buffer.ts","../node_modules/@solana/web3.js/src/utils/borsh-schema.ts","../node_modules/@solana/web3.js/src/publickey.ts","../node_modules/@solana/web3.js/src/bpf-loader-deprecated.ts","../node_modules/@solana/web3.js/src/transaction/constants.ts","../node_modules/@solana/web3.js/src/transaction/expiry-custom-errors.ts","../node_modules/@solana/web3.js/src/message/account-keys.ts","../node_modules/@solana/web3.js/src/layout.ts","../node_modules/@solana/web3.js/src/utils/shortvec-encoding.ts","../node_modules/@solana/web3.js/src/utils/assert.ts","../node_modules/@solana/web3.js/src/message/compiled-keys.ts","../node_modules/@solana/web3.js/src/message/legacy.ts","../node_modules/@solana/web3.js/src/message/v0.ts","../node_modules/@solana/web3.js/src/message/versioned.ts","../node_modules/@solana/web3.js/src/transaction/legacy.ts","../node_modules/@solana/web3.js/src/transaction/versioned.ts","../node_modules/@solana/web3.js/src/timing.ts","../node_modules/@solana/web3.js/src/sysvar.ts","../node_modules/@solana/web3.js/src/utils/send-and-confirm-transaction.ts","../node_modules/@solana/web3.js/src/utils/sleep.ts","../node_modules/@solana/web3.js/src/instruction.ts","../node_modules/@solana/web3.js/src/fee-calculator.ts","../node_modules/@solana/web3.js/src/nonce-account.ts","../node_modules/@solana/web3.js/src/utils/bigint.ts","../node_modules/@solana/web3.js/src/programs/system.ts","../node_modules/@solana/web3.js/src/loader.ts","../node_modules/@solana/web3.js/src/bpf-loader.ts","../node_modules/node_modules/.pnpm/fast-stable-stringify@1.0.0/node_modules/fast-stable-stringify/index.js","../node_modules/@solana/web3.js/src/epoch-schedule.ts","../node_modules/@solana/web3.js/src/errors.ts","../node_modules/@solana/web3.js/src/__forks__/browser/fetch-impl.ts","../node_modules/@solana/web3.js/src/rpc-websocket.ts","../node_modules/@solana/web3.js/src/programs/address-lookup-table/state.ts","../node_modules/@solana/web3.js/src/account-data.ts","../node_modules/@solana/web3.js/src/utils/makeWebsocketUrl.ts","../node_modules/@solana/web3.js/src/connection.ts","../node_modules/@solana/web3.js/src/keypair.ts","../node_modules/@solana/web3.js/src/programs/address-lookup-table/index.ts","../node_modules/@solana/web3.js/src/programs/compute-budget.ts","../node_modules/@solana/web3.js/src/programs/ed25519.ts","../node_modules/@solana/web3.js/src/utils/secp256k1.ts","../node_modules/@solana/web3.js/src/programs/secp256k1.ts","../node_modules/@solana/web3.js/src/programs/stake.ts","../node_modules/@solana/web3.js/src/programs/vote.ts","../node_modules/@solana/web3.js/src/validator-info.ts","../node_modules/@solana/web3.js/src/vote-account.ts","../node_modules/@solana/web3.js/node_modules/buffer/index.js","../node_modules/@web3auth/solana-provider/node_modules/@web3auth/base/src/chain/IChainInterface.ts","../node_modules/@web3auth/solana-provider/node_modules/@web3auth/base/src/errors/index.ts","../node_modules/@web3auth/solana-provider/node_modules/@web3auth/base/src/wallet/index.ts","../node_modules/@web3auth/solana-provider/node_modules/@web3auth/base/src/adapter/IAdapter.ts","../node_modules/@web3auth/solana-provider/node_modules/@web3auth/base/src/loglevel.ts","../node_modules/@web3auth/solana-provider/node_modules/@web3auth/base/src/utils.ts","../node_modules/@web3auth/solana-provider/src/rpc/JrpcClient.ts","../node_modules/@web3auth/solana-provider/src/rpc/solanaRpcMiddlewares.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/base/baseInjectedProvider.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/base/providerHandlers.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/injectedProviderProxy.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/phantom/phantomInjectedProvider.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/slope/providerHandlers.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/slope/slopeInjectedProvider.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/solflare/solflareInjectedProvider.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/solflare/providerHandlers.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/torus/torusInjectedProvider.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/torus/providerHandlers.ts","../node_modules/@web3auth/solana-provider/src/providers/privateKeyProvider/solanaPrivateKeyProvider.ts","../node_modules/@web3auth/solana-provider/src/providers/privateKeyProvider/solanaPrivateKeyUtils.ts","../node_modules/@web3auth/solana-provider/src/solanaWallet.ts","../node_modules/base-x/src/index.js","../node_modules/bigint-buffer/dist/browser.js","../node_modules/borsh/lib/index.js","../node_modules/bs58/index.js","../node_modules/jayson/lib/client/browser/index.js","../node_modules/jayson/lib/generateRequest.js","../node_modules/rpc-websockets/dist/lib/client.js","../node_modules/rpc-websockets/dist/lib/client/websocket.browser.js","../node_modules/rpc-websockets/dist/lib/utils.js","../node_modules/uuid/dist/esm-browser/rng.js","../node_modules/uuid/dist/esm-browser/regex.js","../node_modules/uuid/dist/esm-browser/validate.js","../node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/uuid/dist/esm-browser/v4.js","../node_modules/@babel/runtime/helpers/assertThisInitialized.js","../node_modules/@babel/runtime/helpers/asyncToGenerator.js","../node_modules/@babel/runtime/helpers/classCallCheck.js","../node_modules/@babel/runtime/helpers/createClass.js","../node_modules/@babel/runtime/helpers/getPrototypeOf.js","../node_modules/@babel/runtime/helpers/inherits.js","../node_modules/@babel/runtime/helpers/interopRequireDefault.js","../node_modules/@babel/runtime/helpers/possibleConstructorReturn.js","../node_modules/@babel/runtime/helpers/setPrototypeOf.js","../node_modules/@babel/runtime/helpers/toPrimitive.js","../node_modules/@babel/runtime/helpers/toPropertyKey.js","../node_modules/text-encoding-utf-8/lib/encoding.lib.mjs"],"sourcesContent":[null,"/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nconst base64 = require('base64-js')\nconst ieee754 = require('ieee754')\nconst customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nconst K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    const arr = new Uint8Array(1)\n    const proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  const buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  const valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  const b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  const length = byteLength(string, encoding) | 0\n  let buf = createBuffer(length)\n\n  const actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  const length = array.length < 0 ? 0 : checked(array.length) | 0\n  const buf = createBuffer(length)\n  for (let i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    const copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  let buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    const len = checked(obj.length) | 0\n    const buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  let x = a.length\n  let y = b.length\n\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  let i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  const buffer = Buffer.allocUnsafe(length)\n  let pos = 0\n  for (i = 0; i < list.length; ++i) {\n    let buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)\n        buf.copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  const len = string.length\n  const mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  let loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  const i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  const len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (let i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  const len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (let i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  const len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (let i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  const length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  let str = ''\n  const max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  let x = thisEnd - thisStart\n  let y = end - start\n  const len = Math.min(x, y)\n\n  const thisCopy = this.slice(thisStart, thisEnd)\n  const targetCopy = target.slice(start, end)\n\n  for (let i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  let indexSize = 1\n  let arrLength = arr.length\n  let valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  let i\n  if (dir) {\n    let foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      let found = true\n      for (let j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  const remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  const strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  let i\n  for (i = 0; i < length; ++i) {\n    const parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  const remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  const res = []\n\n  let i = start\n  while (i < end) {\n    const firstByte = buf[i]\n    let codePoint = null\n    let bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      let secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nconst MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  const len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  let res = ''\n  let i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  const len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  let out = ''\n  for (let i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  const bytes = buf.slice(start, end)\n  let res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (let i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  const len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  const newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  let val = this[offset + --byteLength]\n  let mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const lo = first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24\n\n  const hi = this[++offset] +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    last * 2 ** 24\n\n  return BigInt(lo) + (BigInt(hi) << BigInt(32))\n})\n\nBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const hi = first * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  const lo = this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last\n\n  return (BigInt(hi) << BigInt(32)) + BigInt(lo)\n})\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let i = byteLength\n  let mul = 1\n  let val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = this[offset + 4] +\n    this[offset + 5] * 2 ** 8 +\n    this[offset + 6] * 2 ** 16 +\n    (last << 24) // Overflow\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24)\n})\n\nBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = (first << 24) + // Overflow\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last)\n})\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let mul = 1\n  let i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction wrtBigUInt64LE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  return offset\n}\n\nfunction wrtBigUInt64BE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset + 7] = lo\n  lo = lo >> 8\n  buf[offset + 6] = lo\n  lo = lo >> 8\n  buf[offset + 5] = lo\n  lo = lo >> 8\n  buf[offset + 4] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset + 3] = hi\n  hi = hi >> 8\n  buf[offset + 2] = hi\n  hi = hi >> 8\n  buf[offset + 1] = hi\n  hi = hi >> 8\n  buf[offset] = hi\n  return offset + 8\n}\n\nBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = 0\n  let mul = 1\n  let sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  let sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  const len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      const code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  let i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    const bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    const len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// CUSTOM ERRORS\n// =============\n\n// Simplified versions from Node, changed for Buffer-only usage\nconst errors = {}\nfunction E (sym, getMessage, Base) {\n  errors[sym] = class NodeError extends Base {\n    constructor () {\n      super()\n\n      Object.defineProperty(this, 'message', {\n        value: getMessage.apply(this, arguments),\n        writable: true,\n        configurable: true\n      })\n\n      // Add the error code to the name to include it in the stack trace.\n      this.name = `${this.name} [${sym}]`\n      // Access the stack to generate the error message including the error code\n      // from the name.\n      this.stack // eslint-disable-line no-unused-expressions\n      // Reset the name to the actual name.\n      delete this.name\n    }\n\n    get code () {\n      return sym\n    }\n\n    set code (value) {\n      Object.defineProperty(this, 'code', {\n        configurable: true,\n        enumerable: true,\n        value,\n        writable: true\n      })\n    }\n\n    toString () {\n      return `${this.name} [${sym}]: ${this.message}`\n    }\n  }\n}\n\nE('ERR_BUFFER_OUT_OF_BOUNDS',\n  function (name) {\n    if (name) {\n      return `${name} is outside of buffer bounds`\n    }\n\n    return 'Attempt to access memory outside buffer bounds'\n  }, RangeError)\nE('ERR_INVALID_ARG_TYPE',\n  function (name, actual) {\n    return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`\n  }, TypeError)\nE('ERR_OUT_OF_RANGE',\n  function (str, range, input) {\n    let msg = `The value of \"${str}\" is out of range.`\n    let received = input\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n      received = addNumericalSeparator(String(input))\n    } else if (typeof input === 'bigint') {\n      received = String(input)\n      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n        received = addNumericalSeparator(received)\n      }\n      received += 'n'\n    }\n    msg += ` It must be ${range}. Received ${received}`\n    return msg\n  }, RangeError)\n\nfunction addNumericalSeparator (val) {\n  let res = ''\n  let i = val.length\n  const start = val[0] === '-' ? 1 : 0\n  for (; i >= start + 4; i -= 3) {\n    res = `_${val.slice(i - 3, i)}${res}`\n  }\n  return `${val.slice(0, i)}${res}`\n}\n\n// CHECK FUNCTIONS\n// ===============\n\nfunction checkBounds (buf, offset, byteLength) {\n  validateNumber(offset, 'offset')\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\n    boundsError(offset, buf.length - (byteLength + 1))\n  }\n}\n\nfunction checkIntBI (value, min, max, buf, offset, byteLength) {\n  if (value > max || value < min) {\n    const n = typeof min === 'bigint' ? 'n' : ''\n    let range\n    if (byteLength > 3) {\n      if (min === 0 || min === BigInt(0)) {\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`\n      } else {\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +\n                `${(byteLength + 1) * 8 - 1}${n}`\n      }\n    } else {\n      range = `>= ${min}${n} and <= ${max}${n}`\n    }\n    throw new errors.ERR_OUT_OF_RANGE('value', range, value)\n  }\n  checkBounds(buf, offset, byteLength)\n}\n\nfunction validateNumber (value, name) {\n  if (typeof value !== 'number') {\n    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)\n  }\n}\n\nfunction boundsError (value, length, type) {\n  if (Math.floor(value) !== value) {\n    validateNumber(value, type)\n    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)\n  }\n\n  if (length < 0) {\n    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()\n  }\n\n  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',\n                                    `>= ${type ? 1 : 0} and <= ${length}`,\n                                    value)\n}\n\n// HELPER FUNCTIONS\n// ================\n\nconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  let codePoint\n  const length = string.length\n  let leadSurrogate = null\n  const bytes = []\n\n  for (let i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  let c, hi, lo\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  let i\n  for (i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nconst hexSliceLookupTable = (function () {\n  const alphabet = '0123456789abcdef'\n  const table = new Array(256)\n  for (let i = 0; i < 16; ++i) {\n    const i16 = i * 16\n    for (let j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n\n// Return not function with Error if BigInt not supported\nfunction defineBigIntMethod (fn) {\n  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn\n}\n\nfunction BufferBigIntNotDefined () {\n  throw new Error('BigInt not supported')\n}\n","import { exists, output } from './_assert.js';\nimport { Hash, createView, Input, toBytes } from './utils.js';\n\n// Polyfill for Safari 14\nfunction setBigUint64(view: DataView, byteOffset: number, value: bigint, isLE: boolean): void {\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\n  const _32n = BigInt(32);\n  const _u32_max = BigInt(0xffffffff);\n  const wh = Number((value >> _32n) & _u32_max);\n  const wl = Number(value & _u32_max);\n  const h = isLE ? 4 : 0;\n  const l = isLE ? 0 : 4;\n  view.setUint32(byteOffset + h, wh, isLE);\n  view.setUint32(byteOffset + l, wl, isLE);\n}\n\n// Base SHA2 class (RFC 6234)\nexport abstract class SHA2<T extends SHA2<T>> extends Hash<T> {\n  protected abstract process(buf: DataView, offset: number): void;\n  protected abstract get(): number[];\n  protected abstract set(...args: number[]): void;\n  abstract destroy(): void;\n  protected abstract roundClean(): void;\n  // For partial updates less than block size\n  protected buffer: Uint8Array;\n  protected view: DataView;\n  protected finished = false;\n  protected length = 0;\n  protected pos = 0;\n  protected destroyed = false;\n\n  constructor(\n    readonly blockLen: number,\n    public outputLen: number,\n    readonly padOffset: number,\n    readonly isLE: boolean\n  ) {\n    super();\n    this.buffer = new Uint8Array(blockLen);\n    this.view = createView(this.buffer);\n  }\n  update(data: Input): this {\n    exists(this);\n    const { view, buffer, blockLen } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      // Fast path: we have at least one block in input, cast it to view and process\n      if (take === blockLen) {\n        const dataView = createView(data);\n        for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);\n        continue;\n      }\n      buffer.set(data.subarray(pos, pos + take), this.pos);\n      this.pos += take;\n      pos += take;\n      if (this.pos === blockLen) {\n        this.process(view, 0);\n        this.pos = 0;\n      }\n    }\n    this.length += data.length;\n    this.roundClean();\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    exists(this);\n    output(out, this);\n    this.finished = true;\n    // Padding\n    // We can avoid allocation of buffer for padding completely if it\n    // was previously not allocated here. But it won't change performance.\n    const { buffer, view, blockLen, isLE } = this;\n    let { pos } = this;\n    // append the bit '1' to the message\n    buffer[pos++] = 0b10000000;\n    this.buffer.subarray(pos).fill(0);\n    // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n    if (this.padOffset > blockLen - pos) {\n      this.process(view, 0);\n      pos = 0;\n    }\n    // Pad until full block byte with zeros\n    for (let i = pos; i < blockLen; i++) buffer[i] = 0;\n    // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n    // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n    // So we just write lowest 64 bits of that value.\n    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n    this.process(view, 0);\n    const oview = createView(out);\n    const len = this.outputLen;\n    // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n    if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');\n    const outLen = len / 4;\n    const state = this.get();\n    if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');\n    for (let i = 0; i < outLen; i++) oview.setUint32(4 * i, state[i], isLE);\n  }\n  digest() {\n    const { buffer, outputLen } = this;\n    this.digestInto(buffer);\n    const res = buffer.slice(0, outputLen);\n    this.destroy();\n    return res;\n  }\n  _cloneInto(to?: T): T {\n    to ||= new (this.constructor as any)() as T;\n    to.set(...this.get());\n    const { blockLen, buffer, length, finished, destroyed, pos } = this;\n    to.length = length;\n    to.pos = pos;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    if (length % blockLen) to.buffer.set(buffer);\n    return to;\n  }\n}\n","import { SHA2 } from './_sha2.js';\nimport u64 from './_u64.js';\nimport { wrapConstructor } from './utils.js';\n\n// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):\n// prettier-ignore\nconst [SHA512_Kh, SHA512_Kl] = /* @__PURE__ */ (() => u64.split([\n  '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n  '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n  '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n  '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n  '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n  '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n  '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n  '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n  '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n  '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n  '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n  '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n  '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n  '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n  '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n  '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n  '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n  '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n  '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n  '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n))))();\n\n// Temporary buffer, not used to store anything between runs\nconst SHA512_W_H = /* @__PURE__ */ new Uint32Array(80);\nconst SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);\nexport class SHA512 extends SHA2<SHA512> {\n  // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.\n  // Also looks cleaner and easier to verify with spec.\n  // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n  // h -- high 32 bits, l -- low 32 bits\n  Ah = 0x6a09e667 | 0;\n  Al = 0xf3bcc908 | 0;\n  Bh = 0xbb67ae85 | 0;\n  Bl = 0x84caa73b | 0;\n  Ch = 0x3c6ef372 | 0;\n  Cl = 0xfe94f82b | 0;\n  Dh = 0xa54ff53a | 0;\n  Dl = 0x5f1d36f1 | 0;\n  Eh = 0x510e527f | 0;\n  El = 0xade682d1 | 0;\n  Fh = 0x9b05688c | 0;\n  Fl = 0x2b3e6c1f | 0;\n  Gh = 0x1f83d9ab | 0;\n  Gl = 0xfb41bd6b | 0;\n  Hh = 0x5be0cd19 | 0;\n  Hl = 0x137e2179 | 0;\n\n  constructor() {\n    super(128, 64, 16, false);\n  }\n  // prettier-ignore\n  protected get(): [\n    number, number, number, number, number, number, number, number,\n    number, number, number, number, number, number, number, number\n  ] {\n    const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n    return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n  }\n  // prettier-ignore\n  protected set(\n    Ah: number, Al: number, Bh: number, Bl: number, Ch: number, Cl: number, Dh: number, Dl: number,\n    Eh: number, El: number, Fh: number, Fl: number, Gh: number, Gl: number, Hh: number, Hl: number\n  ) {\n    this.Ah = Ah | 0;\n    this.Al = Al | 0;\n    this.Bh = Bh | 0;\n    this.Bl = Bl | 0;\n    this.Ch = Ch | 0;\n    this.Cl = Cl | 0;\n    this.Dh = Dh | 0;\n    this.Dl = Dl | 0;\n    this.Eh = Eh | 0;\n    this.El = El | 0;\n    this.Fh = Fh | 0;\n    this.Fl = Fl | 0;\n    this.Gh = Gh | 0;\n    this.Gl = Gl | 0;\n    this.Hh = Hh | 0;\n    this.Hl = Hl | 0;\n  }\n  protected process(view: DataView, offset: number) {\n    // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) {\n      SHA512_W_H[i] = view.getUint32(offset);\n      SHA512_W_L[i] = view.getUint32((offset += 4));\n    }\n    for (let i = 16; i < 80; i++) {\n      // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n      const W15h = SHA512_W_H[i - 15] | 0;\n      const W15l = SHA512_W_L[i - 15] | 0;\n      const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\n      const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);\n      // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n      const W2h = SHA512_W_H[i - 2] | 0;\n      const W2l = SHA512_W_L[i - 2] | 0;\n      const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\n      const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);\n      // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n      const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n      const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n      SHA512_W_H[i] = SUMh | 0;\n      SHA512_W_L[i] = SUMl | 0;\n    }\n    let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n    // Compression function main loop, 80 rounds\n    for (let i = 0; i < 80; i++) {\n      // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n      const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\n      const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);\n      //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n      const CHIl = (El & Fl) ^ (~El & Gl);\n      // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n      // prettier-ignore\n      const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n      const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n      const T1l = T1ll | 0;\n      // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n      const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\n      const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\n      const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n      const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n      Hh = Gh | 0;\n      Hl = Gl | 0;\n      Gh = Fh | 0;\n      Gl = Fl | 0;\n      Fh = Eh | 0;\n      Fl = El | 0;\n      ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n      Dh = Ch | 0;\n      Dl = Cl | 0;\n      Ch = Bh | 0;\n      Cl = Bl | 0;\n      Bh = Ah | 0;\n      Bl = Al | 0;\n      const All = u64.add3L(T1l, sigma0l, MAJl);\n      Ah = u64.add3H(All, T1h, sigma0h, MAJh);\n      Al = All | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n    ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n    ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n    ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n    ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n    ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n    ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n    ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n    this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n  }\n  protected roundClean() {\n    SHA512_W_H.fill(0);\n    SHA512_W_L.fill(0);\n  }\n  destroy() {\n    this.buffer.fill(0);\n    this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n  }\n}\n\nclass SHA512_224 extends SHA512 {\n  // h -- high 32 bits, l -- low 32 bits\n  Ah = 0x8c3d37c8 | 0;\n  Al = 0x19544da2 | 0;\n  Bh = 0x73e19966 | 0;\n  Bl = 0x89dcd4d6 | 0;\n  Ch = 0x1dfab7ae | 0;\n  Cl = 0x32ff9c82 | 0;\n  Dh = 0x679dd514 | 0;\n  Dl = 0x582f9fcf | 0;\n  Eh = 0x0f6d2b69 | 0;\n  El = 0x7bd44da8 | 0;\n  Fh = 0x77e36f73 | 0;\n  Fl = 0x04c48942 | 0;\n  Gh = 0x3f9d85a8 | 0;\n  Gl = 0x6a1d36c8 | 0;\n  Hh = 0x1112e6ad | 0;\n  Hl = 0x91d692a1 | 0;\n\n  constructor() {\n    super();\n    this.outputLen = 28;\n  }\n}\n\nclass SHA512_256 extends SHA512 {\n  // h -- high 32 bits, l -- low 32 bits\n  Ah = 0x22312194 | 0;\n  Al = 0xfc2bf72c | 0;\n  Bh = 0x9f555fa3 | 0;\n  Bl = 0xc84c64c2 | 0;\n  Ch = 0x2393b86b | 0;\n  Cl = 0x6f53b151 | 0;\n  Dh = 0x96387719 | 0;\n  Dl = 0x5940eabd | 0;\n  Eh = 0x96283ee2 | 0;\n  El = 0xa88effe3 | 0;\n  Fh = 0xbe5e1e25 | 0;\n  Fl = 0x53863992 | 0;\n  Gh = 0x2b0199fc | 0;\n  Gl = 0x2c85b8aa | 0;\n  Hh = 0x0eb72ddc | 0;\n  Hl = 0x81c52ca2 | 0;\n\n  constructor() {\n    super();\n    this.outputLen = 32;\n  }\n}\n\nclass SHA384 extends SHA512 {\n  // h -- high 32 bits, l -- low 32 bits\n  Ah = 0xcbbb9d5d | 0;\n  Al = 0xc1059ed8 | 0;\n  Bh = 0x629a292a | 0;\n  Bl = 0x367cd507 | 0;\n  Ch = 0x9159015a | 0;\n  Cl = 0x3070dd17 | 0;\n  Dh = 0x152fecd8 | 0;\n  Dl = 0xf70e5939 | 0;\n  Eh = 0x67332667 | 0;\n  El = 0xffc00b31 | 0;\n  Fh = 0x8eb44a87 | 0;\n  Fl = 0x68581511 | 0;\n  Gh = 0xdb0c2e0d | 0;\n  Gl = 0x64f98fa7 | 0;\n  Hh = 0x47b5481d | 0;\n  Hl = 0xbefa4fa4 | 0;\n\n  constructor() {\n    super();\n    this.outputLen = 48;\n  }\n}\n\nexport const sha512 = /* @__PURE__ */ wrapConstructor(() => new SHA512());\nexport const sha512_224 = /* @__PURE__ */ wrapConstructor(() => new SHA512_224());\nexport const sha512_256 = /* @__PURE__ */ wrapConstructor(() => new SHA512_256());\nexport const sha384 = /* @__PURE__ */ wrapConstructor(() => new SHA384());\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Utilities for modular arithmetics and finite fields\nimport {\n  bitMask,\n  numberToBytesBE,\n  numberToBytesLE,\n  bytesToNumberBE,\n  bytesToNumberLE,\n  ensureBytes,\n  validateObject,\n} from './utils.js';\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n// prettier-ignore\nconst _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);\n// prettier-ignore\nconst _9n = BigInt(9), _16n = BigInt(16);\n\n// Calculates a modulo b\nexport function mod(a: bigint, b: bigint): bigint {\n  const result = a % b;\n  return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\n// TODO: use field version && remove\nexport function pow(num: bigint, power: bigint, modulo: bigint): bigint {\n  if (modulo <= _0n || power < _0n) throw new Error('Expected power/modulo > 0');\n  if (modulo === _1n) return _0n;\n  let res = _1n;\n  while (power > _0n) {\n    if (power & _1n) res = (res * num) % modulo;\n    num = (num * num) % modulo;\n    power >>= _1n;\n  }\n  return res;\n}\n\n// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)\nexport function pow2(x: bigint, power: bigint, modulo: bigint): bigint {\n  let res = x;\n  while (power-- > _0n) {\n    res *= res;\n    res %= modulo;\n  }\n  return res;\n}\n\n// Inverses number over modulo\nexport function invert(number: bigint, modulo: bigint): bigint {\n  if (number === _0n || modulo <= _0n) {\n    throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n  }\n  // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/\n  // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n  let a = mod(number, modulo);\n  let b = modulo;\n  // prettier-ignore\n  let x = _0n, y = _1n, u = _1n, v = _0n;\n  while (a !== _0n) {\n    // JIT applies optimization if those two lines follow each other\n    const q = b / a;\n    const r = b % a;\n    const m = x - u * q;\n    const n = y - v * q;\n    // prettier-ignore\n    b = a, a = r, x = u, y = v, u = m, v = n;\n  }\n  const gcd = b;\n  if (gcd !== _1n) throw new Error('invert: does not exist');\n  return mod(x, modulo);\n}\n\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * Will start an infinite loop if field order P is not prime.\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nexport function tonelliShanks(P: bigint) {\n  // Legendre constant: used to calculate Legendre symbol (a | p),\n  // which denotes the value of a^((p-1)/2) (mod p).\n  // (a | p) ≡ 1    if a is a square (mod p)\n  // (a | p) ≡ -1   if a is not a square (mod p)\n  // (a | p) ≡ 0    if a ≡ 0 (mod p)\n  const legendreC = (P - _1n) / _2n;\n\n  let Q: bigint, S: number, Z: bigint;\n  // Step 1: By factoring out powers of 2 from p - 1,\n  // find q and s such that p - 1 = q*(2^s) with q odd\n  for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++);\n\n  // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\n  for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++);\n\n  // Fast-path\n  if (S === 1) {\n    const p1div4 = (P + _1n) / _4n;\n    return function tonelliFast<T>(Fp: IField<T>, n: T) {\n      const root = Fp.pow(n, p1div4);\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // Slow-path\n  const Q1div2 = (Q + _1n) / _2n;\n  return function tonelliSlow<T>(Fp: IField<T>, n: T): T {\n    // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\n    if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE)) throw new Error('Cannot find square root');\n    let r = S;\n    // TODO: will fail at Fp2/etc\n    let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n    let x = Fp.pow(n, Q1div2); // first guess at the square root\n    let b = Fp.pow(n, Q); // first guess at the fudge factor\n\n    while (!Fp.eql(b, Fp.ONE)) {\n      if (Fp.eql(b, Fp.ZERO)) return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n      // Find m such b^(2^m)==1\n      let m = 1;\n      for (let t2 = Fp.sqr(b); m < r; m++) {\n        if (Fp.eql(t2, Fp.ONE)) break;\n        t2 = Fp.sqr(t2); // t2 *= t2\n      }\n      // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n      const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n      g = Fp.sqr(ge); // g = ge * ge\n      x = Fp.mul(x, ge); // x *= ge\n      b = Fp.mul(b, g); // b *= g\n      r = m;\n    }\n    return x;\n  };\n}\n\nexport function FpSqrt(P: bigint) {\n  // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.\n  // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n\n  // P ≡ 3 (mod 4)\n  // √n = n^((P+1)/4)\n  if (P % _4n === _3n) {\n    // Not all roots possible!\n    // const ORDER =\n    //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n    // const NUM = 72057594037927816n;\n    const p1div4 = (P + _1n) / _4n;\n    return function sqrt3mod4<T>(Fp: IField<T>, n: T) {\n      const root = Fp.pow(n, p1div4);\n      // Throw if root**2 != n\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n  if (P % _8n === _5n) {\n    const c1 = (P - _5n) / _8n;\n    return function sqrt5mod8<T>(Fp: IField<T>, n: T) {\n      const n2 = Fp.mul(n, _2n);\n      const v = Fp.pow(n2, c1);\n      const nv = Fp.mul(n, v);\n      const i = Fp.mul(Fp.mul(nv, _2n), v);\n      const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // P ≡ 9 (mod 16)\n  if (P % _16n === _9n) {\n    // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\n    // Means we cannot use sqrt for constants at all!\n    //\n    // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n    // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n    // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n    // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\n    // sqrt = (x) => {\n    //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\n    //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\n    //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\n    //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\n    //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\n    //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\n    //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n    //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n    //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\n    //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\n    // }\n  }\n\n  // Other cases: Tonelli-Shanks algorithm\n  return tonelliShanks(P);\n}\n\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num: bigint, modulo: bigint) => (mod(num, modulo) & _1n) === _1n;\n\n// Field is not always over prime: for example, Fp2 has ORDER(q)=p^m\nexport interface IField<T> {\n  ORDER: bigint;\n  BYTES: number;\n  BITS: number;\n  MASK: bigint;\n  ZERO: T;\n  ONE: T;\n  // 1-arg\n  create: (num: T) => T;\n  isValid: (num: T) => boolean;\n  is0: (num: T) => boolean;\n  neg(num: T): T;\n  inv(num: T): T;\n  sqrt(num: T): T;\n  sqr(num: T): T;\n  // 2-args\n  eql(lhs: T, rhs: T): boolean;\n  add(lhs: T, rhs: T): T;\n  sub(lhs: T, rhs: T): T;\n  mul(lhs: T, rhs: T | bigint): T;\n  pow(lhs: T, power: bigint): T;\n  div(lhs: T, rhs: T | bigint): T;\n  // N for NonNormalized (for now)\n  addN(lhs: T, rhs: T): T;\n  subN(lhs: T, rhs: T): T;\n  mulN(lhs: T, rhs: T | bigint): T;\n  sqrN(num: T): T;\n\n  // Optional\n  // Should be same as sgn0 function in\n  // [RFC9380](https://www.rfc-editor.org/rfc/rfc9380#section-4.1).\n  // NOTE: sgn0 is 'negative in LE', which is same as odd. And negative in LE is kinda strange definition anyway.\n  isOdd?(num: T): boolean; // Odd instead of even since we have it for Fp2\n  // legendre?(num: T): T;\n  pow(lhs: T, power: bigint): T;\n  invertBatch: (lst: T[]) => T[];\n  toBytes(num: T): Uint8Array;\n  fromBytes(bytes: Uint8Array): T;\n  // If c is False, CMOV returns a, otherwise it returns b.\n  cmov(a: T, b: T, c: boolean): T;\n}\n// prettier-ignore\nconst FIELD_FIELDS = [\n  'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n  'eql', 'add', 'sub', 'mul', 'pow', 'div',\n  'addN', 'subN', 'mulN', 'sqrN'\n] as const;\nexport function validateField<T>(field: IField<T>) {\n  const initial = {\n    ORDER: 'bigint',\n    MASK: 'bigint',\n    BYTES: 'isSafeInteger',\n    BITS: 'isSafeInteger',\n  } as Record<string, string>;\n  const opts = FIELD_FIELDS.reduce((map, val: string) => {\n    map[val] = 'function';\n    return map;\n  }, initial);\n  return validateObject(field, opts);\n}\n\n// Generic field functions\n\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nexport function FpPow<T>(f: IField<T>, num: T, power: bigint): T {\n  // Should have same speed as pow for bigints\n  // TODO: benchmark!\n  if (power < _0n) throw new Error('Expected power > 0');\n  if (power === _0n) return f.ONE;\n  if (power === _1n) return num;\n  let p = f.ONE;\n  let d = num;\n  while (power > _0n) {\n    if (power & _1n) p = f.mul(p, d);\n    d = f.sqr(d);\n    power >>= _1n;\n  }\n  return p;\n}\n\n/**\n * Efficiently invert an array of Field elements.\n * `inv(0)` will return `undefined` here: make sure to throw an error.\n */\nexport function FpInvertBatch<T>(f: IField<T>, nums: T[]): T[] {\n  const tmp = new Array(nums.length);\n  // Walk from first to last, multiply them by each other MOD p\n  const lastMultiplied = nums.reduce((acc, num, i) => {\n    if (f.is0(num)) return acc;\n    tmp[i] = acc;\n    return f.mul(acc, num);\n  }, f.ONE);\n  // Invert last element\n  const inverted = f.inv(lastMultiplied);\n  // Walk from last to first, multiply them by inverted each other MOD p\n  nums.reduceRight((acc, num, i) => {\n    if (f.is0(num)) return acc;\n    tmp[i] = f.mul(acc, tmp[i]);\n    return f.mul(acc, num);\n  }, inverted);\n  return tmp;\n}\n\nexport function FpDiv<T>(f: IField<T>, lhs: T, rhs: T | bigint): T {\n  return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\n}\n\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare<T>(f: IField<T>) {\n  const legendreConst = (f.ORDER - _1n) / _2n; // Integer arithmetic\n  return (x: T): boolean => {\n    const p = f.pow(x, legendreConst);\n    return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\n  };\n}\n\n// CURVE.n lengths\nexport function nLength(n: bigint, nBitLength?: number) {\n  // Bit size, byte size of CURVE.n\n  const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n  const nByteLength = Math.ceil(_nBitLength / 8);\n  return { nBitLength: _nBitLength, nByteLength };\n}\n\ntype FpField = IField<bigint> & Required<Pick<IField<bigint>, 'isOdd'>>;\n/**\n * Initializes a finite field over prime. **Non-primes are not supported.**\n * Do not init in loop: slow. Very fragile: always run a benchmark on a change.\n * Major performance optimizations:\n * * a) denormalized operations like mulN instead of mul\n * * b) same object shape: never add or remove keys\n * * c) Object.freeze\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(\n  ORDER: bigint,\n  bitLen?: number,\n  isLE = false,\n  redef: Partial<IField<bigint>> = {}\n): Readonly<FpField> {\n  if (ORDER <= _0n) throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);\n  const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n  if (BYTES > 2048) throw new Error('Field lengths over 2048 bytes are not supported');\n  const sqrtP = FpSqrt(ORDER);\n  const f: Readonly<FpField> = Object.freeze({\n    ORDER,\n    BITS,\n    BYTES,\n    MASK: bitMask(BITS),\n    ZERO: _0n,\n    ONE: _1n,\n    create: (num) => mod(num, ORDER),\n    isValid: (num) => {\n      if (typeof num !== 'bigint')\n        throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);\n      return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n    },\n    is0: (num) => num === _0n,\n    isOdd: (num) => (num & _1n) === _1n,\n    neg: (num) => mod(-num, ORDER),\n    eql: (lhs, rhs) => lhs === rhs,\n\n    sqr: (num) => mod(num * num, ORDER),\n    add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n    sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n    mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n    pow: (num, power) => FpPow(f, num, power),\n    div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n\n    // Same as above, but doesn't normalize\n    sqrN: (num) => num * num,\n    addN: (lhs, rhs) => lhs + rhs,\n    subN: (lhs, rhs) => lhs - rhs,\n    mulN: (lhs, rhs) => lhs * rhs,\n\n    inv: (num) => invert(num, ORDER),\n    sqrt: redef.sqrt || ((n) => sqrtP(f, n)),\n    invertBatch: (lst) => FpInvertBatch(f, lst),\n    // TODO: do we really need constant cmov?\n    // We don't have const-time bigints anyway, so probably will be not very useful\n    cmov: (a, b, c) => (c ? b : a),\n    toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\n    fromBytes: (bytes) => {\n      if (bytes.length !== BYTES)\n        throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);\n      return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n    },\n  } as FpField);\n  return Object.freeze(f);\n}\n\nexport function FpSqrtOdd<T>(Fp: IField<T>, elm: T) {\n  if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? root : Fp.neg(root);\n}\n\nexport function FpSqrtEven<T>(Fp: IField<T>, elm: T) {\n  if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use mapKeyToField instead\n */\nexport function hashToPrivateScalar(\n  hash: string | Uint8Array,\n  groupOrder: bigint,\n  isLE = false\n): bigint {\n  hash = ensureBytes('privateHash', hash);\n  const hashLen = hash.length;\n  const minLen = nLength(groupOrder).nByteLength + 8;\n  if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n    throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);\n  const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n  return mod(num, groupOrder - _1n) + _1n;\n}\n\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nexport function getFieldBytesLength(fieldOrder: bigint): number {\n  if (typeof fieldOrder !== 'bigint') throw new Error('field order must be bigint');\n  const bitLength = fieldOrder.toString(2).length;\n  return Math.ceil(bitLength / 8);\n}\n\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nexport function getMinHashLength(fieldOrder: bigint): number {\n  const length = getFieldBytesLength(fieldOrder);\n  return length + Math.ceil(length / 2);\n}\n\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nexport function mapHashToField(key: Uint8Array, fieldOrder: bigint, isLE = false): Uint8Array {\n  const len = key.length;\n  const fieldLen = getFieldBytesLength(fieldOrder);\n  const minLen = getMinHashLength(fieldOrder);\n  // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n  if (len < 16 || len < minLen || len > 1024)\n    throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);\n  const num = isLE ? bytesToNumberBE(key) : bytesToNumberLE(key);\n  // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n  const reduced = mod(num, fieldOrder - _1n) + _1n;\n  return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Abelian group utilities\nimport { IField, validateField, nLength } from './modular.js';\nimport { validateObject } from './utils.js';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\n\nexport type AffinePoint<T> = {\n  x: T;\n  y: T;\n} & { z?: never; t?: never };\n\nexport interface Group<T extends Group<T>> {\n  double(): T;\n  negate(): T;\n  add(other: T): T;\n  subtract(other: T): T;\n  equals(other: T): boolean;\n  multiply(scalar: bigint): T;\n}\n\nexport type GroupConstructor<T> = {\n  BASE: T;\n  ZERO: T;\n};\nexport type Mapper<T> = (i: T[]) => T[];\n\n// Elliptic curve multiplication of Point by scalar. Fragile.\n// Scalars should always be less than curve order: this should be checked inside of a curve itself.\n// Creates precomputation tables for fast multiplication:\n// - private scalar is split by fixed size windows of W bits\n// - every window point is collected from window's table & added to accumulator\n// - since windows are different, same point inside tables won't be accessed more than once per calc\n// - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n// - +1 window is neccessary for wNAF\n// - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n// TODO: Research returning 2d JS array of windows, instead of a single window. This would allow\n// windows to be in different memory locations\nexport function wNAF<T extends Group<T>>(c: GroupConstructor<T>, bits: number) {\n  const constTimeNegate = (condition: boolean, item: T): T => {\n    const neg = item.negate();\n    return condition ? neg : item;\n  };\n  const opts = (W: number) => {\n    const windows = Math.ceil(bits / W) + 1; // +1, because\n    const windowSize = 2 ** (W - 1); // -1 because we skip zero\n    return { windows, windowSize };\n  };\n  return {\n    constTimeNegate,\n    // non-const time multiplication ladder\n    unsafeLadder(elm: T, n: bigint) {\n      let p = c.ZERO;\n      let d: T = elm;\n      while (n > _0n) {\n        if (n & _1n) p = p.add(d);\n        d = d.double();\n        n >>= _1n;\n      }\n      return p;\n    },\n\n    /**\n     * Creates a wNAF precomputation window. Used for caching.\n     * Default window size is set by `utils.precompute()` and is equal to 8.\n     * Number of precomputed points depends on the curve size:\n     * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n     * - 𝑊 is the window size\n     * - 𝑛 is the bitlength of the curve order.\n     * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n     * @returns precomputed point tables flattened to a single array\n     */\n    precomputeWindow(elm: T, W: number): Group<T>[] {\n      const { windows, windowSize } = opts(W);\n      const points: T[] = [];\n      let p: T = elm;\n      let base = p;\n      for (let window = 0; window < windows; window++) {\n        base = p;\n        points.push(base);\n        // =1, because we skip zero\n        for (let i = 1; i < windowSize; i++) {\n          base = base.add(p);\n          points.push(base);\n        }\n        p = base.double();\n      }\n      return points;\n    },\n\n    /**\n     * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n     * @param W window size\n     * @param precomputes precomputed tables\n     * @param n scalar (we don't check here, but should be less than curve order)\n     * @returns real and fake (for const-time) points\n     */\n    wNAF(W: number, precomputes: T[], n: bigint): { p: T; f: T } {\n      // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\n      // But need to carefully remove other checks before wNAF. ORDER == bits here\n      const { windows, windowSize } = opts(W);\n\n      let p = c.ZERO;\n      let f = c.BASE;\n\n      const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n      const maxNumber = 2 ** W;\n      const shiftBy = BigInt(W);\n\n      for (let window = 0; window < windows; window++) {\n        const offset = window * windowSize;\n        // Extract W bits.\n        let wbits = Number(n & mask);\n\n        // Shift number by W bits.\n        n >>= shiftBy;\n\n        // If the bits are bigger than max size, we'll split those.\n        // +224 => 256 - 32\n        if (wbits > windowSize) {\n          wbits -= maxNumber;\n          n += _1n;\n        }\n\n        // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n        // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n        // there is negate now: it is possible that negated element from low value\n        // would be the same as high element, which will create carry into next window.\n        // It's not obvious how this can fail, but still worth investigating later.\n\n        // Check if we're onto Zero point.\n        // Add random point inside current window to f.\n        const offset1 = offset;\n        const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\n        const cond1 = window % 2 !== 0;\n        const cond2 = wbits < 0;\n        if (wbits === 0) {\n          // The most important part for const-time getPublicKey\n          f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n        } else {\n          p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n        }\n      }\n      // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\n      // Even if the variable is still unused, there are some checks which will\n      // throw an exception, so compiler needs to prove they won't happen, which is hard.\n      // At this point there is a way to F be infinity-point even if p is not,\n      // which makes it less const-time: around 1 bigint multiply.\n      return { p, f };\n    },\n\n    wNAFCached(P: T, precomputesMap: Map<T, T[]>, n: bigint, transform: Mapper<T>): { p: T; f: T } {\n      // @ts-ignore\n      const W: number = P._WINDOW_SIZE || 1;\n      // Calculate precomputes on a first run, reuse them after\n      let comp = precomputesMap.get(P);\n      if (!comp) {\n        comp = this.precomputeWindow(P, W) as T[];\n        if (W !== 1) {\n          precomputesMap.set(P, transform(comp));\n        }\n      }\n      return this.wNAF(W, comp, n);\n    },\n  };\n}\n\n// Generic BasicCurve interface: works even for polynomial fields (BLS): P, n, h would be ok.\n// Though generator can be different (Fp2 / Fp6 for BLS).\nexport type BasicCurve<T> = {\n  Fp: IField<T>; // Field over which we'll do calculations (Fp)\n  n: bigint; // Curve order, total count of valid points in the field\n  nBitLength?: number; // bit length of curve order\n  nByteLength?: number; // byte length of curve order\n  h: bigint; // cofactor. we can assign default=1, but users will just ignore it w/o validation\n  hEff?: bigint; // Number to multiply to clear cofactor\n  Gx: T; // base point X coordinate\n  Gy: T; // base point Y coordinate\n  allowInfinityPoint?: boolean; // bls12-381 requires it. ZERO point is valid, but invalid pubkey\n};\n\nexport function validateBasic<FP, T>(curve: BasicCurve<FP> & T) {\n  validateField(curve.Fp);\n  validateObject(\n    curve,\n    {\n      n: 'bigint',\n      h: 'bigint',\n      Gx: 'field',\n      Gy: 'field',\n    },\n    {\n      nBitLength: 'isSafeInteger',\n      nByteLength: 'isSafeInteger',\n    }\n  );\n  // Set defaults\n  return Object.freeze({\n    ...nLength(curve.n, curve.nBitLength),\n    ...curve,\n    ...{ p: curve.Fp.ORDER },\n  } as const);\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Twisted Edwards curve. The formula is: ax² + y² = 1 + dx²y²\nimport { mod } from './modular.js';\nimport * as ut from './utils.js';\nimport { ensureBytes, FHash, Hex } from './utils.js';\nimport { Group, GroupConstructor, wNAF, BasicCurve, validateBasic, AffinePoint } from './curve.js';\n\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _8n = BigInt(8);\n\n// Edwards curves must declare params a & d.\nexport type CurveType = BasicCurve<bigint> & {\n  a: bigint; // curve param a\n  d: bigint; // curve param d\n  hash: FHash; // Hashing\n  randomBytes: (bytesLength?: number) => Uint8Array; // CSPRNG\n  adjustScalarBytes?: (bytes: Uint8Array) => Uint8Array; // clears bits to get valid field elemtn\n  domain?: (data: Uint8Array, ctx: Uint8Array, phflag: boolean) => Uint8Array; // Used for hashing\n  uvRatio?: (u: bigint, v: bigint) => { isValid: boolean; value: bigint }; // Ratio √(u/v)\n  prehash?: FHash; // RFC 8032 pre-hashing of messages to sign() / verify()\n  mapToCurve?: (scalar: bigint[]) => AffinePoint<bigint>; // for hash-to-curve standard\n};\n\n// verification rule is either zip215 or rfc8032 / nist186-5. Consult fromHex:\nconst VERIFY_DEFAULT = { zip215: true };\n\nfunction validateOpts(curve: CurveType) {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    curve,\n    {\n      hash: 'function',\n      a: 'bigint',\n      d: 'bigint',\n      randomBytes: 'function',\n    },\n    {\n      adjustScalarBytes: 'function',\n      domain: 'function',\n      uvRatio: 'function',\n      mapToCurve: 'function',\n    }\n  );\n  // Set defaults\n  return Object.freeze({ ...opts } as const);\n}\n\n// Instance of Extended Point with coordinates in X, Y, Z, T\nexport interface ExtPointType extends Group<ExtPointType> {\n  readonly ex: bigint;\n  readonly ey: bigint;\n  readonly ez: bigint;\n  readonly et: bigint;\n  get x(): bigint;\n  get y(): bigint;\n  assertValidity(): void;\n  multiply(scalar: bigint): ExtPointType;\n  multiplyUnsafe(scalar: bigint): ExtPointType;\n  isSmallOrder(): boolean;\n  isTorsionFree(): boolean;\n  clearCofactor(): ExtPointType;\n  toAffine(iz?: bigint): AffinePoint<bigint>;\n  toRawBytes(isCompressed?: boolean): Uint8Array;\n  toHex(isCompressed?: boolean): string;\n}\n// Static methods of Extended Point with coordinates in X, Y, Z, T\nexport interface ExtPointConstructor extends GroupConstructor<ExtPointType> {\n  new (x: bigint, y: bigint, z: bigint, t: bigint): ExtPointType;\n  fromAffine(p: AffinePoint<bigint>): ExtPointType;\n  fromHex(hex: Hex): ExtPointType;\n  fromPrivateKey(privateKey: Hex): ExtPointType;\n}\n\nexport type CurveFn = {\n  CURVE: ReturnType<typeof validateOpts>;\n  getPublicKey: (privateKey: Hex) => Uint8Array;\n  sign: (message: Hex, privateKey: Hex, options?: { context?: Hex }) => Uint8Array;\n  verify: (\n    sig: Hex,\n    message: Hex,\n    publicKey: Hex,\n    options?: { context?: Hex; zip215: boolean }\n  ) => boolean;\n  ExtendedPoint: ExtPointConstructor;\n  utils: {\n    randomPrivateKey: () => Uint8Array;\n    getExtendedPublicKey: (key: Hex) => {\n      head: Uint8Array;\n      prefix: Uint8Array;\n      scalar: bigint;\n      point: ExtPointType;\n      pointBytes: Uint8Array;\n    };\n  };\n};\n\n// It is not generic twisted curve for now, but ed25519/ed448 generic implementation\nexport function twistedEdwards(curveDef: CurveType): CurveFn {\n  const CURVE = validateOpts(curveDef) as ReturnType<typeof validateOpts>;\n  const {\n    Fp,\n    n: CURVE_ORDER,\n    prehash: prehash,\n    hash: cHash,\n    randomBytes,\n    nByteLength,\n    h: cofactor,\n  } = CURVE;\n  const MASK = _2n << (BigInt(nByteLength * 8) - _1n);\n  const modP = Fp.create; // Function overrides\n\n  // sqrt(u/v)\n  const uvRatio =\n    CURVE.uvRatio ||\n    ((u: bigint, v: bigint) => {\n      try {\n        return { isValid: true, value: Fp.sqrt(u * Fp.inv(v)) };\n      } catch (e) {\n        return { isValid: false, value: _0n };\n      }\n    });\n  const adjustScalarBytes = CURVE.adjustScalarBytes || ((bytes: Uint8Array) => bytes); // NOOP\n  const domain =\n    CURVE.domain ||\n    ((data: Uint8Array, ctx: Uint8Array, phflag: boolean) => {\n      if (ctx.length || phflag) throw new Error('Contexts/pre-hash are not supported');\n      return data;\n    }); // NOOP\n  const inBig = (n: bigint) => typeof n === 'bigint' && _0n < n; // n in [1..]\n  const inRange = (n: bigint, max: bigint) => inBig(n) && inBig(max) && n < max; // n in [1..max-1]\n  const in0MaskRange = (n: bigint) => n === _0n || inRange(n, MASK); // n in [0..MASK-1]\n  function assertInRange(n: bigint, max: bigint) {\n    // n in [1..max-1]\n    if (inRange(n, max)) return n;\n    throw new Error(`Expected valid scalar < ${max}, got ${typeof n} ${n}`);\n  }\n  function assertGE0(n: bigint) {\n    // n in [0..CURVE_ORDER-1]\n    return n === _0n ? n : assertInRange(n, CURVE_ORDER); // GE = prime subgroup, not full group\n  }\n  const pointPrecomputes = new Map<Point, Point[]>();\n  function isPoint(other: unknown) {\n    if (!(other instanceof Point)) throw new Error('ExtendedPoint expected');\n  }\n  // Extended Point works in extended coordinates: (x, y, z, t) ∋ (x=x/z, y=y/z, t=xy).\n  // https://en.wikipedia.org/wiki/Twisted_Edwards_curve#Extended_coordinates\n  class Point implements ExtPointType {\n    static readonly BASE = new Point(CURVE.Gx, CURVE.Gy, _1n, modP(CURVE.Gx * CURVE.Gy));\n    static readonly ZERO = new Point(_0n, _1n, _1n, _0n); // 0, 1, 1, 0\n\n    constructor(\n      readonly ex: bigint,\n      readonly ey: bigint,\n      readonly ez: bigint,\n      readonly et: bigint\n    ) {\n      if (!in0MaskRange(ex)) throw new Error('x required');\n      if (!in0MaskRange(ey)) throw new Error('y required');\n      if (!in0MaskRange(ez)) throw new Error('z required');\n      if (!in0MaskRange(et)) throw new Error('t required');\n    }\n\n    get x(): bigint {\n      return this.toAffine().x;\n    }\n    get y(): bigint {\n      return this.toAffine().y;\n    }\n\n    static fromAffine(p: AffinePoint<bigint>): Point {\n      if (p instanceof Point) throw new Error('extended point not allowed');\n      const { x, y } = p || {};\n      if (!in0MaskRange(x) || !in0MaskRange(y)) throw new Error('invalid affine point');\n      return new Point(x, y, _1n, modP(x * y));\n    }\n    static normalizeZ(points: Point[]): Point[] {\n      const toInv = Fp.invertBatch(points.map((p) => p.ez));\n      return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n    }\n\n    // We calculate precomputes for elliptic curve point multiplication\n    // using windowed method. This specifies window size and\n    // stores precomputed values. Usually only base point would be precomputed.\n    _WINDOW_SIZE?: number;\n\n    // \"Private method\", don't use it directly\n    _setWindowSize(windowSize: number) {\n      this._WINDOW_SIZE = windowSize;\n      pointPrecomputes.delete(this);\n    }\n    // Not required for fromHex(), which always creates valid points.\n    // Could be useful for fromAffine().\n    assertValidity(): void {\n      const { a, d } = CURVE;\n      if (this.is0()) throw new Error('bad point: ZERO'); // TODO: optimize, with vars below?\n      // Equation in affine coordinates: ax² + y² = 1 + dx²y²\n      // Equation in projective coordinates (X/Z, Y/Z, Z):  (aX² + Y²)Z² = Z⁴ + dX²Y²\n      const { ex: X, ey: Y, ez: Z, et: T } = this;\n      const X2 = modP(X * X); // X²\n      const Y2 = modP(Y * Y); // Y²\n      const Z2 = modP(Z * Z); // Z²\n      const Z4 = modP(Z2 * Z2); // Z⁴\n      const aX2 = modP(X2 * a); // aX²\n      const left = modP(Z2 * modP(aX2 + Y2)); // (aX² + Y²)Z²\n      const right = modP(Z4 + modP(d * modP(X2 * Y2))); // Z⁴ + dX²Y²\n      if (left !== right) throw new Error('bad point: equation left != right (1)');\n      // In Extended coordinates we also have T, which is x*y=T/Z: check X*Y == Z*T\n      const XY = modP(X * Y);\n      const ZT = modP(Z * T);\n      if (XY !== ZT) throw new Error('bad point: equation left != right (2)');\n    }\n\n    // Compare one point to another.\n    equals(other: Point): boolean {\n      isPoint(other);\n      const { ex: X1, ey: Y1, ez: Z1 } = this;\n      const { ex: X2, ey: Y2, ez: Z2 } = other;\n      const X1Z2 = modP(X1 * Z2);\n      const X2Z1 = modP(X2 * Z1);\n      const Y1Z2 = modP(Y1 * Z2);\n      const Y2Z1 = modP(Y2 * Z1);\n      return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n    }\n\n    protected is0(): boolean {\n      return this.equals(Point.ZERO);\n    }\n\n    negate(): Point {\n      // Flips point sign to a negative one (-x, y in affine coords)\n      return new Point(modP(-this.ex), this.ey, this.ez, modP(-this.et));\n    }\n\n    // Fast algo for doubling Extended Point.\n    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#doubling-dbl-2008-hwcd\n    // Cost: 4M + 4S + 1*a + 6add + 1*2.\n    double(): Point {\n      const { a } = CURVE;\n      const { ex: X1, ey: Y1, ez: Z1 } = this;\n      const A = modP(X1 * X1); // A = X12\n      const B = modP(Y1 * Y1); // B = Y12\n      const C = modP(_2n * modP(Z1 * Z1)); // C = 2*Z12\n      const D = modP(a * A); // D = a*A\n      const x1y1 = X1 + Y1;\n      const E = modP(modP(x1y1 * x1y1) - A - B); // E = (X1+Y1)2-A-B\n      const G = D + B; // G = D+B\n      const F = G - C; // F = G-C\n      const H = D - B; // H = D-B\n      const X3 = modP(E * F); // X3 = E*F\n      const Y3 = modP(G * H); // Y3 = G*H\n      const T3 = modP(E * H); // T3 = E*H\n      const Z3 = modP(F * G); // Z3 = F*G\n      return new Point(X3, Y3, Z3, T3);\n    }\n\n    // Fast algo for adding 2 Extended Points.\n    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#addition-add-2008-hwcd\n    // Cost: 9M + 1*a + 1*d + 7add.\n    add(other: Point) {\n      isPoint(other);\n      const { a, d } = CURVE;\n      const { ex: X1, ey: Y1, ez: Z1, et: T1 } = this;\n      const { ex: X2, ey: Y2, ez: Z2, et: T2 } = other;\n      // Faster algo for adding 2 Extended Points when curve's a=-1.\n      // http://hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html#addition-add-2008-hwcd-4\n      // Cost: 8M + 8add + 2*2.\n      // Note: It does not check whether the `other` point is valid.\n      if (a === BigInt(-1)) {\n        const A = modP((Y1 - X1) * (Y2 + X2));\n        const B = modP((Y1 + X1) * (Y2 - X2));\n        const F = modP(B - A);\n        if (F === _0n) return this.double(); // Same point. Tests say it doesn't affect timing\n        const C = modP(Z1 * _2n * T2);\n        const D = modP(T1 * _2n * Z2);\n        const E = D + C;\n        const G = B + A;\n        const H = D - C;\n        const X3 = modP(E * F);\n        const Y3 = modP(G * H);\n        const T3 = modP(E * H);\n        const Z3 = modP(F * G);\n        return new Point(X3, Y3, Z3, T3);\n      }\n      const A = modP(X1 * X2); // A = X1*X2\n      const B = modP(Y1 * Y2); // B = Y1*Y2\n      const C = modP(T1 * d * T2); // C = T1*d*T2\n      const D = modP(Z1 * Z2); // D = Z1*Z2\n      const E = modP((X1 + Y1) * (X2 + Y2) - A - B); // E = (X1+Y1)*(X2+Y2)-A-B\n      const F = D - C; // F = D-C\n      const G = D + C; // G = D+C\n      const H = modP(B - a * A); // H = B-a*A\n      const X3 = modP(E * F); // X3 = E*F\n      const Y3 = modP(G * H); // Y3 = G*H\n      const T3 = modP(E * H); // T3 = E*H\n      const Z3 = modP(F * G); // Z3 = F*G\n\n      return new Point(X3, Y3, Z3, T3);\n    }\n\n    subtract(other: Point): Point {\n      return this.add(other.negate());\n    }\n\n    private wNAF(n: bigint): { p: Point; f: Point } {\n      return wnaf.wNAFCached(this, pointPrecomputes, n, Point.normalizeZ);\n    }\n\n    // Constant-time multiplication.\n    multiply(scalar: bigint): Point {\n      const { p, f } = this.wNAF(assertInRange(scalar, CURVE_ORDER));\n      return Point.normalizeZ([p, f])[0];\n    }\n\n    // Non-constant-time multiplication. Uses double-and-add algorithm.\n    // It's faster, but should only be used when you don't care about\n    // an exposed private key e.g. sig verification.\n    // Does NOT allow scalars higher than CURVE.n.\n    multiplyUnsafe(scalar: bigint): Point {\n      let n = assertGE0(scalar); // 0 <= scalar < CURVE.n\n      if (n === _0n) return I;\n      if (this.equals(I) || n === _1n) return this;\n      if (this.equals(G)) return this.wNAF(n).p;\n      return wnaf.unsafeLadder(this, n);\n    }\n\n    // Checks if point is of small order.\n    // If you add something to small order point, you will have \"dirty\"\n    // point with torsion component.\n    // Multiplies point by cofactor and checks if the result is 0.\n    isSmallOrder(): boolean {\n      return this.multiplyUnsafe(cofactor).is0();\n    }\n\n    // Multiplies point by curve order and checks if the result is 0.\n    // Returns `false` is the point is dirty.\n    isTorsionFree(): boolean {\n      return wnaf.unsafeLadder(this, CURVE_ORDER).is0();\n    }\n\n    // Converts Extended point to default (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    toAffine(iz?: bigint): AffinePoint<bigint> {\n      const { ex: x, ey: y, ez: z } = this;\n      const is0 = this.is0();\n      if (iz == null) iz = is0 ? _8n : (Fp.inv(z) as bigint); // 8 was chosen arbitrarily\n      const ax = modP(x * iz);\n      const ay = modP(y * iz);\n      const zz = modP(z * iz);\n      if (is0) return { x: _0n, y: _1n };\n      if (zz !== _1n) throw new Error('invZ was invalid');\n      return { x: ax, y: ay };\n    }\n\n    clearCofactor(): Point {\n      const { h: cofactor } = CURVE;\n      if (cofactor === _1n) return this;\n      return this.multiplyUnsafe(cofactor);\n    }\n\n    // Converts hash string or Uint8Array to Point.\n    // Uses algo from RFC8032 5.1.3.\n    static fromHex(hex: Hex, zip215 = false): Point {\n      const { d, a } = CURVE;\n      const len = Fp.BYTES;\n      hex = ensureBytes('pointHex', hex, len); // copy hex to a new array\n      const normed = hex.slice(); // copy again, we'll manipulate it\n      const lastByte = hex[len - 1]; // select last byte\n      normed[len - 1] = lastByte & ~0x80; // clear last bit\n      const y = ut.bytesToNumberLE(normed);\n      if (y === _0n) {\n        // y=0 is allowed\n      } else {\n        // RFC8032 prohibits >= p, but ZIP215 doesn't\n        if (zip215) assertInRange(y, MASK); // zip215=true [1..P-1] (2^255-19-1 for ed25519)\n        else assertInRange(y, Fp.ORDER); // zip215=false [1..MASK-1] (2^256-1 for ed25519)\n      }\n\n      // Ed25519: x² = (y²-1)/(dy²+1) mod p. Ed448: x² = (y²-1)/(dy²-1) mod p. Generic case:\n      // ax²+y²=1+dx²y² => y²-1=dx²y²-ax² => y²-1=x²(dy²-a) => x²=(y²-1)/(dy²-a)\n      const y2 = modP(y * y); // denominator is always non-0 mod p.\n      const u = modP(y2 - _1n); // u = y² - 1\n      const v = modP(d * y2 - a); // v = d y² + 1.\n      let { isValid, value: x } = uvRatio(u, v); // √(u/v)\n      if (!isValid) throw new Error('Point.fromHex: invalid y coordinate');\n      const isXOdd = (x & _1n) === _1n; // There are 2 square roots. Use x_0 bit to select proper\n      const isLastByteOdd = (lastByte & 0x80) !== 0; // x_0, last bit\n      if (!zip215 && x === _0n && isLastByteOdd)\n        // if x=0 and x_0 = 1, fail\n        throw new Error('Point.fromHex: x=0 and x_0=1');\n      if (isLastByteOdd !== isXOdd) x = modP(-x); // if x_0 != x mod 2, set x = p-x\n      return Point.fromAffine({ x, y });\n    }\n    static fromPrivateKey(privKey: Hex) {\n      return getExtendedPublicKey(privKey).point;\n    }\n    toRawBytes(): Uint8Array {\n      const { x, y } = this.toAffine();\n      const bytes = ut.numberToBytesLE(y, Fp.BYTES); // each y has 2 x values (x, -y)\n      bytes[bytes.length - 1] |= x & _1n ? 0x80 : 0; // when compressing, it's enough to store y\n      return bytes; // and use the last byte to encode sign of x\n    }\n    toHex(): string {\n      return ut.bytesToHex(this.toRawBytes()); // Same as toRawBytes, but returns string.\n    }\n  }\n  const { BASE: G, ZERO: I } = Point;\n  const wnaf = wNAF(Point, nByteLength * 8);\n\n  function modN(a: bigint) {\n    return mod(a, CURVE_ORDER);\n  }\n  // Little-endian SHA512 with modulo n\n  function modN_LE(hash: Uint8Array): bigint {\n    return modN(ut.bytesToNumberLE(hash));\n  }\n\n  /** Convenience method that creates public key and other stuff. RFC8032 5.1.5 */\n  function getExtendedPublicKey(key: Hex) {\n    const len = nByteLength;\n    key = ensureBytes('private key', key, len);\n    // Hash private key with curve's hash function to produce uniformingly random input\n    // Check byte lengths: ensure(64, h(ensure(32, key)))\n    const hashed = ensureBytes('hashed private key', cHash(key), 2 * len);\n    const head = adjustScalarBytes(hashed.slice(0, len)); // clear first half bits, produce FE\n    const prefix = hashed.slice(len, 2 * len); // second half is called key prefix (5.1.6)\n    const scalar = modN_LE(head); // The actual private scalar\n    const point = G.multiply(scalar); // Point on Edwards curve aka public key\n    const pointBytes = point.toRawBytes(); // Uint8Array representation\n    return { head, prefix, scalar, point, pointBytes };\n  }\n\n  // Calculates EdDSA pub key. RFC8032 5.1.5. Privkey is hashed. Use first half with 3 bits cleared\n  function getPublicKey(privKey: Hex): Uint8Array {\n    return getExtendedPublicKey(privKey).pointBytes;\n  }\n\n  // int('LE', SHA512(dom2(F, C) || msgs)) mod N\n  function hashDomainToScalar(context: Hex = new Uint8Array(), ...msgs: Uint8Array[]) {\n    const msg = ut.concatBytes(...msgs);\n    return modN_LE(cHash(domain(msg, ensureBytes('context', context), !!prehash)));\n  }\n\n  /** Signs message with privateKey. RFC8032 5.1.6 */\n  function sign(msg: Hex, privKey: Hex, options: { context?: Hex } = {}): Uint8Array {\n    msg = ensureBytes('message', msg);\n    if (prehash) msg = prehash(msg); // for ed25519ph etc.\n    const { prefix, scalar, pointBytes } = getExtendedPublicKey(privKey);\n    const r = hashDomainToScalar(options.context, prefix, msg); // r = dom2(F, C) || prefix || PH(M)\n    const R = G.multiply(r).toRawBytes(); // R = rG\n    const k = hashDomainToScalar(options.context, R, pointBytes, msg); // R || A || PH(M)\n    const s = modN(r + k * scalar); // S = (r + k * s) mod L\n    assertGE0(s); // 0 <= s < l\n    const res = ut.concatBytes(R, ut.numberToBytesLE(s, Fp.BYTES));\n    return ensureBytes('result', res, nByteLength * 2); // 64-byte signature\n  }\n\n  const verifyOpts: { context?: Hex; zip215?: boolean } = VERIFY_DEFAULT;\n  function verify(sig: Hex, msg: Hex, publicKey: Hex, options = verifyOpts): boolean {\n    const { context, zip215 } = options;\n    const len = Fp.BYTES; // Verifies EdDSA signature against message and public key. RFC8032 5.1.7.\n    sig = ensureBytes('signature', sig, 2 * len); // An extended group equation is checked.\n    msg = ensureBytes('message', msg);\n    if (prehash) msg = prehash(msg); // for ed25519ph, etc\n\n    const s = ut.bytesToNumberLE(sig.slice(len, 2 * len));\n    // zip215: true is good for consensus-critical apps and allows points < 2^256\n    // zip215: false follows RFC8032 / NIST186-5 and restricts points to CURVE.p\n    let A, R, SB;\n    try {\n      A = Point.fromHex(publicKey, zip215);\n      R = Point.fromHex(sig.slice(0, len), zip215);\n      SB = G.multiplyUnsafe(s); // 0 <= s < l is done inside\n    } catch (error) {\n      return false;\n    }\n    if (!zip215 && A.isSmallOrder()) return false;\n\n    const k = hashDomainToScalar(context, R.toRawBytes(), A.toRawBytes(), msg);\n    const RkA = R.add(A.multiplyUnsafe(k));\n    // [8][S]B = [8]R + [8][k]A'\n    return RkA.subtract(SB).clearCofactor().equals(Point.ZERO);\n  }\n\n  G._setWindowSize(8); // Enable precomputes. Slows down first publicKey computation by 20ms.\n\n  const utils = {\n    getExtendedPublicKey,\n    // ed25519 private keys are uniform 32b. No need to check for modulo bias, like in secp256k1.\n    randomPrivateKey: (): Uint8Array => randomBytes(Fp.BYTES),\n\n    /**\n     * We're doing scalar multiplication (used in getPublicKey etc) with precomputed BASE_POINT\n     * values. This slows down first getPublicKey() by milliseconds (see Speed section),\n     * but allows to speed-up subsequent getPublicKey() calls up to 20x.\n     * @param windowSize 2, 4, 8, 16\n     */\n    precompute(windowSize = 8, point = Point.BASE): typeof Point.BASE {\n      point._setWindowSize(windowSize);\n      point.multiply(BigInt(3));\n      return point;\n    },\n  };\n\n  return {\n    CURVE,\n    getPublicKey,\n    sign,\n    verify,\n    ExtendedPoint: Point,\n    utils,\n  };\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha512 } from '@noble/hashes/sha512';\nimport { concatBytes, randomBytes, utf8ToBytes } from '@noble/hashes/utils';\nimport { ExtPointType, twistedEdwards } from './abstract/edwards.js';\nimport { montgomery } from './abstract/montgomery.js';\nimport { Field, FpSqrtEven, isNegativeLE, mod, pow2 } from './abstract/modular.js';\nimport {\n  bytesToHex,\n  bytesToNumberLE,\n  ensureBytes,\n  equalBytes,\n  Hex,\n  numberToBytesLE,\n} from './abstract/utils.js';\nimport { createHasher, htfBasicOpts, expand_message_xmd } from './abstract/hash-to-curve.js';\nimport { AffinePoint } from './abstract/curve.js';\n\n/**\n * ed25519 Twisted Edwards curve with following addons:\n * - X25519 ECDH\n * - Ristretto cofactor elimination\n * - Elligator hash-to-group / point indistinguishability\n */\n\nconst ED25519_P = BigInt(\n  '57896044618658097711785492504343953926634992332820282019728792003956564819949'\n);\n// √(-1) aka √(a) aka 2^((p-1)/4)\nconst ED25519_SQRT_M1 = BigInt(\n  '19681161376707505956807079304988542015446066515923890162744021073123829784752'\n);\n\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _5n = BigInt(5);\n// prettier-ignore\nconst _10n = BigInt(10), _20n = BigInt(20), _40n = BigInt(40), _80n = BigInt(80);\n\nfunction ed25519_pow_2_252_3(x: bigint) {\n  const P = ED25519_P;\n  const x2 = (x * x) % P;\n  const b2 = (x2 * x) % P; // x^3, 11\n  const b4 = (pow2(b2, _2n, P) * b2) % P; // x^15, 1111\n  const b5 = (pow2(b4, _1n, P) * x) % P; // x^31\n  const b10 = (pow2(b5, _5n, P) * b5) % P;\n  const b20 = (pow2(b10, _10n, P) * b10) % P;\n  const b40 = (pow2(b20, _20n, P) * b20) % P;\n  const b80 = (pow2(b40, _40n, P) * b40) % P;\n  const b160 = (pow2(b80, _80n, P) * b80) % P;\n  const b240 = (pow2(b160, _80n, P) * b80) % P;\n  const b250 = (pow2(b240, _10n, P) * b10) % P;\n  const pow_p_5_8 = (pow2(b250, _2n, P) * x) % P;\n  // ^ To pow to (p+3)/8, multiply it by x.\n  return { pow_p_5_8, b2 };\n}\n\nfunction adjustScalarBytes(bytes: Uint8Array): Uint8Array {\n  // Section 5: For X25519, in order to decode 32 random bytes as an integer scalar,\n  // set the three least significant bits of the first byte\n  bytes[0] &= 248; // 0b1111_1000\n  // and the most significant bit of the last to zero,\n  bytes[31] &= 127; // 0b0111_1111\n  // set the second most significant bit of the last byte to 1\n  bytes[31] |= 64; // 0b0100_0000\n  return bytes;\n}\n\n// sqrt(u/v)\nfunction uvRatio(u: bigint, v: bigint): { isValid: boolean; value: bigint } {\n  const P = ED25519_P;\n  const v3 = mod(v * v * v, P); // v³\n  const v7 = mod(v3 * v3 * v, P); // v⁷\n  // (p+3)/8 and (p-5)/8\n  const pow = ed25519_pow_2_252_3(u * v7).pow_p_5_8;\n  let x = mod(u * v3 * pow, P); // (uv³)(uv⁷)^(p-5)/8\n  const vx2 = mod(v * x * x, P); // vx²\n  const root1 = x; // First root candidate\n  const root2 = mod(x * ED25519_SQRT_M1, P); // Second root candidate\n  const useRoot1 = vx2 === u; // If vx² = u (mod p), x is a square root\n  const useRoot2 = vx2 === mod(-u, P); // If vx² = -u, set x <-- x * 2^((p-1)/4)\n  const noRoot = vx2 === mod(-u * ED25519_SQRT_M1, P); // There is no valid root, vx² = -u√(-1)\n  if (useRoot1) x = root1;\n  if (useRoot2 || noRoot) x = root2; // We return root2 anyway, for const-time\n  if (isNegativeLE(x, P)) x = mod(-x, P);\n  return { isValid: useRoot1 || useRoot2, value: x };\n}\n\n// Just in case\nexport const ED25519_TORSION_SUBGROUP = [\n  '0100000000000000000000000000000000000000000000000000000000000000',\n  'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a',\n  '0000000000000000000000000000000000000000000000000000000000000080',\n  '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05',\n  'ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f',\n  '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85',\n  '0000000000000000000000000000000000000000000000000000000000000000',\n  'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa',\n];\n\nconst Fp = Field(ED25519_P, undefined, true);\n\nconst ed25519Defaults = {\n  // Param: a\n  a: BigInt(-1), // Fp.create(-1) is proper; our way still works and is faster\n  // d is equal to -121665/121666 over finite field.\n  // Negative number is P - number, and division is invert(number, P)\n  d: BigInt('37095705934669439343138083508754565189542113879843219016388785533085940283555'),\n  // Finite field 𝔽p over which we'll do calculations; 2n**255n - 19n\n  Fp,\n  // Subgroup order: how many points curve has\n  // 2n**252n + 27742317777372353535851937790883648493n;\n  n: BigInt('7237005577332262213973186563042994240857116359379907606001950938285454250989'),\n  // Cofactor\n  h: BigInt(8),\n  // Base point (x, y) aka generator point\n  Gx: BigInt('15112221349535400772501151409588531511454012693041857206046113283949847762202'),\n  Gy: BigInt('46316835694926478169428394003475163141307993866256225615783033603165251855960'),\n  hash: sha512,\n  randomBytes,\n  adjustScalarBytes,\n  // dom2\n  // Ratio of u to v. Allows us to combine inversion and square root. Uses algo from RFC8032 5.1.3.\n  // Constant-time, u/√v\n  uvRatio,\n} as const;\n\nexport const ed25519 = /* @__PURE__ */ twistedEdwards(ed25519Defaults);\n\nfunction ed25519_domain(data: Uint8Array, ctx: Uint8Array, phflag: boolean) {\n  if (ctx.length > 255) throw new Error('Context is too big');\n  return concatBytes(\n    utf8ToBytes('SigEd25519 no Ed25519 collisions'),\n    new Uint8Array([phflag ? 1 : 0, ctx.length]),\n    ctx,\n    data\n  );\n}\n\nexport const ed25519ctx = /* @__PURE__ */ twistedEdwards({\n  ...ed25519Defaults,\n  domain: ed25519_domain,\n});\nexport const ed25519ph = /* @__PURE__ */ twistedEdwards({\n  ...ed25519Defaults,\n  domain: ed25519_domain,\n  prehash: sha512,\n});\n\nexport const x25519 = /* @__PURE__ */ (() =>\n  montgomery({\n    P: ED25519_P,\n    a: BigInt(486662),\n    montgomeryBits: 255, // n is 253 bits\n    nByteLength: 32,\n    Gu: BigInt(9),\n    powPminus2: (x: bigint): bigint => {\n      const P = ED25519_P;\n      // x^(p-2) aka x^(2^255-21)\n      const { pow_p_5_8, b2 } = ed25519_pow_2_252_3(x);\n      return mod(pow2(pow_p_5_8, BigInt(3), P) * b2, P);\n    },\n    adjustScalarBytes,\n    randomBytes,\n  }))();\n\n/**\n * Converts ed25519 public key to x25519 public key. Uses formula:\n * * `(u, v) = ((1+y)/(1-y), sqrt(-486664)*u/x)`\n * * `(x, y) = (sqrt(-486664)*u/v, (u-1)/(u+1))`\n * @example\n *   const someonesPub = ed25519.getPublicKey(ed25519.utils.randomPrivateKey());\n *   const aPriv = x25519.utils.randomPrivateKey();\n *   x25519.getSharedSecret(aPriv, edwardsToMontgomeryPub(someonesPub))\n */\nexport function edwardsToMontgomeryPub(edwardsPub: Hex): Uint8Array {\n  const { y } = ed25519.ExtendedPoint.fromHex(edwardsPub);\n  const _1n = BigInt(1);\n  return Fp.toBytes(Fp.create((_1n + y) * Fp.inv(_1n - y)));\n}\nexport const edwardsToMontgomery = edwardsToMontgomeryPub; // deprecated\n\n/**\n * Converts ed25519 secret key to x25519 secret key.\n * @example\n *   const someonesPub = x25519.getPublicKey(x25519.utils.randomPrivateKey());\n *   const aPriv = ed25519.utils.randomPrivateKey();\n *   x25519.getSharedSecret(edwardsToMontgomeryPriv(aPriv), someonesPub)\n */\nexport function edwardsToMontgomeryPriv(edwardsPriv: Uint8Array): Uint8Array {\n  const hashed = ed25519Defaults.hash(edwardsPriv.subarray(0, 32));\n  return ed25519Defaults.adjustScalarBytes(hashed).subarray(0, 32);\n}\n\n// Hash To Curve Elligator2 Map (NOTE: different from ristretto255 elligator)\n// NOTE: very important part is usage of FpSqrtEven for ELL2_C1_EDWARDS, since\n// SageMath returns different root first and everything falls apart\n\nconst ELL2_C1 = (Fp.ORDER + BigInt(3)) / BigInt(8); // 1. c1 = (q + 3) / 8       # Integer arithmetic\n\nconst ELL2_C2 = Fp.pow(_2n, ELL2_C1); // 2. c2 = 2^c1\nconst ELL2_C3 = Fp.sqrt(Fp.neg(Fp.ONE)); // 3. c3 = sqrt(-1)\nconst ELL2_C4 = (Fp.ORDER - BigInt(5)) / BigInt(8); // 4. c4 = (q - 5) / 8       # Integer arithmetic\nconst ELL2_J = BigInt(486662);\n\n// prettier-ignore\nfunction map_to_curve_elligator2_curve25519(u: bigint) {\n  let tv1 = Fp.sqr(u);       //  1.  tv1 = u^2\n  tv1 = Fp.mul(tv1, _2n);       //  2.  tv1 = 2 * tv1\n  let xd = Fp.add(tv1, Fp.ONE); //  3.   xd = tv1 + 1         # Nonzero: -1 is square (mod p), tv1 is not\n  let x1n = Fp.neg(ELL2_J);  //  4.  x1n = -J              # x1 = x1n / xd = -J / (1 + 2 * u^2)\n  let tv2 = Fp.sqr(xd);      //  5.  tv2 = xd^2\n  let gxd = Fp.mul(tv2, xd);    //  6.  gxd = tv2 * xd        # gxd = xd^3\n  let gx1 = Fp.mul(tv1, ELL2_J); //  7.  gx1 = J * tv1         # x1n + J * xd\n  gx1 = Fp.mul(gx1, x1n);       //  8.  gx1 = gx1 * x1n       # x1n^2 + J * x1n * xd\n  gx1 = Fp.add(gx1, tv2);       //  9.  gx1 = gx1 + tv2       # x1n^2 + J * x1n * xd + xd^2\n  gx1 = Fp.mul(gx1, x1n);       //  10. gx1 = gx1 * x1n       # x1n^3 + J * x1n^2 * xd + x1n * xd^2\n  let tv3 = Fp.sqr(gxd);     //  11. tv3 = gxd^2\n  tv2 = Fp.sqr(tv3);         //  12. tv2 = tv3^2           # gxd^4\n  tv3 = Fp.mul(tv3, gxd);       //  13. tv3 = tv3 * gxd       # gxd^3\n  tv3 = Fp.mul(tv3, gx1);       //  14. tv3 = tv3 * gx1       # gx1 * gxd^3\n  tv2 = Fp.mul(tv2, tv3);       //  15. tv2 = tv2 * tv3       # gx1 * gxd^7\n  let y11 = Fp.pow(tv2, ELL2_C4); //  16. y11 = tv2^c4        # (gx1 * gxd^7)^((p - 5) / 8)\n  y11 = Fp.mul(y11, tv3);       //  17. y11 = y11 * tv3       # gx1*gxd^3*(gx1*gxd^7)^((p-5)/8)\n  let y12 = Fp.mul(y11, ELL2_C3); //  18. y12 = y11 * c3\n  tv2 = Fp.sqr(y11);         //  19. tv2 = y11^2\n  tv2 = Fp.mul(tv2, gxd);       //  20. tv2 = tv2 * gxd\n  let e1 = Fp.eql(tv2, gx1); //  21.  e1 = tv2 == gx1\n  let y1 = Fp.cmov(y12, y11, e1); //  22.  y1 = CMOV(y12, y11, e1)  # If g(x1) is square, this is its sqrt\n  let x2n = Fp.mul(x1n, tv1);   //  23. x2n = x1n * tv1       # x2 = x2n / xd = 2 * u^2 * x1n / xd\n  let y21 = Fp.mul(y11, u);     //  24. y21 = y11 * u\n  y21 = Fp.mul(y21, ELL2_C2);   //  25. y21 = y21 * c2\n  let y22 = Fp.mul(y21, ELL2_C3); //  26. y22 = y21 * c3\n  let gx2 = Fp.mul(gx1, tv1);   //  27. gx2 = gx1 * tv1       # g(x2) = gx2 / gxd = 2 * u^2 * g(x1)\n  tv2 = Fp.sqr(y21);         //  28. tv2 = y21^2\n  tv2 = Fp.mul(tv2, gxd);       //  29. tv2 = tv2 * gxd\n  let e2 = Fp.eql(tv2, gx2); //  30.  e2 = tv2 == gx2\n  let y2 = Fp.cmov(y22, y21, e2); //  31.  y2 = CMOV(y22, y21, e2)  # If g(x2) is square, this is its sqrt\n  tv2 = Fp.sqr(y1);          //  32. tv2 = y1^2\n  tv2 = Fp.mul(tv2, gxd);       //  33. tv2 = tv2 * gxd\n  let e3 = Fp.eql(tv2, gx1); //  34.  e3 = tv2 == gx1\n  let xn = Fp.cmov(x2n, x1n, e3); //  35.  xn = CMOV(x2n, x1n, e3)  # If e3, x = x1, else x = x2\n  let y = Fp.cmov(y2, y1, e3);  //  36.   y = CMOV(y2, y1, e3)    # If e3, y = y1, else y = y2\n  let e4 = Fp.isOdd(y);         //  37.  e4 = sgn0(y) == 1        # Fix sign of y\n  y = Fp.cmov(y, Fp.neg(y), e3 !== e4); //  38.   y = CMOV(y, -y, e3 XOR e4)\n  return { xMn: xn, xMd: xd, yMn: y, yMd: _1n }; //  39. return (xn, xd, y, 1)\n}\n\nconst ELL2_C1_EDWARDS = FpSqrtEven(Fp, Fp.neg(BigInt(486664))); // sgn0(c1) MUST equal 0\nfunction map_to_curve_elligator2_edwards25519(u: bigint) {\n  const { xMn, xMd, yMn, yMd } = map_to_curve_elligator2_curve25519(u); //  1.  (xMn, xMd, yMn, yMd) =\n  // map_to_curve_elligator2_curve25519(u)\n  let xn = Fp.mul(xMn, yMd); //  2.  xn = xMn * yMd\n  xn = Fp.mul(xn, ELL2_C1_EDWARDS); //  3.  xn = xn * c1\n  let xd = Fp.mul(xMd, yMn); //  4.  xd = xMd * yMn    # xn / xd = c1 * xM / yM\n  let yn = Fp.sub(xMn, xMd); //  5.  yn = xMn - xMd\n  let yd = Fp.add(xMn, xMd); //  6.  yd = xMn + xMd    # (n / d - 1) / (n / d + 1) = (n - d) / (n + d)\n  let tv1 = Fp.mul(xd, yd); //  7. tv1 = xd * yd\n  let e = Fp.eql(tv1, Fp.ZERO); //  8.   e = tv1 == 0\n  xn = Fp.cmov(xn, Fp.ZERO, e); //  9.  xn = CMOV(xn, 0, e)\n  xd = Fp.cmov(xd, Fp.ONE, e); //  10. xd = CMOV(xd, 1, e)\n  yn = Fp.cmov(yn, Fp.ONE, e); //  11. yn = CMOV(yn, 1, e)\n  yd = Fp.cmov(yd, Fp.ONE, e); //  12. yd = CMOV(yd, 1, e)\n\n  const inv = Fp.invertBatch([xd, yd]); // batch division\n  return { x: Fp.mul(xn, inv[0]), y: Fp.mul(yn, inv[1]) }; //  13. return (xn, xd, yn, yd)\n}\n\nconst htf = /* @__PURE__ */ (() =>\n  createHasher(\n    ed25519.ExtendedPoint,\n    (scalars: bigint[]) => map_to_curve_elligator2_edwards25519(scalars[0]),\n    {\n      DST: 'edwards25519_XMD:SHA-512_ELL2_RO_',\n      encodeDST: 'edwards25519_XMD:SHA-512_ELL2_NU_',\n      p: Fp.ORDER,\n      m: 1,\n      k: 128,\n      expand: 'xmd',\n      hash: sha512,\n    }\n  ))();\nexport const hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\n\nfunction assertRstPoint(other: unknown) {\n  if (!(other instanceof RistPoint)) throw new Error('RistrettoPoint expected');\n}\n\n// √(-1) aka √(a) aka 2^((p-1)/4)\nconst SQRT_M1 = ED25519_SQRT_M1;\n// √(ad - 1)\nconst SQRT_AD_MINUS_ONE = BigInt(\n  '25063068953384623474111414158702152701244531502492656460079210482610430750235'\n);\n// 1 / √(a-d)\nconst INVSQRT_A_MINUS_D = BigInt(\n  '54469307008909316920995813868745141605393597292927456921205312896311721017578'\n);\n// 1-d²\nconst ONE_MINUS_D_SQ = BigInt(\n  '1159843021668779879193775521855586647937357759715417654439879720876111806838'\n);\n// (d-1)²\nconst D_MINUS_ONE_SQ = BigInt(\n  '40440834346308536858101042469323190826248399146238708352240133220865137265952'\n);\n// Calculates 1/√(number)\nconst invertSqrt = (number: bigint) => uvRatio(_1n, number);\n\nconst MAX_255B = BigInt('0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\nconst bytes255ToNumberLE = (bytes: Uint8Array) =>\n  ed25519.CURVE.Fp.create(bytesToNumberLE(bytes) & MAX_255B);\n\ntype ExtendedPoint = ExtPointType;\n\n// Computes Elligator map for Ristretto\n// https://ristretto.group/formulas/elligator.html\nfunction calcElligatorRistrettoMap(r0: bigint): ExtendedPoint {\n  const { d } = ed25519.CURVE;\n  const P = ed25519.CURVE.Fp.ORDER;\n  const mod = ed25519.CURVE.Fp.create;\n  const r = mod(SQRT_M1 * r0 * r0); // 1\n  const Ns = mod((r + _1n) * ONE_MINUS_D_SQ); // 2\n  let c = BigInt(-1); // 3\n  const D = mod((c - d * r) * mod(r + d)); // 4\n  let { isValid: Ns_D_is_sq, value: s } = uvRatio(Ns, D); // 5\n  let s_ = mod(s * r0); // 6\n  if (!isNegativeLE(s_, P)) s_ = mod(-s_);\n  if (!Ns_D_is_sq) s = s_; // 7\n  if (!Ns_D_is_sq) c = r; // 8\n  const Nt = mod(c * (r - _1n) * D_MINUS_ONE_SQ - D); // 9\n  const s2 = s * s;\n  const W0 = mod((s + s) * D); // 10\n  const W1 = mod(Nt * SQRT_AD_MINUS_ONE); // 11\n  const W2 = mod(_1n - s2); // 12\n  const W3 = mod(_1n + s2); // 13\n  return new ed25519.ExtendedPoint(mod(W0 * W3), mod(W2 * W1), mod(W1 * W3), mod(W0 * W2));\n}\n\n/**\n * Each ed25519/ExtendedPoint has 8 different equivalent points. This can be\n * a source of bugs for protocols like ring signatures. Ristretto was created to solve this.\n * Ristretto point operates in X:Y:Z:T extended coordinates like ExtendedPoint,\n * but it should work in its own namespace: do not combine those two.\n * https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-ristretto255-decaf448\n */\nclass RistPoint {\n  static BASE: RistPoint;\n  static ZERO: RistPoint;\n  // Private property to discourage combining ExtendedPoint + RistrettoPoint\n  // Always use Ristretto encoding/decoding instead.\n  constructor(private readonly ep: ExtendedPoint) {}\n\n  static fromAffine(ap: AffinePoint<bigint>) {\n    return new RistPoint(ed25519.ExtendedPoint.fromAffine(ap));\n  }\n\n  /**\n   * Takes uniform output of 64-byte hash function like sha512 and converts it to `RistrettoPoint`.\n   * The hash-to-group operation applies Elligator twice and adds the results.\n   * **Note:** this is one-way map, there is no conversion from point to hash.\n   * https://ristretto.group/formulas/elligator.html\n   * @param hex 64-byte output of a hash function\n   */\n  static hashToCurve(hex: Hex): RistPoint {\n    hex = ensureBytes('ristrettoHash', hex, 64);\n    const r1 = bytes255ToNumberLE(hex.slice(0, 32));\n    const R1 = calcElligatorRistrettoMap(r1);\n    const r2 = bytes255ToNumberLE(hex.slice(32, 64));\n    const R2 = calcElligatorRistrettoMap(r2);\n    return new RistPoint(R1.add(R2));\n  }\n\n  /**\n   * Converts ristretto-encoded string to ristretto point.\n   * https://ristretto.group/formulas/decoding.html\n   * @param hex Ristretto-encoded 32 bytes. Not every 32-byte string is valid ristretto encoding\n   */\n  static fromHex(hex: Hex): RistPoint {\n    hex = ensureBytes('ristrettoHex', hex, 32);\n    const { a, d } = ed25519.CURVE;\n    const P = ed25519.CURVE.Fp.ORDER;\n    const mod = ed25519.CURVE.Fp.create;\n    const emsg = 'RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint';\n    const s = bytes255ToNumberLE(hex);\n    // 1. Check that s_bytes is the canonical encoding of a field element, or else abort.\n    // 3. Check that s is non-negative, or else abort\n    if (!equalBytes(numberToBytesLE(s, 32), hex) || isNegativeLE(s, P)) throw new Error(emsg);\n    const s2 = mod(s * s);\n    const u1 = mod(_1n + a * s2); // 4 (a is -1)\n    const u2 = mod(_1n - a * s2); // 5\n    const u1_2 = mod(u1 * u1);\n    const u2_2 = mod(u2 * u2);\n    const v = mod(a * d * u1_2 - u2_2); // 6\n    const { isValid, value: I } = invertSqrt(mod(v * u2_2)); // 7\n    const Dx = mod(I * u2); // 8\n    const Dy = mod(I * Dx * v); // 9\n    let x = mod((s + s) * Dx); // 10\n    if (isNegativeLE(x, P)) x = mod(-x); // 10\n    const y = mod(u1 * Dy); // 11\n    const t = mod(x * y); // 12\n    if (!isValid || isNegativeLE(t, P) || y === _0n) throw new Error(emsg);\n    return new RistPoint(new ed25519.ExtendedPoint(x, y, _1n, t));\n  }\n\n  /**\n   * Encodes ristretto point to Uint8Array.\n   * https://ristretto.group/formulas/encoding.html\n   */\n  toRawBytes(): Uint8Array {\n    let { ex: x, ey: y, ez: z, et: t } = this.ep;\n    const P = ed25519.CURVE.Fp.ORDER;\n    const mod = ed25519.CURVE.Fp.create;\n    const u1 = mod(mod(z + y) * mod(z - y)); // 1\n    const u2 = mod(x * y); // 2\n    // Square root always exists\n    const u2sq = mod(u2 * u2);\n    const { value: invsqrt } = invertSqrt(mod(u1 * u2sq)); // 3\n    const D1 = mod(invsqrt * u1); // 4\n    const D2 = mod(invsqrt * u2); // 5\n    const zInv = mod(D1 * D2 * t); // 6\n    let D: bigint; // 7\n    if (isNegativeLE(t * zInv, P)) {\n      let _x = mod(y * SQRT_M1);\n      let _y = mod(x * SQRT_M1);\n      x = _x;\n      y = _y;\n      D = mod(D1 * INVSQRT_A_MINUS_D);\n    } else {\n      D = D2; // 8\n    }\n    if (isNegativeLE(x * zInv, P)) y = mod(-y); // 9\n    let s = mod((z - y) * D); // 10 (check footer's note, no sqrt(-a))\n    if (isNegativeLE(s, P)) s = mod(-s);\n    return numberToBytesLE(s, 32); // 11\n  }\n\n  toHex(): string {\n    return bytesToHex(this.toRawBytes());\n  }\n\n  toString(): string {\n    return this.toHex();\n  }\n\n  // Compare one point to another.\n  equals(other: RistPoint): boolean {\n    assertRstPoint(other);\n    const { ex: X1, ey: Y1 } = this.ep;\n    const { ex: X2, ey: Y2 } = other.ep;\n    const mod = ed25519.CURVE.Fp.create;\n    // (x1 * y2 == y1 * x2) | (y1 * y2 == x1 * x2)\n    const one = mod(X1 * Y2) === mod(Y1 * X2);\n    const two = mod(Y1 * Y2) === mod(X1 * X2);\n    return one || two;\n  }\n\n  add(other: RistPoint): RistPoint {\n    assertRstPoint(other);\n    return new RistPoint(this.ep.add(other.ep));\n  }\n\n  subtract(other: RistPoint): RistPoint {\n    assertRstPoint(other);\n    return new RistPoint(this.ep.subtract(other.ep));\n  }\n\n  multiply(scalar: bigint): RistPoint {\n    return new RistPoint(this.ep.multiply(scalar));\n  }\n\n  multiplyUnsafe(scalar: bigint): RistPoint {\n    return new RistPoint(this.ep.multiplyUnsafe(scalar));\n  }\n}\nexport const RistrettoPoint = /* @__PURE__ */ (() => {\n  if (!RistPoint.BASE) RistPoint.BASE = new RistPoint(ed25519.ExtendedPoint.BASE);\n  if (!RistPoint.ZERO) RistPoint.ZERO = new RistPoint(ed25519.ExtendedPoint.ZERO);\n  return RistPoint;\n})();\n\n// Hashing to ristretto255. https://www.rfc-editor.org/rfc/rfc9380#appendix-B\nexport const hashToRistretto255 = (msg: Uint8Array, options: htfBasicOpts) => {\n  const d = options.DST;\n  const DST = typeof d === 'string' ? utf8ToBytes(d) : d;\n  const uniform_bytes = expand_message_xmd(msg, DST, 64, sha512);\n  const P = RistPoint.hashToCurve(uniform_bytes);\n  return P;\n};\nexport const hash_to_ristretto255 = hashToRistretto255; // legacy\n","import { SHA2 } from './_sha2.js';\nimport { rotr, wrapConstructor } from './utils.js';\n\n// SHA2-256 need to try 2^128 hashes to execute birthday attack.\n// BTC network is doing 2^67 hashes/sec as per early 2023.\n\n// Choice: a ? b : c\nconst Chi = (a: number, b: number, c: number) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a: number, b: number, c: number) => (a & b) ^ (a & c) ^ (b & c);\n\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */new Uint32Array([\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = /* @__PURE__ */new Uint32Array([\n  0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nclass SHA256 extends SHA2<SHA256> {\n  // We cannot use array here since array allows indexing by variable\n  // which means optimizer/compiler cannot use registers.\n  A = IV[0] | 0;\n  B = IV[1] | 0;\n  C = IV[2] | 0;\n  D = IV[3] | 0;\n  E = IV[4] | 0;\n  F = IV[5] | 0;\n  G = IV[6] | 0;\n  H = IV[7] | 0;\n\n  constructor() {\n    super(64, 32, 8, false);\n  }\n  protected get(): [number, number, number, number, number, number, number, number] {\n    const { A, B, C, D, E, F, G, H } = this;\n    return [A, B, C, D, E, F, G, H];\n  }\n  // prettier-ignore\n  protected set(\n    A: number, B: number, C: number, D: number, E: number, F: number, G: number, H: number\n  ) {\n    this.A = A | 0;\n    this.B = B | 0;\n    this.C = C | 0;\n    this.D = D | 0;\n    this.E = E | 0;\n    this.F = F | 0;\n    this.G = G | 0;\n    this.H = H | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) SHA256_W[i] = view.getUint32(offset, false);\n    for (let i = 16; i < 64; i++) {\n      const W15 = SHA256_W[i - 15];\n      const W2 = SHA256_W[i - 2];\n      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n      const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n      SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n    }\n    // Compression function main loop, 64 rounds\n    let { A, B, C, D, E, F, G, H } = this;\n    for (let i = 0; i < 64; i++) {\n      const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n      const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n      const T2 = (sigma0 + Maj(A, B, C)) | 0;\n      H = G;\n      G = F;\n      F = E;\n      E = (D + T1) | 0;\n      D = C;\n      C = B;\n      B = A;\n      A = (T1 + T2) | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    A = (A + this.A) | 0;\n    B = (B + this.B) | 0;\n    C = (C + this.C) | 0;\n    D = (D + this.D) | 0;\n    E = (E + this.E) | 0;\n    F = (F + this.F) | 0;\n    G = (G + this.G) | 0;\n    H = (H + this.H) | 0;\n    this.set(A, B, C, D, E, F, G, H);\n  }\n  protected roundClean() {\n    SHA256_W.fill(0);\n  }\n  destroy() {\n    this.set(0, 0, 0, 0, 0, 0, 0, 0);\n    this.buffer.fill(0);\n  }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n  A = 0xc1059ed8 | 0;\n  B = 0x367cd507 | 0;\n  C = 0x3070dd17 | 0;\n  D = 0xf70e5939 | 0;\n  E = 0xffc00b31 | 0;\n  F = 0x68581511 | 0;\n  G = 0x64f98fa7 | 0;\n  H = 0xbefa4fa4 | 0;\n  constructor() {\n    super();\n    this.outputLen = 28;\n  }\n}\n\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexport const sha256 = /* @__PURE__ */ wrapConstructor(() => new SHA256());\nexport const sha224 = /* @__PURE__ */ wrapConstructor(() => new SHA224());\n","/**\n * A `StructFailure` represents a single specific failure in validation.\n */\n\nexport type Failure = {\n  value: any\n  key: any\n  type: string\n  refinement: string | undefined\n  message: string\n  branch: Array<any>\n  path: Array<any>\n}\n\n/**\n * `StructError` objects are thrown (or returned) when validation fails.\n *\n * Validation logic is design to exit early for maximum performance. The error\n * represents the first error encountered during validation. For more detail,\n * the `error.failures` property is a generator function that can be run to\n * continue validation and receive all the failures in the data.\n */\n\nexport class StructError extends TypeError {\n  value: any\n  key!: any\n  type!: string\n  refinement!: string | undefined\n  path!: Array<any>\n  branch!: Array<any>\n  failures: () => Array<Failure>;\n  [x: string]: any\n\n  constructor(failure: Failure, failures: () => Generator<Failure>) {\n    let cached: Array<Failure> | undefined\n    const { message, ...rest } = failure\n    const { path } = failure\n    const msg =\n      path.length === 0 ? message : `At path: ${path.join('.')} -- ${message}`\n    super(msg)\n    Object.assign(this, rest)\n    this.name = this.constructor.name\n    this.failures = () => {\n      return (cached ??= [failure, ...failures()])\n    }\n  }\n}\n","import { Struct, Infer, Result, Context, Describe } from './struct'\nimport { Failure } from './error'\n\n/**\n * Check if a value is an iterator.\n */\n\nfunction isIterable<T>(x: unknown): x is Iterable<T> {\n  return isObject(x) && typeof x[Symbol.iterator] === 'function'\n}\n\n/**\n * Check if a value is a plain object.\n */\n\nexport function isObject(x: unknown): x is object {\n  return typeof x === 'object' && x != null\n}\n\n/**\n * Check if a value is a plain object.\n */\n\nexport function isPlainObject(x: unknown): x is { [key: string]: any } {\n  if (Object.prototype.toString.call(x) !== '[object Object]') {\n    return false\n  }\n\n  const prototype = Object.getPrototypeOf(x)\n  return prototype === null || prototype === Object.prototype\n}\n\n/**\n * Return a value as a printable string.\n */\n\nexport function print(value: any): string {\n  return typeof value === 'string' ? JSON.stringify(value) : `${value}`\n}\n\n/**\n * Shifts (removes and returns) the first value from the `input` iterator.\n * Like `Array.prototype.shift()` but for an `Iterator`.\n */\n\nexport function shiftIterator<T>(input: Iterator<T>): T | undefined {\n  const { done, value } = input.next()\n  return done ? undefined : value\n}\n\n/**\n * Convert a single validation result to a failure.\n */\n\nexport function toFailure<T, S>(\n  result: string | boolean | Partial<Failure>,\n  context: Context,\n  struct: Struct<T, S>,\n  value: any\n): Failure | undefined {\n  if (result === true) {\n    return\n  } else if (result === false) {\n    result = {}\n  } else if (typeof result === 'string') {\n    result = { message: result }\n  }\n\n  const { path, branch } = context\n  const { type } = struct\n  const {\n    refinement,\n    message = `Expected a value of type \\`${type}\\`${\n      refinement ? ` with refinement \\`${refinement}\\`` : ''\n    }, but received: \\`${print(value)}\\``,\n  } = result\n\n  return {\n    value,\n    type,\n    refinement,\n    key: path[path.length - 1],\n    path,\n    branch,\n    ...result,\n    message,\n  }\n}\n\n/**\n * Convert a validation result to an iterable of failures.\n */\n\nexport function* toFailures<T, S>(\n  result: Result,\n  context: Context,\n  struct: Struct<T, S>,\n  value: any\n): IterableIterator<Failure> {\n  if (!isIterable(result)) {\n    result = [result]\n  }\n\n  for (const r of result) {\n    const failure = toFailure(r, context, struct, value)\n\n    if (failure) {\n      yield failure\n    }\n  }\n}\n\n/**\n * Check a value against a struct, traversing deeply into nested values, and\n * returning an iterator of failures or success.\n */\n\nexport function* run<T, S>(\n  value: unknown,\n  struct: Struct<T, S>,\n  options: {\n    path?: any[]\n    branch?: any[]\n    coerce?: boolean\n    mask?: boolean\n  } = {}\n): IterableIterator<[Failure, undefined] | [undefined, T]> {\n  const { path = [], branch = [value], coerce = false, mask = false } = options\n  const ctx: Context = { path, branch }\n\n  if (coerce) {\n    value = struct.coercer(value, ctx)\n\n    if (\n      mask &&\n      struct.type !== 'type' &&\n      isObject(struct.schema) &&\n      isObject(value) &&\n      !Array.isArray(value)\n    ) {\n      for (const key in value) {\n        if (struct.schema[key] === undefined) {\n          delete value[key]\n        }\n      }\n    }\n  }\n\n  let valid = true\n\n  for (const failure of struct.validator(value, ctx)) {\n    valid = false\n    yield [failure, undefined]\n  }\n\n  for (let [k, v, s] of struct.entries(value, ctx)) {\n    const ts = run(v, s as Struct, {\n      path: k === undefined ? path : [...path, k],\n      branch: k === undefined ? branch : [...branch, v],\n      coerce,\n      mask,\n    })\n\n    for (const t of ts) {\n      if (t[0]) {\n        valid = false\n        yield [t[0], undefined]\n      } else if (coerce) {\n        v = t[1]\n\n        if (k === undefined) {\n          value = v\n        } else if (value instanceof Map) {\n          value.set(k, v)\n        } else if (value instanceof Set) {\n          value.add(v)\n        } else if (isObject(value)) {\n          value[k] = v\n        }\n      }\n    }\n  }\n\n  if (valid) {\n    for (const failure of struct.refiner(value as T, ctx)) {\n      valid = false\n      yield [failure, undefined]\n    }\n  }\n\n  if (valid) {\n    yield [undefined, value as T]\n  }\n}\n\n/**\n * Assign properties from one type to another, overwriting existing.\n */\n\nexport type Assign<T, U> = Simplify<U & Omit<T, keyof U>>\n\n/**\n * A schema for enum structs.\n */\n\nexport type EnumSchema<T extends string | number> = { [K in T]: K }\n\n/**\n * Check if a type is an exact match.\n */\n\nexport type IsMatch<T, G> = T extends G ? (G extends T ? T : never) : never\n\n/**\n * Check if a type is a record type.\n */\n\nexport type IsRecord<T> = T extends object\n  ? string extends keyof T\n    ? T\n    : never\n  : never\n/**\n * Check if a type is a tuple.\n */\n\nexport type IsTuple<T> = T extends [any]\n  ? T\n  : T extends [any, any]\n  ? T\n  : T extends [any, any, any]\n  ? T\n  : T extends [any, any, any, any]\n  ? T\n  : T extends [any, any, any, any, any]\n  ? T\n  : never\n\n/**\n * Check if a type is a union.\n */\n\nexport type IsUnion<T, U extends T = T> = (\n  T extends any ? (U extends T ? false : true) : false\n) extends false\n  ? never\n  : T\n\n/**\n * A schema for object structs.\n */\n\nexport type ObjectSchema = Record<string, Struct<any, any>>\n\n/**\n * Infer a type from an object struct schema.\n */\n\nexport type ObjectType<S extends ObjectSchema> = Simplify<\n  Optionalize<{ [K in keyof S]: Infer<S[K]> }>\n>\n\n/**\n * Omit properties from a type that extend from a specific type.\n */\n\nexport type OmitBy<T, V> = Omit<\n  T,\n  { [K in keyof T]: V extends Extract<T[K], V> ? K : never }[keyof T]\n>\n\n/**\n * Normalize properties of a type that allow `undefined` to make them optional.\n */\n\nexport type Optionalize<S extends object> = OmitBy<S, undefined> &\n  Partial<PickBy<S, undefined>>\n\n/**\n * Transform an object schema type to represent a partial.\n */\n\nexport type PartialObjectSchema<S extends ObjectSchema> = {\n  [K in keyof S]: Struct<Infer<S[K]> | undefined>\n}\n\n/**\n * Pick properties from a type that extend from a specific type.\n */\n\nexport type PickBy<T, V> = Pick<\n  T,\n  { [K in keyof T]: V extends Extract<T[K], V> ? K : never }[keyof T]\n>\n\n/**\n * Simplifies a type definition to its most basic representation.\n */\n\nexport type Simplify<T> = T extends any[] | Date\n  ? T\n  : { [K in keyof T]: T[K] } & {}\n\nexport type If<B extends Boolean, Then, Else> = B extends true ? Then : Else\n\n/**\n * A schema for any type of struct.\n */\n\nexport type StructSchema<T> = [T] extends [string]\n  ? [T] extends [IsMatch<T, string>]\n    ? null\n    : [T] extends [IsUnion<T>]\n    ? EnumSchema<T>\n    : T\n  : [T] extends [number]\n  ? [T] extends [IsMatch<T, number>]\n    ? null\n    : [T] extends [IsUnion<T>]\n    ? EnumSchema<T>\n    : T\n  : [T] extends [boolean]\n  ? [T] extends [IsMatch<T, boolean>]\n    ? null\n    : T\n  : T extends\n      | bigint\n      | symbol\n      | undefined\n      | null\n      | Function\n      | Date\n      | Error\n      | RegExp\n      | Map<any, any>\n      | WeakMap<any, any>\n      | Set<any>\n      | WeakSet<any>\n      | Promise<any>\n  ? null\n  : T extends Array<infer E>\n  ? T extends IsTuple<T>\n    ? null\n    : Struct<E>\n  : T extends object\n  ? T extends IsRecord<T>\n    ? null\n    : { [K in keyof T]: Describe<T[K]> }\n  : null\n\n/**\n * A schema for tuple structs.\n */\n\nexport type TupleSchema<T> = { [K in keyof T]: Struct<T[K]> }\n","import { toFailures, shiftIterator, StructSchema, run } from './utils'\nimport { StructError, Failure } from './error'\n\n/**\n * `Struct` objects encapsulate the validation logic for a specific type of\n * values. Once constructed, you use the `assert`, `is` or `validate` helpers to\n * validate unknown input data against the struct.\n */\n\nexport class Struct<T = unknown, S = unknown> {\n  readonly TYPE!: T\n  type: string\n  schema: S\n  coercer: (value: unknown, context: Context) => unknown\n  validator: (value: unknown, context: Context) => Iterable<Failure>\n  refiner: (value: T, context: Context) => Iterable<Failure>\n  entries: (\n    value: unknown,\n    context: Context\n  ) => Iterable<[string | number, unknown, Struct<any> | Struct<never>]>\n\n  constructor(props: {\n    type: string\n    schema: S\n    coercer?: Coercer\n    validator?: Validator\n    refiner?: Refiner<T>\n    entries?: Struct<T, S>['entries']\n  }) {\n    const {\n      type,\n      schema,\n      validator,\n      refiner,\n      coercer = (value: unknown) => value,\n      entries = function* () {},\n    } = props\n\n    this.type = type\n    this.schema = schema\n    this.entries = entries\n    this.coercer = coercer\n\n    if (validator) {\n      this.validator = (value, context) => {\n        const result = validator(value, context)\n        return toFailures(result, context, this, value)\n      }\n    } else {\n      this.validator = () => []\n    }\n\n    if (refiner) {\n      this.refiner = (value, context) => {\n        const result = refiner(value, context)\n        return toFailures(result, context, this, value)\n      }\n    } else {\n      this.refiner = () => []\n    }\n  }\n\n  /**\n   * Assert that a value passes the struct's validation, throwing if it doesn't.\n   */\n\n  assert(value: unknown): asserts value is T {\n    return assert(value, this)\n  }\n\n  /**\n   * Create a value with the struct's coercion logic, then validate it.\n   */\n\n  create(value: unknown): T {\n    return create(value, this)\n  }\n\n  /**\n   * Check if a value passes the struct's validation.\n   */\n\n  is(value: unknown): value is T {\n    return is(value, this)\n  }\n\n  /**\n   * Mask a value, coercing and validating it, but returning only the subset of\n   * properties defined by the struct's schema.\n   */\n\n  mask(value: unknown): T {\n    return mask(value, this)\n  }\n\n  /**\n   * Validate a value with the struct's validation logic, returning a tuple\n   * representing the result.\n   *\n   * You may optionally pass `true` for the `withCoercion` argument to coerce\n   * the value before attempting to validate it. If you do, the result will\n   * contain the coerced result when successful.\n   */\n\n  validate(\n    value: unknown,\n    options: {\n      coerce?: boolean\n    } = {}\n  ): [StructError, undefined] | [undefined, T] {\n    return validate(value, this, options)\n  }\n}\n\n/**\n * Assert that a value passes a struct, throwing if it doesn't.\n */\n\nexport function assert<T, S>(\n  value: unknown,\n  struct: Struct<T, S>\n): asserts value is T {\n  const result = validate(value, struct)\n\n  if (result[0]) {\n    throw result[0]\n  }\n}\n\n/**\n * Create a value with the coercion logic of struct and validate it.\n */\n\nexport function create<T, S>(value: unknown, struct: Struct<T, S>): T {\n  const result = validate(value, struct, { coerce: true })\n\n  if (result[0]) {\n    throw result[0]\n  } else {\n    return result[1]\n  }\n}\n\n/**\n * Mask a value, returning only the subset of properties defined by a struct.\n */\n\nexport function mask<T, S>(value: unknown, struct: Struct<T, S>): T {\n  const result = validate(value, struct, { coerce: true, mask: true })\n\n  if (result[0]) {\n    throw result[0]\n  } else {\n    return result[1]\n  }\n}\n\n/**\n * Check if a value passes a struct.\n */\n\nexport function is<T, S>(value: unknown, struct: Struct<T, S>): value is T {\n  const result = validate(value, struct)\n  return !result[0]\n}\n\n/**\n * Validate a value against a struct, returning an error if invalid, or the\n * value (with potential coercion) if valid.\n */\n\nexport function validate<T, S>(\n  value: unknown,\n  struct: Struct<T, S>,\n  options: {\n    coerce?: boolean\n    mask?: boolean\n  } = {}\n): [StructError, undefined] | [undefined, T] {\n  const tuples = run(value, struct, options)\n  const tuple = shiftIterator(tuples)!\n\n  if (tuple[0]) {\n    const error = new StructError(tuple[0], function* () {\n      for (const t of tuples) {\n        if (t[0]) {\n          yield t[0]\n        }\n      }\n    })\n\n    return [error, undefined]\n  } else {\n    const v = tuple[1]\n    return [undefined, v]\n  }\n}\n\n/**\n * A `Context` contains information about the current location of the\n * validation inside the initial input value.\n */\n\nexport type Context = {\n  branch: Array<any>\n  path: Array<any>\n}\n\n/**\n * A type utility to extract the type from a `Struct` class.\n */\n\nexport type Infer<T extends Struct<any, any>> = T['TYPE']\n\n/**\n * A type utility to describe that a struct represents a TypeScript type.\n */\n\nexport type Describe<T> = Struct<T, StructSchema<T>>\n\n/**\n * A `Result` is returned from validation functions.\n */\n\nexport type Result =\n  | boolean\n  | string\n  | Partial<Failure>\n  | Iterable<boolean | string | Partial<Failure>>\n\n/**\n * A `Coercer` takes an unknown value and optionally coerces it.\n */\n\nexport type Coercer<T = unknown> = (value: T, context: Context) => unknown\n\n/**\n * A `Validator` takes an unknown value and validates it.\n */\n\nexport type Validator = (value: unknown, context: Context) => Result\n\n/**\n * A `Refiner` takes a value of a known type and validates it against a further\n * constraint.\n */\n\nexport type Refiner<T> = (value: T, context: Context) => Result\n","import { Struct, Context, Validator } from '../struct'\nimport { object, optional } from './types'\nimport { ObjectSchema, Assign, ObjectType, PartialObjectSchema } from '../utils'\n\n/**\n * Create a new struct that combines the properties properties from multiple\n * object structs.\n *\n * Like JavaScript's `Object.assign` utility.\n */\n\nexport function assign<A extends ObjectSchema, B extends ObjectSchema>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>\n): Struct<ObjectType<Assign<A, B>>, Assign<A, B>>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>\n): Struct<ObjectType<Assign<Assign<A, B>, C>>, Assign<Assign<A, B>, C>>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema,\n  D extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>,\n  D: Struct<ObjectType<D>, D>\n): Struct<\n  ObjectType<Assign<Assign<Assign<A, B>, C>, D>>,\n  Assign<Assign<Assign<A, B>, C>, D>\n>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema,\n  D extends ObjectSchema,\n  E extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>,\n  D: Struct<ObjectType<D>, D>,\n  E: Struct<ObjectType<E>, E>\n): Struct<\n  ObjectType<Assign<Assign<Assign<Assign<A, B>, C>, D>, E>>,\n  Assign<Assign<Assign<Assign<A, B>, C>, D>, E>\n>\nexport function assign(...Structs: Struct<any>[]): any {\n  const schemas = Structs.map((s) => s.schema)\n  const schema = Object.assign({}, ...schemas)\n  return object(schema)\n}\n\n/**\n * Define a new struct type with a custom validation function.\n */\n\nexport function define<T>(name: string, validator: Validator): Struct<T, null> {\n  return new Struct({ type: name, schema: null, validator })\n}\n\n/**\n * Create a new struct based on an existing struct, but the value is allowed to\n * be `undefined`. `log` will be called if the value is not `undefined`.\n */\n\nexport function deprecated<T>(\n  struct: Struct<T>,\n  log: (value: unknown, ctx: Context) => void\n): Struct<T> {\n  return new Struct({\n    ...struct,\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n    validator(value, ctx) {\n      if (value === undefined) {\n        return true\n      } else {\n        log(value, ctx)\n        return struct.validator(value, ctx)\n      }\n    },\n  })\n}\n\n/**\n * Create a struct with dynamic validation logic.\n *\n * The callback will receive the value currently being validated, and must\n * return a struct object to validate it with. This can be useful to model\n * validation logic that changes based on its input.\n */\n\nexport function dynamic<T>(\n  fn: (value: unknown, ctx: Context) => Struct<T, any>\n): Struct<T, null> {\n  return new Struct({\n    type: 'dynamic',\n    schema: null,\n    *entries(value, ctx) {\n      const struct = fn(value, ctx)\n      yield* struct.entries(value, ctx)\n    },\n    validator(value, ctx) {\n      const struct = fn(value, ctx)\n      return struct.validator(value, ctx)\n    },\n    coercer(value, ctx) {\n      const struct = fn(value, ctx)\n      return struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Create a struct with lazily evaluated validation logic.\n *\n * The first time validation is run with the struct, the callback will be called\n * and must return a struct object to use. This is useful for cases where you\n * want to have self-referential structs for nested data structures to avoid a\n * circular definition problem.\n */\n\nexport function lazy<T>(fn: () => Struct<T, any>): Struct<T, null> {\n  let struct: Struct<T, any> | undefined\n  return new Struct({\n    type: 'lazy',\n    schema: null,\n    *entries(value, ctx) {\n      struct ??= fn()\n      yield* struct.entries(value, ctx)\n    },\n    validator(value, ctx) {\n      struct ??= fn()\n      return struct.validator(value, ctx)\n    },\n    coercer(value, ctx) {\n      struct ??= fn()\n      return struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Create a new struct based on an existing object struct, but excluding\n * specific properties.\n *\n * Like TypeScript's `Omit` utility.\n */\n\nexport function omit<S extends ObjectSchema, K extends keyof S>(\n  struct: Struct<ObjectType<S>, S>,\n  keys: K[]\n): Struct<ObjectType<Omit<S, K>>, Omit<S, K>> {\n  const { schema } = struct\n  const subschema: any = { ...schema }\n\n  for (const key of keys) {\n    delete subschema[key]\n  }\n\n  return object(subschema as Omit<S, K>)\n}\n\n/**\n * Create a new struct based on an existing object struct, but with all of its\n * properties allowed to be `undefined`.\n *\n * Like TypeScript's `Partial` utility.\n */\n\nexport function partial<S extends ObjectSchema>(\n  struct: Struct<ObjectType<S>, S> | S\n): Struct<ObjectType<PartialObjectSchema<S>>, PartialObjectSchema<S>> {\n  const schema: any =\n    struct instanceof Struct ? { ...struct.schema } : { ...struct }\n\n  for (const key in schema) {\n    schema[key] = optional(schema[key])\n  }\n\n  return object(schema) as any\n}\n\n/**\n * Create a new struct based on an existing object struct, but only including\n * specific properties.\n *\n * Like TypeScript's `Pick` utility.\n */\n\nexport function pick<S extends ObjectSchema, K extends keyof S>(\n  struct: Struct<ObjectType<S>, S>,\n  keys: K[]\n): Struct<ObjectType<Pick<S, K>>, Pick<S, K>> {\n  const { schema } = struct\n  const subschema: any = {}\n\n  for (const key of keys) {\n    subschema[key] = schema[key]\n  }\n\n  return object(subschema as Pick<S, K>)\n}\n\n/**\n * Define a new struct type with a custom validation function.\n *\n * @deprecated This function has been renamed to `define`.\n */\n\nexport function struct<T>(name: string, validator: Validator): Struct<T, null> {\n  console.warn(\n    'superstruct@0.11 - The `struct` helper has been renamed to `define`.'\n  )\n\n  return define(name, validator)\n}\n","import { Infer, Struct } from '../struct'\nimport { define } from './utilities'\nimport {\n  TupleSchema,\n  ObjectSchema,\n  ObjectType,\n  print,\n  run,\n  isObject,\n} from '../utils'\n\n/**\n * Ensure that any value passes validation.\n */\n\nexport function any(): Struct<any, null> {\n  return define('any', () => true)\n}\n\n/**\n * Ensure that a value is an array and that its elements are of a specific type.\n *\n * Note: If you omit the element struct, the arrays elements will not be\n * iterated at all. This can be helpful for cases where performance is critical,\n * and it is preferred to using `array(any())`.\n */\n\nexport function array<T extends Struct<any>>(Element: T): Struct<Infer<T>[], T>\nexport function array(): Struct<unknown[], undefined>\nexport function array<T extends Struct<any>>(Element?: T): any {\n  return new Struct({\n    type: 'array',\n    schema: Element,\n    *entries(value) {\n      if (Element && Array.isArray(value)) {\n        for (const [i, v] of value.entries()) {\n          yield [i, v, Element]\n        }\n      }\n    },\n    coercer(value) {\n      return Array.isArray(value) ? value.slice() : value\n    },\n    validator(value) {\n      return (\n        Array.isArray(value) ||\n        `Expected an array value, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a boolean.\n */\n\nexport function boolean(): Struct<boolean, null> {\n  return define('boolean', (value) => {\n    return typeof value === 'boolean'\n  })\n}\n\n/**\n * Ensure that a value is a valid `Date`.\n *\n * Note: this also ensures that the value is *not* an invalid `Date` object,\n * which can occur when parsing a date fails but still returns a `Date`.\n */\n\nexport function date(): Struct<Date, null> {\n  return define('date', (value) => {\n    return (\n      (value instanceof Date && !isNaN(value.getTime())) ||\n      `Expected a valid \\`Date\\` object, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is one of a set of potential values.\n *\n * Note: after creating the struct, you can access the definition of the\n * potential values as `struct.schema`.\n */\n\nexport function enums<T extends number>(\n  values: readonly T[]\n): Struct<T, { [K in T[][number]]: K }>\nexport function enums<T extends string>(\n  values: readonly T[]\n): Struct<T, { [K in T[][number]]: K }>\nexport function enums<T extends number | string>(values: readonly T[]): any {\n  const schema: any = {}\n  const description = values.map((v) => print(v)).join()\n\n  for (const key of values) {\n    schema[key] = key\n  }\n\n  return new Struct({\n    type: 'enums',\n    schema,\n    validator(value) {\n      return (\n        values.includes(value as any) ||\n        `Expected one of \\`${description}\\`, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a function.\n */\n\nexport function func(): Struct<Function, null> {\n  return define('func', (value) => {\n    return (\n      typeof value === 'function' ||\n      `Expected a function, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an instance of a specific class.\n */\n\nexport function instance<T extends { new (...args: any): any }>(\n  Class: T\n): Struct<InstanceType<T>, null> {\n  return define('instance', (value) => {\n    return (\n      value instanceof Class ||\n      `Expected a \\`${Class.name}\\` instance, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an integer.\n */\n\nexport function integer(): Struct<number, null> {\n  return define('integer', (value) => {\n    return (\n      (typeof value === 'number' && !isNaN(value) && Number.isInteger(value)) ||\n      `Expected an integer, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value matches all of a set of types.\n */\n\nexport function intersection<A>(Structs: TupleSchema<[A]>): Struct<A, null>\nexport function intersection<A, B>(\n  Structs: TupleSchema<[A, B]>\n): Struct<A & B, null>\nexport function intersection<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<A & B & C, null>\nexport function intersection<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<A & B & C & D, null>\nexport function intersection<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<A & B & C & D & E, null>\nexport function intersection<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<A & B & C & D & E & F, null>\nexport function intersection<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<A & B & C & D & E & F & G, null>\nexport function intersection<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<A & B & C & D & E & F & G & H, null>\nexport function intersection<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<A & B & C & D & E & F & G & H & I, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<A & B & C & D & E & F & G & H & I & J, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<\n  A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P & Q,\n  null\n>\nexport function intersection(Structs: Array<Struct<any, any>>): any {\n  return new Struct({\n    type: 'intersection',\n    schema: null,\n    *entries(value, ctx) {\n      for (const S of Structs) {\n        yield* S.entries(value, ctx)\n      }\n    },\n    *validator(value, ctx) {\n      for (const S of Structs) {\n        yield* S.validator(value, ctx)\n      }\n    },\n    *refiner(value, ctx) {\n      for (const S of Structs) {\n        yield* S.refiner(value, ctx)\n      }\n    },\n  })\n}\n\n/**\n * Ensure that a value is an exact value, using `===` for comparison.\n */\n\nexport function literal<T extends boolean>(constant: T): Struct<T, T>\nexport function literal<T extends number>(constant: T): Struct<T, T>\nexport function literal<T extends string>(constant: T): Struct<T, T>\nexport function literal<T>(constant: T): Struct<T, null>\nexport function literal<T>(constant: T): any {\n  const description = print(constant)\n  const t = typeof constant\n  return new Struct({\n    type: 'literal',\n    schema:\n      t === 'string' || t === 'number' || t === 'boolean' ? constant : null,\n    validator(value) {\n      return (\n        value === constant ||\n        `Expected the literal \\`${description}\\`, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a `Map` object, and that its keys and values are of\n * specific types.\n */\n\nexport function map(): Struct<Map<unknown, unknown>, null>\nexport function map<K, V>(\n  Key: Struct<K>,\n  Value: Struct<V>\n): Struct<Map<K, V>, null>\nexport function map<K, V>(Key?: Struct<K>, Value?: Struct<V>): any {\n  return new Struct({\n    type: 'map',\n    schema: null,\n    *entries(value) {\n      if (Key && Value && value instanceof Map) {\n        for (const [k, v] of value.entries()) {\n          yield [k as string, k, Key]\n          yield [k as string, v, Value]\n        }\n      }\n    },\n    coercer(value) {\n      return value instanceof Map ? new Map(value) : value\n    },\n    validator(value) {\n      return (\n        value instanceof Map ||\n        `Expected a \\`Map\\` object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that no value ever passes validation.\n */\n\nexport function never(): Struct<never, null> {\n  return define('never', () => false)\n}\n\n/**\n * Augment an existing struct to allow `null` values.\n */\n\nexport function nullable<T, S>(struct: Struct<T, S>): Struct<T | null, S> {\n  return new Struct({\n    ...struct,\n    validator: (value, ctx) => value === null || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === null || struct.refiner(value, ctx),\n  })\n}\n\n/**\n * Ensure that a value is a number.\n */\n\nexport function number(): Struct<number, null> {\n  return define('number', (value) => {\n    return (\n      (typeof value === 'number' && !isNaN(value)) ||\n      `Expected a number, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an object, that is has a known set of properties,\n * and that its properties are of specific types.\n *\n * Note: Unrecognized properties will fail validation.\n */\n\nexport function object(): Struct<Record<string, unknown>, null>\nexport function object<S extends ObjectSchema>(\n  schema: S\n): Struct<ObjectType<S>, S>\nexport function object<S extends ObjectSchema>(schema?: S): any {\n  const knowns = schema ? Object.keys(schema) : []\n  const Never = never()\n  return new Struct({\n    type: 'object',\n    schema: schema ? schema : null,\n    *entries(value) {\n      if (schema && isObject(value)) {\n        const unknowns = new Set(Object.keys(value))\n\n        for (const key of knowns) {\n          unknowns.delete(key)\n          yield [key, value[key], schema[key]]\n        }\n\n        for (const key of unknowns) {\n          yield [key, value[key], Never]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n    coercer(value) {\n      return isObject(value) ? { ...value } : value\n    },\n  })\n}\n\n/**\n * Augment a struct to allow `undefined` values.\n */\n\nexport function optional<T, S>(struct: Struct<T, S>): Struct<T | undefined, S> {\n  return new Struct({\n    ...struct,\n    validator: (value, ctx) =>\n      value === undefined || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n  })\n}\n\n/**\n * Ensure that a value is an object with keys and values of specific types, but\n * without ensuring any specific shape of properties.\n *\n * Like TypeScript's `Record` utility.\n */\n\nexport function record<K extends string, V>(\n  Key: Struct<K>,\n  Value: Struct<V>\n): Struct<Record<K, V>, null> {\n  return new Struct({\n    type: 'record',\n    schema: null,\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k in value) {\n          const v = value[k]\n          yield [k, k, Key]\n          yield [k, v, Value]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a `RegExp`.\n *\n * Note: this does not test the value against the regular expression! For that\n * you need to use the `pattern()` refinement.\n */\n\nexport function regexp(): Struct<RegExp, null> {\n  return define('regexp', (value) => {\n    return value instanceof RegExp\n  })\n}\n\n/**\n * Ensure that a value is a `Set` object, and that its elements are of a\n * specific type.\n */\n\nexport function set(): Struct<Set<unknown>, null>\nexport function set<T>(Element: Struct<T>): Struct<Set<T>, null>\nexport function set<T>(Element?: Struct<T>): any {\n  return new Struct({\n    type: 'set',\n    schema: null,\n    *entries(value) {\n      if (Element && value instanceof Set) {\n        for (const v of value) {\n          yield [v as string, v, Element]\n        }\n      }\n    },\n    coercer(value) {\n      return value instanceof Set ? new Set(value) : value\n    },\n    validator(value) {\n      return (\n        value instanceof Set ||\n        `Expected a \\`Set\\` object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a string.\n */\n\nexport function string(): Struct<string, null> {\n  return define('string', (value) => {\n    return (\n      typeof value === 'string' ||\n      `Expected a string, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is a tuple of a specific length, and that each of its\n * elements is of a specific type.\n */\n\nexport function tuple<A>(Structs: TupleSchema<[A]>): Struct<[A], null>\nexport function tuple<A, B>(Structs: TupleSchema<[A, B]>): Struct<[A, B], null>\nexport function tuple<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<[A, B, C], null>\nexport function tuple<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<[A, B, C, D], null>\nexport function tuple<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<[A, B, C, D, E], null>\nexport function tuple<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<[A, B, C, D, E, F], null>\nexport function tuple<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<[A, B, C, D, E, F, G], null>\nexport function tuple<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<[A, B, C, D, E, F, G, H], null>\nexport function tuple<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<[A, B, C, D, E, F, G, H, I], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<[A, B, C, D, E, F, G, H, I, J], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q], null>\nexport function tuple(Elements: Struct<any>[]): any {\n  const Never = never()\n\n  return new Struct({\n    type: 'tuple',\n    schema: null,\n    *entries(value) {\n      if (Array.isArray(value)) {\n        const length = Math.max(Elements.length, value.length)\n\n        for (let i = 0; i < length; i++) {\n          yield [i, value[i], Elements[i] || Never]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        Array.isArray(value) ||\n        `Expected an array, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value has a set of known properties of specific types.\n *\n * Note: Unrecognized properties are allowed and untouched. This is similar to\n * how TypeScript's structural typing works.\n */\n\nexport function type<S extends ObjectSchema>(\n  schema: S\n): Struct<ObjectType<S>, S> {\n  const keys = Object.keys(schema)\n  return new Struct({\n    type: 'type',\n    schema,\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k of keys) {\n          yield [k, value[k], schema[k]]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value matches one of a set of types.\n */\n\nexport function union<A>(Structs: TupleSchema<[A]>): Struct<A, null>\nexport function union<A, B>(Structs: TupleSchema<[A, B]>): Struct<A | B, null>\nexport function union<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<A | B | C, null>\nexport function union<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<A | B | C | D, null>\nexport function union<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<A | B | C | D | E, null>\nexport function union<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<A | B | C | D | E | F, null>\nexport function union<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<A | B | C | D | E | F | G, null>\nexport function union<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<A | B | C | D | E | F | G | H, null>\nexport function union<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<A | B | C | D | E | F | G | H | I, null>\nexport function union<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<A | B | C | D | E | F | G | H | I | J, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N | O, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<\n  A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q,\n  null\n>\nexport function union(Structs: Struct<any>[]): any {\n  const description = Structs.map((s) => s.type).join(' | ')\n  return new Struct({\n    type: 'union',\n    schema: null,\n    validator(value, ctx) {\n      const failures = []\n\n      for (const S of Structs) {\n        const [...tuples] = run(value, S, ctx)\n        const [first] = tuples\n\n        if (!first[0]) {\n          return []\n        } else {\n          for (const [failure] of tuples) {\n            if (failure) {\n              failures.push(failure)\n            }\n          }\n        }\n      }\n\n      return [\n        `Expected the value to satisfy a union of \\`${description}\\`, but received: ${print(\n          value\n        )}`,\n        ...failures,\n      ]\n    },\n  })\n}\n\n/**\n * Ensure that any value passes validation, without widening its type to `any`.\n */\n\nexport function unknown(): Struct<unknown, null> {\n  return define('unknown', () => true)\n}\n","import { Struct, is, Coercer } from '../struct'\nimport { isPlainObject } from '../utils'\nimport { string, unknown } from './types'\n\n/**\n * Augment a `Struct` to add an additional coercion step to its input.\n *\n * This allows you to transform input data before validating it, to increase the\n * likelihood that it passes validation—for example for default values, parsing\n * different formats, etc.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function coerce<T, S, C>(\n  struct: Struct<T, S>,\n  condition: Struct<C, any>,\n  coercer: Coercer<C>\n): Struct<T, S> {\n  return new Struct({\n    ...struct,\n    coercer: (value, ctx) => {\n      return is(value, condition)\n        ? struct.coercer(coercer(value, ctx), ctx)\n        : struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Augment a struct to replace `undefined` values with a default.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function defaulted<T, S>(\n  struct: Struct<T, S>,\n  fallback: any,\n  options: {\n    strict?: boolean\n  } = {}\n): Struct<T, S> {\n  return coerce(struct, unknown(), (x) => {\n    const f = typeof fallback === 'function' ? fallback() : fallback\n\n    if (x === undefined) {\n      return f\n    }\n\n    if (!options.strict && isPlainObject(x) && isPlainObject(f)) {\n      const ret = { ...x }\n      let changed = false\n\n      for (const key in f) {\n        if (ret[key] === undefined) {\n          ret[key] = f[key]\n          changed = true\n        }\n      }\n\n      if (changed) {\n        return ret\n      }\n    }\n\n    return x\n  })\n}\n\n/**\n * Augment a struct to trim string inputs.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function trimmed<T, S>(struct: Struct<T, S>): Struct<T, S> {\n  return coerce(struct, string(), (x) => x.trim())\n}\n","import { hash as assertHash, bytes as assertBytes, exists as assertExists } from './_assert.js';\nimport { Hash, CHash, Input, toBytes } from './utils.js';\n// HMAC (RFC 2104)\nexport class HMAC<T extends Hash<T>> extends Hash<HMAC<T>> {\n  oHash: T;\n  iHash: T;\n  blockLen: number;\n  outputLen: number;\n  private finished = false;\n  private destroyed = false;\n\n  constructor(hash: CHash, _key: Input) {\n    super();\n    assertHash(hash);\n    const key = toBytes(_key);\n    this.iHash = hash.create() as T;\n    if (typeof this.iHash.update !== 'function')\n      throw new Error('Expected instance of class which extends utils.Hash');\n    this.blockLen = this.iHash.blockLen;\n    this.outputLen = this.iHash.outputLen;\n    const blockLen = this.blockLen;\n    const pad = new Uint8Array(blockLen);\n    // blockLen can be bigger than outputLen\n    pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36;\n    this.iHash.update(pad);\n    // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n    this.oHash = hash.create() as T;\n    // Undo internal XOR && apply outer XOR\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36 ^ 0x5c;\n    this.oHash.update(pad);\n    pad.fill(0);\n  }\n  update(buf: Input) {\n    assertExists(this);\n    this.iHash.update(buf);\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    assertExists(this);\n    assertBytes(out, this.outputLen);\n    this.finished = true;\n    this.iHash.digestInto(out);\n    this.oHash.update(out);\n    this.oHash.digestInto(out);\n    this.destroy();\n  }\n  digest() {\n    const out = new Uint8Array(this.oHash.outputLen);\n    this.digestInto(out);\n    return out;\n  }\n  _cloneInto(to?: HMAC<T>): HMAC<T> {\n    // Create new instance without calling constructor since key already in state and we don't know it.\n    to ||= Object.create(Object.getPrototypeOf(this), {});\n    const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n    to = to as this;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    to.blockLen = blockLen;\n    to.outputLen = outputLen;\n    to.oHash = oHash._cloneInto(to.oHash);\n    to.iHash = iHash._cloneInto(to.iHash);\n    return to;\n  }\n  destroy() {\n    this.destroyed = true;\n    this.oHash.destroy();\n    this.iHash.destroy();\n  }\n}\n\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nexport const hmac = (hash: CHash, key: Input, message: Input): Uint8Array =>\n  new HMAC<any>(hash, key).update(message).digest();\nhmac.create = (hash: CHash, key: Input) => new HMAC<any>(hash, key);\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Short Weierstrass curve. The formula is: y² = x³ + ax + b\nimport * as mod from './modular.js';\nimport * as ut from './utils.js';\nimport { CHash, Hex, PrivKey, ensureBytes } from './utils.js';\nimport { Group, GroupConstructor, wNAF, BasicCurve, validateBasic, AffinePoint } from './curve.js';\n\nexport type { AffinePoint };\ntype HmacFnSync = (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array;\ntype EndomorphismOpts = {\n  beta: bigint;\n  splitScalar: (k: bigint) => { k1neg: boolean; k1: bigint; k2neg: boolean; k2: bigint };\n};\nexport type BasicWCurve<T> = BasicCurve<T> & {\n  // Params: a, b\n  a: T;\n  b: T;\n\n  // Optional params\n  allowedPrivateKeyLengths?: readonly number[]; // for P521\n  wrapPrivateKey?: boolean; // bls12-381 requires mod(n) instead of rejecting keys >= n\n  endo?: EndomorphismOpts; // Endomorphism options for Koblitz curves\n  // When a cofactor != 1, there can be an effective methods to:\n  // 1. Determine whether a point is torsion-free\n  isTorsionFree?: (c: ProjConstructor<T>, point: ProjPointType<T>) => boolean;\n  // 2. Clear torsion component\n  clearCofactor?: (c: ProjConstructor<T>, point: ProjPointType<T>) => ProjPointType<T>;\n};\n\ntype Entropy = Hex | true;\nexport type SignOpts = { lowS?: boolean; extraEntropy?: Entropy; prehash?: boolean };\nexport type VerOpts = { lowS?: boolean; prehash?: boolean };\n\n/**\n * ### Design rationale for types\n *\n * * Interaction between classes from different curves should fail:\n *   `k256.Point.BASE.add(p256.Point.BASE)`\n * * For this purpose we want to use `instanceof` operator, which is fast and works during runtime\n * * Different calls of `curve()` would return different classes -\n *   `curve(params) !== curve(params)`: if somebody decided to monkey-patch their curve,\n *   it won't affect others\n *\n * TypeScript can't infer types for classes created inside a function. Classes is one instance of nominative types in TypeScript and interfaces only check for shape, so it's hard to create unique type for every function call.\n *\n * We can use generic types via some param, like curve opts, but that would:\n *     1. Enable interaction between `curve(params)` and `curve(params)` (curves of same params)\n *     which is hard to debug.\n *     2. Params can be generic and we can't enforce them to be constant value:\n *     if somebody creates curve from non-constant params,\n *     it would be allowed to interact with other curves with non-constant params\n *\n * TODO: https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#unique-symbol\n */\n\n// Instance for 3d XYZ points\nexport interface ProjPointType<T> extends Group<ProjPointType<T>> {\n  readonly px: T;\n  readonly py: T;\n  readonly pz: T;\n  get x(): T;\n  get y(): T;\n  multiply(scalar: bigint): ProjPointType<T>;\n  toAffine(iz?: T): AffinePoint<T>;\n  isTorsionFree(): boolean;\n  clearCofactor(): ProjPointType<T>;\n  assertValidity(): void;\n  hasEvenY(): boolean;\n  toRawBytes(isCompressed?: boolean): Uint8Array;\n  toHex(isCompressed?: boolean): string;\n\n  multiplyUnsafe(scalar: bigint): ProjPointType<T>;\n  multiplyAndAddUnsafe(Q: ProjPointType<T>, a: bigint, b: bigint): ProjPointType<T> | undefined;\n  _setWindowSize(windowSize: number): void;\n}\n// Static methods for 3d XYZ points\nexport interface ProjConstructor<T> extends GroupConstructor<ProjPointType<T>> {\n  new (x: T, y: T, z: T): ProjPointType<T>;\n  fromAffine(p: AffinePoint<T>): ProjPointType<T>;\n  fromHex(hex: Hex): ProjPointType<T>;\n  fromPrivateKey(privateKey: PrivKey): ProjPointType<T>;\n  normalizeZ(points: ProjPointType<T>[]): ProjPointType<T>[];\n}\n\nexport type CurvePointsType<T> = BasicWCurve<T> & {\n  // Bytes\n  fromBytes?: (bytes: Uint8Array) => AffinePoint<T>;\n  toBytes?: (c: ProjConstructor<T>, point: ProjPointType<T>, isCompressed: boolean) => Uint8Array;\n};\n\nfunction validatePointOpts<T>(curve: CurvePointsType<T>) {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    opts,\n    {\n      a: 'field',\n      b: 'field',\n    },\n    {\n      allowedPrivateKeyLengths: 'array',\n      wrapPrivateKey: 'boolean',\n      isTorsionFree: 'function',\n      clearCofactor: 'function',\n      allowInfinityPoint: 'boolean',\n      fromBytes: 'function',\n      toBytes: 'function',\n    }\n  );\n  const { endo, Fp, a } = opts;\n  if (endo) {\n    if (!Fp.eql(a, Fp.ZERO)) {\n      throw new Error('Endomorphism can only be defined for Koblitz curves that have a=0');\n    }\n    if (\n      typeof endo !== 'object' ||\n      typeof endo.beta !== 'bigint' ||\n      typeof endo.splitScalar !== 'function'\n    ) {\n      throw new Error('Expected endomorphism with beta: bigint and splitScalar: function');\n    }\n  }\n  return Object.freeze({ ...opts } as const);\n}\n\nexport type CurvePointsRes<T> = {\n  ProjectivePoint: ProjConstructor<T>;\n  normPrivateKeyToScalar: (key: PrivKey) => bigint;\n  weierstrassEquation: (x: T) => T;\n  isWithinCurveOrder: (num: bigint) => boolean;\n};\n\n// ASN.1 DER encoding utilities\nconst { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;\nexport const DER = {\n  // asn.1 DER encoding utils\n  Err: class DERErr extends Error {\n    constructor(m = '') {\n      super(m);\n    }\n  },\n  _parseInt(data: Uint8Array): { d: bigint; l: Uint8Array } {\n    const { Err: E } = DER;\n    if (data.length < 2 || data[0] !== 0x02) throw new E('Invalid signature integer tag');\n    const len = data[1];\n    const res = data.subarray(2, len + 2);\n    if (!len || res.length !== len) throw new E('Invalid signature integer: wrong length');\n    // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n    // since we always use positive integers here. It must always be empty:\n    // - add zero byte if exists\n    // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n    if (res[0] & 0b10000000) throw new E('Invalid signature integer: negative');\n    if (res[0] === 0x00 && !(res[1] & 0b10000000))\n      throw new E('Invalid signature integer: unnecessary leading zero');\n    return { d: b2n(res), l: data.subarray(len + 2) }; // d is data, l is left\n  },\n  toSig(hex: string | Uint8Array): { r: bigint; s: bigint } {\n    // parse DER signature\n    const { Err: E } = DER;\n    const data = typeof hex === 'string' ? h2b(hex) : hex;\n    if (!(data instanceof Uint8Array)) throw new Error('ui8a expected');\n    let l = data.length;\n    if (l < 2 || data[0] != 0x30) throw new E('Invalid signature tag');\n    if (data[1] !== l - 2) throw new E('Invalid signature: incorrect length');\n    const { d: r, l: sBytes } = DER._parseInt(data.subarray(2));\n    const { d: s, l: rBytesLeft } = DER._parseInt(sBytes);\n    if (rBytesLeft.length) throw new E('Invalid signature: left bytes after parsing');\n    return { r, s };\n  },\n  hexFromSig(sig: { r: bigint; s: bigint }): string {\n    // Add leading zero if first byte has negative bit enabled. More details in '_parseInt'\n    const slice = (s: string): string => (Number.parseInt(s[0], 16) & 0b1000 ? '00' + s : s);\n    const h = (num: number | bigint) => {\n      const hex = num.toString(16);\n      return hex.length & 1 ? `0${hex}` : hex;\n    };\n    const s = slice(h(sig.s));\n    const r = slice(h(sig.r));\n    const shl = s.length / 2;\n    const rhl = r.length / 2;\n    const sl = h(shl);\n    const rl = h(rhl);\n    return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;\n  },\n};\n\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\n\nexport function weierstrassPoints<T>(opts: CurvePointsType<T>) {\n  const CURVE = validatePointOpts(opts);\n  const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\n\n  const toBytes =\n    CURVE.toBytes ||\n    ((_c: ProjConstructor<T>, point: ProjPointType<T>, _isCompressed: boolean) => {\n      const a = point.toAffine();\n      return ut.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n    });\n  const fromBytes =\n    CURVE.fromBytes ||\n    ((bytes: Uint8Array) => {\n      // const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n      const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n      const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n      return { x, y };\n    });\n\n  /**\n   * y² = x³ + ax + b: Short weierstrass curve formula\n   * @returns y²\n   */\n  function weierstrassEquation(x: T): T {\n    const { a, b } = CURVE;\n    const x2 = Fp.sqr(x); // x * x\n    const x3 = Fp.mul(x2, x); // x2 * x\n    return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\n  }\n  // Validate whether the passed curve params are valid.\n  // We check if curve equation works for generator point.\n  // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\n  // ProjectivePoint class has not been initialized yet.\n  if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))\n    throw new Error('bad generator point: equation left != right');\n\n  // Valid group elements reside in range 1..n-1\n  function isWithinCurveOrder(num: bigint): boolean {\n    return typeof num === 'bigint' && _0n < num && num < CURVE.n;\n  }\n  function assertGE(num: bigint) {\n    if (!isWithinCurveOrder(num)) throw new Error('Expected valid bigint: 0 < bigint < curve.n');\n  }\n  // Validates if priv key is valid and converts it to bigint.\n  // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n  function normPrivateKeyToScalar(key: PrivKey): bigint {\n    const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;\n    if (lengths && typeof key !== 'bigint') {\n      if (key instanceof Uint8Array) key = ut.bytesToHex(key);\n      // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n      if (typeof key !== 'string' || !lengths.includes(key.length)) throw new Error('Invalid key');\n      key = key.padStart(nByteLength * 2, '0');\n    }\n    let num: bigint;\n    try {\n      num =\n        typeof key === 'bigint'\n          ? key\n          : ut.bytesToNumberBE(ensureBytes('private key', key, nByteLength));\n    } catch (error) {\n      throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);\n    }\n    if (wrapPrivateKey) num = mod.mod(num, n); // disabled by default, enabled for BLS\n    assertGE(num); // num in range [1..N-1]\n    return num;\n  }\n\n  const pointPrecomputes = new Map<Point, Point[]>();\n  function assertPrjPoint(other: unknown) {\n    if (!(other instanceof Point)) throw new Error('ProjectivePoint expected');\n  }\n  /**\n   * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\n   * Default Point works in 2d / affine coordinates: (x, y)\n   * We're doing calculations in projective, because its operations don't require costly inversion.\n   */\n  class Point implements ProjPointType<T> {\n    static readonly BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    static readonly ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n\n    constructor(readonly px: T, readonly py: T, readonly pz: T) {\n      if (px == null || !Fp.isValid(px)) throw new Error('x required');\n      if (py == null || !Fp.isValid(py)) throw new Error('y required');\n      if (pz == null || !Fp.isValid(pz)) throw new Error('z required');\n    }\n\n    // Does not validate if the point is on-curve.\n    // Use fromHex instead, or call assertValidity() later.\n    static fromAffine(p: AffinePoint<T>): Point {\n      const { x, y } = p || {};\n      if (!p || !Fp.isValid(x) || !Fp.isValid(y)) throw new Error('invalid affine point');\n      if (p instanceof Point) throw new Error('projective point not allowed');\n      const is0 = (i: T) => Fp.eql(i, Fp.ZERO);\n      // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n      if (is0(x) && is0(y)) return Point.ZERO;\n      return new Point(x, y, Fp.ONE);\n    }\n\n    get x(): T {\n      return this.toAffine().x;\n    }\n    get y(): T {\n      return this.toAffine().y;\n    }\n\n    /**\n     * Takes a bunch of Projective Points but executes only one\n     * inversion on all of them. Inversion is very slow operation,\n     * so this improves performance massively.\n     * Optimization: converts a list of projective points to a list of identical points with Z=1.\n     */\n    static normalizeZ(points: Point[]): Point[] {\n      const toInv = Fp.invertBatch(points.map((p) => p.pz));\n      return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n    }\n\n    /**\n     * Converts hash string or Uint8Array to Point.\n     * @param hex short/long ECDSA hex\n     */\n    static fromHex(hex: Hex): Point {\n      const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\n      P.assertValidity();\n      return P;\n    }\n\n    // Multiplies generator point by privateKey.\n    static fromPrivateKey(privateKey: PrivKey) {\n      return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n    }\n\n    // We calculate precomputes for elliptic curve point multiplication\n    // using windowed method. This specifies window size and\n    // stores precomputed values. Usually only base point would be precomputed.\n    _WINDOW_SIZE?: number;\n\n    // \"Private method\", don't use it directly\n    _setWindowSize(windowSize: number) {\n      this._WINDOW_SIZE = windowSize;\n      pointPrecomputes.delete(this);\n    }\n\n    // A point on curve is valid if it conforms to equation.\n    assertValidity(): void {\n      if (this.is0()) {\n        // (0, 1, 0) aka ZERO is invalid in most contexts.\n        // In BLS, ZERO can be serialized, so we allow it.\n        // (0, 0, 0) is wrong representation of ZERO and is always invalid.\n        if (CURVE.allowInfinityPoint && !Fp.is0(this.py)) return;\n        throw new Error('bad point: ZERO');\n      }\n      // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n      const { x, y } = this.toAffine();\n      // Check if x, y are valid field elements\n      if (!Fp.isValid(x) || !Fp.isValid(y)) throw new Error('bad point: x or y not FE');\n      const left = Fp.sqr(y); // y²\n      const right = weierstrassEquation(x); // x³ + ax + b\n      if (!Fp.eql(left, right)) throw new Error('bad point: equation left != right');\n      if (!this.isTorsionFree()) throw new Error('bad point: not in prime-order subgroup');\n    }\n    hasEvenY(): boolean {\n      const { y } = this.toAffine();\n      if (Fp.isOdd) return !Fp.isOdd(y);\n      throw new Error(\"Field doesn't support isOdd\");\n    }\n\n    /**\n     * Compare one point to another.\n     */\n    equals(other: Point): boolean {\n      assertPrjPoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n      const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n      return U1 && U2;\n    }\n\n    /**\n     * Flips point to one corresponding to (x, -y) in Affine coordinates.\n     */\n    negate(): Point {\n      return new Point(this.px, Fp.neg(this.py), this.pz);\n    }\n\n    // Renes-Costello-Batina exception-free doubling formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 3\n    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n    double() {\n      const { a, b } = CURVE;\n      const b3 = Fp.mul(b, _3n);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      let t0 = Fp.mul(X1, X1); // step 1\n      let t1 = Fp.mul(Y1, Y1);\n      let t2 = Fp.mul(Z1, Z1);\n      let t3 = Fp.mul(X1, Y1);\n      t3 = Fp.add(t3, t3); // step 5\n      Z3 = Fp.mul(X1, Z1);\n      Z3 = Fp.add(Z3, Z3);\n      X3 = Fp.mul(a, Z3);\n      Y3 = Fp.mul(b3, t2);\n      Y3 = Fp.add(X3, Y3); // step 10\n      X3 = Fp.sub(t1, Y3);\n      Y3 = Fp.add(t1, Y3);\n      Y3 = Fp.mul(X3, Y3);\n      X3 = Fp.mul(t3, X3);\n      Z3 = Fp.mul(b3, Z3); // step 15\n      t2 = Fp.mul(a, t2);\n      t3 = Fp.sub(t0, t2);\n      t3 = Fp.mul(a, t3);\n      t3 = Fp.add(t3, Z3);\n      Z3 = Fp.add(t0, t0); // step 20\n      t0 = Fp.add(Z3, t0);\n      t0 = Fp.add(t0, t2);\n      t0 = Fp.mul(t0, t3);\n      Y3 = Fp.add(Y3, t0);\n      t2 = Fp.mul(Y1, Z1); // step 25\n      t2 = Fp.add(t2, t2);\n      t0 = Fp.mul(t2, t3);\n      X3 = Fp.sub(X3, t0);\n      Z3 = Fp.mul(t2, t1);\n      Z3 = Fp.add(Z3, Z3); // step 30\n      Z3 = Fp.add(Z3, Z3);\n      return new Point(X3, Y3, Z3);\n    }\n\n    // Renes-Costello-Batina exception-free addition formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 1\n    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n    add(other: Point): Point {\n      assertPrjPoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      const a = CURVE.a;\n      const b3 = Fp.mul(CURVE.b, _3n);\n      let t0 = Fp.mul(X1, X2); // step 1\n      let t1 = Fp.mul(Y1, Y2);\n      let t2 = Fp.mul(Z1, Z2);\n      let t3 = Fp.add(X1, Y1);\n      let t4 = Fp.add(X2, Y2); // step 5\n      t3 = Fp.mul(t3, t4);\n      t4 = Fp.add(t0, t1);\n      t3 = Fp.sub(t3, t4);\n      t4 = Fp.add(X1, Z1);\n      let t5 = Fp.add(X2, Z2); // step 10\n      t4 = Fp.mul(t4, t5);\n      t5 = Fp.add(t0, t2);\n      t4 = Fp.sub(t4, t5);\n      t5 = Fp.add(Y1, Z1);\n      X3 = Fp.add(Y2, Z2); // step 15\n      t5 = Fp.mul(t5, X3);\n      X3 = Fp.add(t1, t2);\n      t5 = Fp.sub(t5, X3);\n      Z3 = Fp.mul(a, t4);\n      X3 = Fp.mul(b3, t2); // step 20\n      Z3 = Fp.add(X3, Z3);\n      X3 = Fp.sub(t1, Z3);\n      Z3 = Fp.add(t1, Z3);\n      Y3 = Fp.mul(X3, Z3);\n      t1 = Fp.add(t0, t0); // step 25\n      t1 = Fp.add(t1, t0);\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.mul(b3, t4);\n      t1 = Fp.add(t1, t2);\n      t2 = Fp.sub(t0, t2); // step 30\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.add(t4, t2);\n      t0 = Fp.mul(t1, t4);\n      Y3 = Fp.add(Y3, t0);\n      t0 = Fp.mul(t5, t4); // step 35\n      X3 = Fp.mul(t3, X3);\n      X3 = Fp.sub(X3, t0);\n      t0 = Fp.mul(t3, t1);\n      Z3 = Fp.mul(t5, Z3);\n      Z3 = Fp.add(Z3, t0); // step 40\n      return new Point(X3, Y3, Z3);\n    }\n\n    subtract(other: Point) {\n      return this.add(other.negate());\n    }\n\n    private is0() {\n      return this.equals(Point.ZERO);\n    }\n    private wNAF(n: bigint): { p: Point; f: Point } {\n      return wnaf.wNAFCached(this, pointPrecomputes, n, (comp: Point[]) => {\n        const toInv = Fp.invertBatch(comp.map((p) => p.pz));\n        return comp.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n      });\n    }\n\n    /**\n     * Non-constant-time multiplication. Uses double-and-add algorithm.\n     * It's faster, but should only be used when you don't care about\n     * an exposed private key e.g. sig verification, which works over *public* keys.\n     */\n    multiplyUnsafe(n: bigint): Point {\n      const I = Point.ZERO;\n      if (n === _0n) return I;\n      assertGE(n); // Will throw on 0\n      if (n === _1n) return this;\n      const { endo } = CURVE;\n      if (!endo) return wnaf.unsafeLadder(this, n);\n\n      // Apply endomorphism\n      let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n      let k1p = I;\n      let k2p = I;\n      let d: Point = this;\n      while (k1 > _0n || k2 > _0n) {\n        if (k1 & _1n) k1p = k1p.add(d);\n        if (k2 & _1n) k2p = k2p.add(d);\n        d = d.double();\n        k1 >>= _1n;\n        k2 >>= _1n;\n      }\n      if (k1neg) k1p = k1p.negate();\n      if (k2neg) k2p = k2p.negate();\n      k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n      return k1p.add(k2p);\n    }\n\n    /**\n     * Constant time multiplication.\n     * Uses wNAF method. Windowed method may be 10% faster,\n     * but takes 2x longer to generate and consumes 2x memory.\n     * Uses precomputes when available.\n     * Uses endomorphism for Koblitz curves.\n     * @param scalar by which the point would be multiplied\n     * @returns New point\n     */\n    multiply(scalar: bigint): Point {\n      assertGE(scalar);\n      let n = scalar;\n      let point: Point, fake: Point; // Fake point is used to const-time mult\n      const { endo } = CURVE;\n      if (endo) {\n        const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n        let { p: k1p, f: f1p } = this.wNAF(k1);\n        let { p: k2p, f: f2p } = this.wNAF(k2);\n        k1p = wnaf.constTimeNegate(k1neg, k1p);\n        k2p = wnaf.constTimeNegate(k2neg, k2p);\n        k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n        point = k1p.add(k2p);\n        fake = f1p.add(f2p);\n      } else {\n        const { p, f } = this.wNAF(n);\n        point = p;\n        fake = f;\n      }\n      // Normalize `z` for both points, but return only real one\n      return Point.normalizeZ([point, fake])[0];\n    }\n\n    /**\n     * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n     * Not using Strauss-Shamir trick: precomputation tables are faster.\n     * The trick could be useful if both P and Q are not G (not in our case).\n     * @returns non-zero affine point\n     */\n    multiplyAndAddUnsafe(Q: Point, a: bigint, b: bigint): Point | undefined {\n      const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n      const mul = (\n        P: Point,\n        a: bigint // Select faster multiply() method\n      ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));\n      const sum = mul(this, a).add(mul(Q, b));\n      return sum.is0() ? undefined : sum;\n    }\n\n    // Converts Projective point to affine (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    // (x, y, z) ∋ (x=x/z, y=y/z)\n    toAffine(iz?: T): AffinePoint<T> {\n      const { px: x, py: y, pz: z } = this;\n      const is0 = this.is0();\n      // If invZ was 0, we return zero point. However we still want to execute\n      // all operations, so we replace invZ with a random number, 1.\n      if (iz == null) iz = is0 ? Fp.ONE : Fp.inv(z);\n      const ax = Fp.mul(x, iz);\n      const ay = Fp.mul(y, iz);\n      const zz = Fp.mul(z, iz);\n      if (is0) return { x: Fp.ZERO, y: Fp.ZERO };\n      if (!Fp.eql(zz, Fp.ONE)) throw new Error('invZ was invalid');\n      return { x: ax, y: ay };\n    }\n    isTorsionFree(): boolean {\n      const { h: cofactor, isTorsionFree } = CURVE;\n      if (cofactor === _1n) return true; // No subgroups, always torsion-free\n      if (isTorsionFree) return isTorsionFree(Point, this);\n      throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n    }\n    clearCofactor(): Point {\n      const { h: cofactor, clearCofactor } = CURVE;\n      if (cofactor === _1n) return this; // Fast-path\n      if (clearCofactor) return clearCofactor(Point, this) as Point;\n      return this.multiplyUnsafe(CURVE.h);\n    }\n\n    toRawBytes(isCompressed = true): Uint8Array {\n      this.assertValidity();\n      return toBytes(Point, this, isCompressed);\n    }\n\n    toHex(isCompressed = true): string {\n      return ut.bytesToHex(this.toRawBytes(isCompressed));\n    }\n  }\n  const _bits = CURVE.nBitLength;\n  const wnaf = wNAF(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n  // Validate if generator point is on curve\n  return {\n    CURVE,\n    ProjectivePoint: Point as ProjConstructor<T>,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder,\n  };\n}\n\n// Instance\nexport interface SignatureType {\n  readonly r: bigint;\n  readonly s: bigint;\n  readonly recovery?: number;\n  assertValidity(): void;\n  addRecoveryBit(recovery: number): RecoveredSignatureType;\n  hasHighS(): boolean;\n  normalizeS(): SignatureType;\n  recoverPublicKey(msgHash: Hex): ProjPointType<bigint>;\n  toCompactRawBytes(): Uint8Array;\n  toCompactHex(): string;\n  // DER-encoded\n  toDERRawBytes(isCompressed?: boolean): Uint8Array;\n  toDERHex(isCompressed?: boolean): string;\n}\nexport type RecoveredSignatureType = SignatureType & {\n  readonly recovery: number;\n};\n// Static methods\nexport type SignatureConstructor = {\n  new (r: bigint, s: bigint): SignatureType;\n  fromCompact(hex: Hex): SignatureType;\n  fromDER(hex: Hex): SignatureType;\n};\ntype SignatureLike = { r: bigint; s: bigint };\n\nexport type PubKey = Hex | ProjPointType<bigint>;\n\nexport type CurveType = BasicWCurve<bigint> & {\n  hash: CHash; // CHash not FHash because we need outputLen for DRBG\n  hmac: HmacFnSync;\n  randomBytes: (bytesLength?: number) => Uint8Array;\n  lowS?: boolean;\n  bits2int?: (bytes: Uint8Array) => bigint;\n  bits2int_modN?: (bytes: Uint8Array) => bigint;\n};\n\nfunction validateOpts(curve: CurveType) {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    opts,\n    {\n      hash: 'hash',\n      hmac: 'function',\n      randomBytes: 'function',\n    },\n    {\n      bits2int: 'function',\n      bits2int_modN: 'function',\n      lowS: 'boolean',\n    }\n  );\n  return Object.freeze({ lowS: true, ...opts } as const);\n}\n\nexport type CurveFn = {\n  CURVE: ReturnType<typeof validateOpts>;\n  getPublicKey: (privateKey: PrivKey, isCompressed?: boolean) => Uint8Array;\n  getSharedSecret: (privateA: PrivKey, publicB: Hex, isCompressed?: boolean) => Uint8Array;\n  sign: (msgHash: Hex, privKey: PrivKey, opts?: SignOpts) => RecoveredSignatureType;\n  verify: (signature: Hex | SignatureLike, msgHash: Hex, publicKey: Hex, opts?: VerOpts) => boolean;\n  ProjectivePoint: ProjConstructor<bigint>;\n  Signature: SignatureConstructor;\n  utils: {\n    normPrivateKeyToScalar: (key: PrivKey) => bigint;\n    isValidPrivateKey(privateKey: PrivKey): boolean;\n    randomPrivateKey: () => Uint8Array;\n    precompute: (windowSize?: number, point?: ProjPointType<bigint>) => ProjPointType<bigint>;\n  };\n};\n\nexport function weierstrass(curveDef: CurveType): CurveFn {\n  const CURVE = validateOpts(curveDef) as ReturnType<typeof validateOpts>;\n  const { Fp, n: CURVE_ORDER } = CURVE;\n  const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n  const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n\n  function isValidFieldElement(num: bigint): boolean {\n    return _0n < num && num < Fp.ORDER; // 0 is banned since it's not invertible FE\n  }\n  function modN(a: bigint) {\n    return mod.mod(a, CURVE_ORDER);\n  }\n  function invN(a: bigint) {\n    return mod.invert(a, CURVE_ORDER);\n  }\n\n  const {\n    ProjectivePoint: Point,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder,\n  } = weierstrassPoints({\n    ...CURVE,\n    toBytes(_c, point, isCompressed: boolean): Uint8Array {\n      const a = point.toAffine();\n      const x = Fp.toBytes(a.x);\n      const cat = ut.concatBytes;\n      if (isCompressed) {\n        return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n      } else {\n        return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n      }\n    },\n    fromBytes(bytes: Uint8Array) {\n      const len = bytes.length;\n      const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // this.assertValidity() is done inside of fromHex\n      if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n        const x = ut.bytesToNumberBE(tail);\n        if (!isValidFieldElement(x)) throw new Error('Point is not on curve');\n        const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n        let y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n        const isYOdd = (y & _1n) === _1n;\n        // ECDSA\n        const isHeadOdd = (head & 1) === 1;\n        if (isHeadOdd !== isYOdd) y = Fp.neg(y);\n        return { x, y };\n      } else if (len === uncompressedLen && head === 0x04) {\n        const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n        const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n        return { x, y };\n      } else {\n        throw new Error(\n          `Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`\n        );\n      }\n    },\n  });\n  const numToNByteStr = (num: bigint): string =>\n    ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));\n\n  function isBiggerThanHalfOrder(number: bigint) {\n    const HALF = CURVE_ORDER >> _1n;\n    return number > HALF;\n  }\n\n  function normalizeS(s: bigint) {\n    return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n  }\n  // slice bytes num\n  const slcNum = (b: Uint8Array, from: number, to: number) => ut.bytesToNumberBE(b.slice(from, to));\n\n  /**\n   * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n   */\n  class Signature implements SignatureType {\n    constructor(readonly r: bigint, readonly s: bigint, readonly recovery?: number) {\n      this.assertValidity();\n    }\n\n    // pair (bytes of r, bytes of s)\n    static fromCompact(hex: Hex) {\n      const l = CURVE.nByteLength;\n      hex = ensureBytes('compactSignature', hex, l * 2);\n      return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n    }\n\n    // DER encoded ECDSA signature\n    // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n    static fromDER(hex: Hex) {\n      const { r, s } = DER.toSig(ensureBytes('DER', hex));\n      return new Signature(r, s);\n    }\n\n    assertValidity(): void {\n      // can use assertGE here\n      if (!isWithinCurveOrder(this.r)) throw new Error('r must be 0 < r < CURVE.n');\n      if (!isWithinCurveOrder(this.s)) throw new Error('s must be 0 < s < CURVE.n');\n    }\n\n    addRecoveryBit(recovery: number): RecoveredSignature {\n      return new Signature(this.r, this.s, recovery) as RecoveredSignature;\n    }\n\n    recoverPublicKey(msgHash: Hex): typeof Point.BASE {\n      const { r, s, recovery: rec } = this;\n      const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\n      if (rec == null || ![0, 1, 2, 3].includes(rec)) throw new Error('recovery id invalid');\n      const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n      if (radj >= Fp.ORDER) throw new Error('recovery id 2 or 3 invalid');\n      const prefix = (rec & 1) === 0 ? '02' : '03';\n      const R = Point.fromHex(prefix + numToNByteStr(radj));\n      const ir = invN(radj); // r^-1\n      const u1 = modN(-h * ir); // -hr^-1\n      const u2 = modN(s * ir); // sr^-1\n      const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n      if (!Q) throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n      Q.assertValidity();\n      return Q;\n    }\n\n    // Signatures should be low-s, to prevent malleability.\n    hasHighS(): boolean {\n      return isBiggerThanHalfOrder(this.s);\n    }\n\n    normalizeS() {\n      return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n    }\n\n    // DER-encoded\n    toDERRawBytes() {\n      return ut.hexToBytes(this.toDERHex());\n    }\n    toDERHex() {\n      return DER.hexFromSig({ r: this.r, s: this.s });\n    }\n\n    // padded bytes of r, then padded bytes of s\n    toCompactRawBytes() {\n      return ut.hexToBytes(this.toCompactHex());\n    }\n    toCompactHex() {\n      return numToNByteStr(this.r) + numToNByteStr(this.s);\n    }\n  }\n  type RecoveredSignature = Signature & { recovery: number };\n\n  const utils = {\n    isValidPrivateKey(privateKey: PrivKey) {\n      try {\n        normPrivateKeyToScalar(privateKey);\n        return true;\n      } catch (error) {\n        return false;\n      }\n    },\n    normPrivateKeyToScalar: normPrivateKeyToScalar,\n\n    /**\n     * Produces cryptographically secure private key from random of size\n     * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n     */\n    randomPrivateKey: (): Uint8Array => {\n      const length = mod.getMinHashLength(CURVE.n);\n      return mod.mapHashToField(CURVE.randomBytes(length), CURVE.n);\n    },\n\n    /**\n     * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n     * Allows to massively speed-up `point.multiply(scalar)`.\n     * @returns cached point\n     * @example\n     * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n     * fast.multiply(privKey); // much faster ECDH now\n     */\n    precompute(windowSize = 8, point = Point.BASE): typeof Point.BASE {\n      point._setWindowSize(windowSize);\n      point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n      return point;\n    },\n  };\n\n  /**\n   * Computes public key for a private key. Checks for validity of the private key.\n   * @param privateKey private key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns Public key, full when isCompressed=false; short when isCompressed=true\n   */\n  function getPublicKey(privateKey: PrivKey, isCompressed = true): Uint8Array {\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n  }\n\n  /**\n   * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n   */\n  function isProbPub(item: PrivKey | PubKey): boolean {\n    const arr = item instanceof Uint8Array;\n    const str = typeof item === 'string';\n    const len = (arr || str) && (item as Hex).length;\n    if (arr) return len === compressedLen || len === uncompressedLen;\n    if (str) return len === 2 * compressedLen || len === 2 * uncompressedLen;\n    if (item instanceof Point) return true;\n    return false;\n  }\n\n  /**\n   * ECDH (Elliptic Curve Diffie Hellman).\n   * Computes shared public key from private key and public key.\n   * Checks: 1) private key validity 2) shared key is on-curve.\n   * Does NOT hash the result.\n   * @param privateA private key\n   * @param publicB different public key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns shared public key\n   */\n  function getSharedSecret(privateA: PrivKey, publicB: Hex, isCompressed = true): Uint8Array {\n    if (isProbPub(privateA)) throw new Error('first arg must be private key');\n    if (!isProbPub(publicB)) throw new Error('second arg must be public key');\n    const b = Point.fromHex(publicB); // check for being on-curve\n    return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n  }\n\n  // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n  // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n  // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n  // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n  const bits2int =\n    CURVE.bits2int ||\n    function (bytes: Uint8Array): bigint {\n      // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n      // for some cases, since bytes.length * 8 is not actual bitLength.\n      const num = ut.bytesToNumberBE(bytes); // check for == u8 done here\n      const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\n      return delta > 0 ? num >> BigInt(delta) : num;\n    };\n  const bits2int_modN =\n    CURVE.bits2int_modN ||\n    function (bytes: Uint8Array): bigint {\n      return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n    };\n  // NOTE: pads output with zero as per spec\n  const ORDER_MASK = ut.bitMask(CURVE.nBitLength);\n  /**\n   * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n   */\n  function int2octets(num: bigint): Uint8Array {\n    if (typeof num !== 'bigint') throw new Error('bigint expected');\n    if (!(_0n <= num && num < ORDER_MASK))\n      throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);\n    // works with order, can have different size than numToField!\n    return ut.numberToBytesBE(num, CURVE.nByteLength);\n  }\n\n  // Steps A, D of RFC6979 3.2\n  // Creates RFC6979 seed; converts msg/privKey to numbers.\n  // Used only in sign, not in verify.\n  // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.\n  // Also it can be bigger for P224 + SHA256\n  function prepSig(msgHash: Hex, privateKey: PrivKey, opts = defaultSigOpts) {\n    if (['recovered', 'canonical'].some((k) => k in opts))\n      throw new Error('sign() legacy options not supported');\n    const { hash, randomBytes } = CURVE;\n    let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n    if (lowS == null) lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n    msgHash = ensureBytes('msgHash', msgHash);\n    if (prehash) msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\n\n    // We can't later call bits2octets, since nested bits2int is broken for curves\n    // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n    // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n    const h1int = bits2int_modN(msgHash);\n    const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n    const seedArgs = [int2octets(d), int2octets(h1int)];\n    // extraEntropy. RFC6979 3.6: additional k' (optional).\n    if (ent != null) {\n      // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n      const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n      seedArgs.push(ensureBytes('extraEntropy', e)); // check for being bytes\n    }\n    const seed = ut.concatBytes(...seedArgs); // Step D of RFC6979 3.2\n    const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n    // Converts signature params into point w r/s, checks result for validity.\n    function k2sig(kBytes: Uint8Array): RecoveredSignature | undefined {\n      // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n      const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n      if (!isWithinCurveOrder(k)) return; // Important: all mod() calls here must be done over N\n      const ik = invN(k); // k^-1 mod n\n      const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n      const r = modN(q.x); // r = q.x mod n\n      if (r === _0n) return;\n      // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n      // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n      // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n      const s = modN(ik * modN(m + r * d)); // Not using blinding here\n      if (s === _0n) return;\n      let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n      let normS = s;\n      if (lowS && isBiggerThanHalfOrder(s)) {\n        normS = normalizeS(s); // if lowS was passed, ensure s is always\n        recovery ^= 1; // // in the bottom half of N\n      }\n      return new Signature(r, normS, recovery) as RecoveredSignature; // use normS, not s\n    }\n    return { seed, k2sig };\n  }\n  const defaultSigOpts: SignOpts = { lowS: CURVE.lowS, prehash: false };\n  const defaultVerOpts: VerOpts = { lowS: CURVE.lowS, prehash: false };\n\n  /**\n   * Signs message hash with a private key.\n   * ```\n   * sign(m, d, k) where\n   *   (x, y) = G × k\n   *   r = x mod n\n   *   s = (m + dr)/k mod n\n   * ```\n   * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n   * @param privKey private key\n   * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n   * @returns signature with recovery param\n   */\n  function sign(msgHash: Hex, privKey: PrivKey, opts = defaultSigOpts): RecoveredSignature {\n    const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n    const C = CURVE;\n    const drbg = ut.createHmacDrbg<RecoveredSignature>(C.hash.outputLen, C.nByteLength, C.hmac);\n    return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n  }\n\n  // Enable precomputes. Slows down first publicKey computation by 20ms.\n  Point.BASE._setWindowSize(8);\n  // utils.precompute(8, ProjectivePoint.BASE)\n\n  /**\n   * Verifies a signature against message hash and public key.\n   * Rejects lowS signatures by default: to override,\n   * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n   *\n   * ```\n   * verify(r, s, h, P) where\n   *   U1 = hs^-1 mod n\n   *   U2 = rs^-1 mod n\n   *   R = U1⋅G - U2⋅P\n   *   mod(R.x, n) == r\n   * ```\n   */\n  function verify(\n    signature: Hex | SignatureLike,\n    msgHash: Hex,\n    publicKey: Hex,\n    opts = defaultVerOpts\n  ): boolean {\n    const sg = signature;\n    msgHash = ensureBytes('msgHash', msgHash);\n    publicKey = ensureBytes('publicKey', publicKey);\n    if ('strict' in opts) throw new Error('options.strict was renamed to lowS');\n    const { lowS, prehash } = opts;\n\n    let _sig: Signature | undefined = undefined;\n    let P: ProjPointType<bigint>;\n    try {\n      if (typeof sg === 'string' || sg instanceof Uint8Array) {\n        // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n        // Since DER can also be 2*nByteLength bytes, we check for it first.\n        try {\n          _sig = Signature.fromDER(sg);\n        } catch (derError) {\n          if (!(derError instanceof DER.Err)) throw derError;\n          _sig = Signature.fromCompact(sg);\n        }\n      } else if (typeof sg === 'object' && typeof sg.r === 'bigint' && typeof sg.s === 'bigint') {\n        const { r, s } = sg;\n        _sig = new Signature(r, s);\n      } else {\n        throw new Error('PARSE');\n      }\n      P = Point.fromHex(publicKey);\n    } catch (error) {\n      if ((error as Error).message === 'PARSE')\n        throw new Error(`signature must be Signature instance, Uint8Array or hex string`);\n      return false;\n    }\n    if (lowS && _sig.hasHighS()) return false;\n    if (prehash) msgHash = CURVE.hash(msgHash);\n    const { r, s } = _sig;\n    const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n    const is = invN(s); // s^-1\n    const u1 = modN(h * is); // u1 = hs^-1 mod n\n    const u2 = modN(r * is); // u2 = rs^-1 mod n\n    const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\n    if (!R) return false;\n    const v = modN(R.x);\n    return v === r;\n  }\n  return {\n    CURVE,\n    getPublicKey,\n    getSharedSecret,\n    sign,\n    verify,\n    ProjectivePoint: Point,\n    Signature,\n    utils,\n  };\n}\n\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nexport function SWUFpSqrtRatio<T>(Fp: mod.IField<T>, Z: T) {\n  // Generic implementation\n  const q = Fp.ORDER;\n  let l = _0n;\n  for (let o = q - _1n; o % _2n === _0n; o /= _2n) l += _1n;\n  const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n  // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n  // 2n ** c1 == 2n << (c1-1)\n  const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n  const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n  const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n  const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n  const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n  const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n  const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n  const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n  let sqrtRatio = (u: T, v: T): { isValid: boolean; value: T } => {\n    let tv1 = c6; // 1. tv1 = c6\n    let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n    let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n    tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n    let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n    tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n    tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n    tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n    tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n    let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n    tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n    let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n    tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n    tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n    tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n    tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n    // 17. for i in (c1, c1 - 1, ..., 2):\n    for (let i = c1; i > _1n; i--) {\n      let tv5 = i - _2n; // 18.    tv5 = i - 2\n      tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n      let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n      const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n      tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n      tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n      tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n      tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n      tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n    }\n    return { isValid: isQR, value: tv3 };\n  };\n  if (Fp.ORDER % _4n === _3n) {\n    // sqrt_ratio_3mod4(u, v)\n    const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n    const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n    sqrtRatio = (u: T, v: T) => {\n      let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n      const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n      tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n      let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n      y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n      const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n      const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n      const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n      let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n      return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n    };\n  }\n  // No curves uses that\n  // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n  return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nexport function mapToCurveSimpleSWU<T>(\n  Fp: mod.IField<T>,\n  opts: {\n    A: T;\n    B: T;\n    Z: T;\n  }\n) {\n  mod.validateField(Fp);\n  if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\n    throw new Error('mapToCurveSimpleSWU: invalid opts');\n  const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n  if (!Fp.isOdd) throw new Error('Fp.isOdd is not implemented!');\n  // Input: u, an element of F.\n  // Output: (x, y), a point on E.\n  return (u: T): { x: T; y: T } => {\n    // prettier-ignore\n    let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n    tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n    tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n    tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n    tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n    tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n    tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n    tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n    tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n    tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n    tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n    tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n    tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n    tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n    tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n    tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n    tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n    x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n    const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n    y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n    y = Fp.mul(y, value); // 20.   y = y * y1\n    x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n    y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n    const e1 = Fp.isOdd!(u) === Fp.isOdd!(y); // 23.  e1 = sgn0(u) == sgn0(y)\n    y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n    x = Fp.div(x, tv4); // 25.   x = x / tv4\n    return { x, y };\n  };\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { hmac } from '@noble/hashes/hmac';\nimport { concatBytes, randomBytes } from '@noble/hashes/utils';\nimport { weierstrass, CurveType } from './abstract/weierstrass.js';\nimport { CHash } from './abstract/utils.js';\n\n// connects noble-curves to noble-hashes\nexport function getHash(hash: CHash) {\n  return {\n    hash,\n    hmac: (key: Uint8Array, ...msgs: Uint8Array[]) => hmac(hash, key, concatBytes(...msgs)),\n    randomBytes,\n  };\n}\n// Same API as @noble/hashes, with ability to create curve with custom hash\ntype CurveDef = Readonly<Omit<CurveType, 'hash' | 'hmac' | 'randomBytes'>>;\nexport function createCurve(curveDef: CurveDef, defHash: CHash) {\n  const create = (hash: CHash) => weierstrass({ ...curveDef, ...getHash(hash) });\n  return Object.freeze({ ...create(defHash), create });\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha256';\nimport { randomBytes } from '@noble/hashes/utils';\nimport { Field, mod, pow2 } from './abstract/modular.js';\nimport { ProjPointType as PointType, mapToCurveSimpleSWU } from './abstract/weierstrass.js';\nimport type { Hex, PrivKey } from './abstract/utils.js';\nimport { bytesToNumberBE, concatBytes, ensureBytes, numberToBytesBE } from './abstract/utils.js';\nimport { createHasher, isogenyMap } from './abstract/hash-to-curve.js';\nimport { createCurve } from './_shortw_utils.js';\n\nconst secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');\nconst secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst divNearest = (a: bigint, b: bigint) => (a + b / _2n) / b;\n\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y: bigint): bigint {\n  const P = secp256k1P;\n  // prettier-ignore\n  const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n  // prettier-ignore\n  const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n  const b2 = (y * y * y) % P; // x^3, 11\n  const b3 = (b2 * b2 * y) % P; // x^7\n  const b6 = (pow2(b3, _3n, P) * b3) % P;\n  const b9 = (pow2(b6, _3n, P) * b3) % P;\n  const b11 = (pow2(b9, _2n, P) * b2) % P;\n  const b22 = (pow2(b11, _11n, P) * b11) % P;\n  const b44 = (pow2(b22, _22n, P) * b22) % P;\n  const b88 = (pow2(b44, _44n, P) * b44) % P;\n  const b176 = (pow2(b88, _88n, P) * b88) % P;\n  const b220 = (pow2(b176, _44n, P) * b44) % P;\n  const b223 = (pow2(b220, _3n, P) * b3) % P;\n  const t1 = (pow2(b223, _23n, P) * b22) % P;\n  const t2 = (pow2(t1, _6n, P) * b2) % P;\n  const root = pow2(t2, _2n, P);\n  if (!Fp.eql(Fp.sqr(root), y)) throw new Error('Cannot find square root');\n  return root;\n}\n\nconst Fp = Field(secp256k1P, undefined, undefined, { sqrt: sqrtMod });\n\nexport const secp256k1 = createCurve(\n  {\n    a: BigInt(0), // equation params: a, b\n    b: BigInt(7), // Seem to be rigid: bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975\n    Fp, // Field's prime: 2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n\n    n: secp256k1N, // Curve order, total count of valid points in the field\n    // Base point (x, y) aka generator point\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    h: BigInt(1), // Cofactor\n    lowS: true, // Allow only low-S signatures by default in sign() and verify()\n    /**\n     * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.\n     * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n     * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n     * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066\n     */\n    endo: {\n      beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n      splitScalar: (k: bigint) => {\n        const n = secp256k1N;\n        const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n        const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n        const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n        const b2 = a1;\n        const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\n\n        const c1 = divNearest(b2 * k, n);\n        const c2 = divNearest(-b1 * k, n);\n        let k1 = mod(k - c1 * a1 - c2 * a2, n);\n        let k2 = mod(-c1 * b1 - c2 * b2, n);\n        const k1neg = k1 > POW_2_128;\n        const k2neg = k2 > POW_2_128;\n        if (k1neg) k1 = n - k1;\n        if (k2neg) k2 = n - k2;\n        if (k1 > POW_2_128 || k2 > POW_2_128) {\n          throw new Error('splitScalar: Endomorphism failed, k=' + k);\n        }\n        return { k1neg, k1, k2neg, k2 };\n      },\n    },\n  },\n  sha256\n);\n\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\nconst _0n = BigInt(0);\nconst fe = (x: bigint) => typeof x === 'bigint' && _0n < x && x < secp256k1P;\nconst ge = (x: bigint) => typeof x === 'bigint' && _0n < x && x < secp256k1N;\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES: { [tag: string]: Uint8Array } = {};\nfunction taggedHash(tag: string, ...messages: Uint8Array[]): Uint8Array {\n  let tagP = TAGGED_HASH_PREFIXES[tag];\n  if (tagP === undefined) {\n    const tagH = sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n    tagP = concatBytes(tagH, tagH);\n    TAGGED_HASH_PREFIXES[tag] = tagP;\n  }\n  return sha256(concatBytes(tagP, ...messages));\n}\n\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = (point: PointType<bigint>) => point.toRawBytes(true).slice(1);\nconst numTo32b = (n: bigint) => numberToBytesBE(n, 32);\nconst modP = (x: bigint) => mod(x, secp256k1P);\nconst modN = (x: bigint) => mod(x, secp256k1N);\nconst Point = secp256k1.ProjectivePoint;\nconst GmulAdd = (Q: PointType<bigint>, a: bigint, b: bigint) =>\n  Point.BASE.multiplyAndAddUnsafe(Q, a, b);\n\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv: PrivKey) {\n  let d_ = secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n  let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n  const scalar = p.hasEvenY() ? d_ : modN(-d_);\n  return { scalar: scalar, bytes: pointToBytes(p) };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x: bigint): PointType<bigint> {\n  if (!fe(x)) throw new Error('bad x: need 0 < x < p'); // Fail if x ≥ p.\n  const xx = modP(x * x);\n  const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n  let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n  if (y % _2n !== _0n) y = modP(-y); // Return the unique point P such that x(P) = x and\n  const p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n  p.assertValidity();\n  return p;\n}\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args: Uint8Array[]): bigint {\n  return modN(bytesToNumberBE(taggedHash('BIP0340/challenge', ...args)));\n}\n\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(privateKey: Hex): Uint8Array {\n  return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(\n  message: Hex,\n  privateKey: PrivKey,\n  auxRand: Hex = randomBytes(32)\n): Uint8Array {\n  const m = ensureBytes('message', message);\n  const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\n  const a = ensureBytes('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n  const t = numTo32b(d ^ bytesToNumberBE(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n  const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n  const k_ = modN(bytesToNumberBE(rand)); // Let k' = int(rand) mod n\n  if (k_ === _0n) throw new Error('sign failed: k is zero'); // Fail if k' = 0.\n  const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n  const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n  const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n  sig.set(rx, 0);\n  sig.set(numTo32b(modN(k + e * d)), 32);\n  // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n  if (!schnorrVerify(sig, m, px)) throw new Error('sign: Invalid signature produced');\n  return sig;\n}\n\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature: Hex, message: Hex, publicKey: Hex): boolean {\n  const sig = ensureBytes('signature', signature, 64);\n  const m = ensureBytes('message', message);\n  const pub = ensureBytes('publicKey', publicKey, 32);\n  try {\n    const P = lift_x(bytesToNumberBE(pub)); // P = lift_x(int(pk)); fail if that fails\n    const r = bytesToNumberBE(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n    if (!fe(r)) return false;\n    const s = bytesToNumberBE(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n    if (!ge(s)) return false;\n    const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n    const R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P\n    if (!R || !R.hasEvenY() || R.toAffine().x !== r) return false; // -eP == (n-e)P\n    return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n  } catch (error) {\n    return false;\n  }\n}\n\nexport const schnorr = /* @__PURE__ */ (() => ({\n  getPublicKey: schnorrGetPublicKey,\n  sign: schnorrSign,\n  verify: schnorrVerify,\n  utils: {\n    randomPrivateKey: secp256k1.utils.randomPrivateKey,\n    lift_x,\n    pointToBytes,\n    numberToBytesBE,\n    bytesToNumberBE,\n    taggedHash,\n    mod,\n  },\n}))();\n\nconst isoMap = /* @__PURE__ */ (() =>\n  isogenyMap(\n    Fp,\n    [\n      // xNum\n      [\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\n        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\n        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\n      ],\n      // xDen\n      [\n        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\n        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n      ],\n      // yNum\n      [\n        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\n        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\n        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\n        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\n      ],\n      // yDen\n      [\n        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\n        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\n        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n      ],\n    ].map((i) => i.map((j) => BigInt(j))) as [bigint[], bigint[], bigint[], bigint[]]\n  ))();\nconst mapSWU = /* @__PURE__ */ (() =>\n  mapToCurveSimpleSWU(Fp, {\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n    B: BigInt('1771'),\n    Z: Fp.create(BigInt('-11')),\n  }))();\nconst htf = /* @__PURE__ */ (() =>\n  createHasher(\n    secp256k1.ProjectivePoint,\n    (scalars: bigint[]) => {\n      const { x, y } = mapSWU(Fp.create(scalars[0]));\n      return isoMap(x, y);\n    },\n    {\n      DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n      encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n      p: Fp.ORDER,\n      m: 1,\n      k: 128,\n      expand: 'xmd',\n      hash: sha256,\n    }\n  ))();\nexport const hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\n","import {ed25519} from '@noble/curves/ed25519';\n\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\ntype Ed25519SecretKey = Uint8Array;\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Ed25519SecretKey;\n}\n\nexport const generatePrivateKey = ed25519.utils.randomPrivateKey;\nexport const generateKeypair = (): Ed25519Keypair => {\n  const privateScalar = ed25519.utils.randomPrivateKey();\n  const publicKey = getPublicKey(privateScalar);\n  const secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey,\n    secretKey,\n  };\n};\nexport const getPublicKey = ed25519.getPublicKey;\nexport function isOnCurve(publicKey: Uint8Array): boolean {\n  try {\n    ed25519.ExtendedPoint.fromHex(publicKey);\n    return true;\n  } catch {\n    return false;\n  }\n}\nexport const sign = (\n  message: Parameters<typeof ed25519.sign>[0],\n  secretKey: Ed25519SecretKey,\n) => ed25519.sign(message, secretKey.slice(0, 32));\nexport const verify = ed25519.verify;\n","import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport {sha256} from '@noble/hashes/sha256';\n\nimport {isOnCurve} from './utils/ed25519';\nimport {Struct, SOLANA_SCHEMA} from './utils/borsh-schema';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Size of public key in bytes\n */\nexport const PUBLIC_KEY_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n// local counter used by PublicKey.unique()\nlet uniquePublicKeyCounter = 1;\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > PUBLIC_KEY_LENGTH) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Returns a unique PublicKey for tests and benchmarks using a counter\n   */\n  static unique(): PublicKey {\n    const key = new PublicKey(uniquePublicKeyCounter);\n    uniquePublicKeyCounter += 1;\n    return new PublicKey(key.toBuffer());\n  }\n\n  /**\n   * Default public key value. The base58-encoded string representation is all ones (as seen below)\n   * The underlying BN number is 32 bytes that are all zeros\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key in big endian\n   */\n  toBytes(): Uint8Array {\n    const buf = this.toBuffer();\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n  }\n\n  /**\n   * Return the Buffer representation of the public key in big endian\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return `PublicKey(${this.toString()})`;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): PublicKey {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    if (isOnCurve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link createProgramAddressSync} instead\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): [PublicKey, number] {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link findProgramAddressSync} instead\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData: PublicKeyInitData): boolean {\n    const pubkey = new PublicKey(pubkeyData);\n    return isOnCurve(pubkey.toBytes());\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nexport const VERSION_PREFIX_MASK = 0x7f;\n\nexport const SIGNATURE_LENGTH_IN_BYTES = 64;\n","export class TransactionExpiredBlockheightExceededError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(\n  TransactionExpiredBlockheightExceededError.prototype,\n  'name',\n  {\n    value: 'TransactionExpiredBlockheightExceededError',\n  },\n);\n\nexport class TransactionExpiredTimeoutError extends Error {\n  signature: string;\n\n  constructor(signature: string, timeoutSeconds: number) {\n    super(\n      `Transaction was not confirmed in ${timeoutSeconds.toFixed(\n        2,\n      )} seconds. It is ` +\n        'unknown if it succeeded or failed. Check signature ' +\n        `${signature} using the Solana Explorer or CLI tools.`,\n    );\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError',\n});\n\nexport class TransactionExpiredNonceInvalidError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: the nonce is no longer valid.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredNonceInvalidError.prototype, 'name', {\n  value: 'TransactionExpiredNonceInvalidError',\n});\n","import {LoadedAddresses} from '../connection';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {MessageCompiledInstruction} from './index';\n\nexport type AccountKeysFromLookups = LoadedAddresses;\n\nexport class MessageAccountKeys {\n  staticAccountKeys: Array<PublicKey>;\n  accountKeysFromLookups?: AccountKeysFromLookups;\n\n  constructor(\n    staticAccountKeys: Array<PublicKey>,\n    accountKeysFromLookups?: AccountKeysFromLookups,\n  ) {\n    this.staticAccountKeys = staticAccountKeys;\n    this.accountKeysFromLookups = accountKeysFromLookups;\n  }\n\n  keySegments(): Array<Array<PublicKey>> {\n    const keySegments = [this.staticAccountKeys];\n    if (this.accountKeysFromLookups) {\n      keySegments.push(this.accountKeysFromLookups.writable);\n      keySegments.push(this.accountKeysFromLookups.readonly);\n    }\n    return keySegments;\n  }\n\n  get(index: number): PublicKey | undefined {\n    for (const keySegment of this.keySegments()) {\n      if (index < keySegment.length) {\n        return keySegment[index];\n      } else {\n        index -= keySegment.length;\n      }\n    }\n    return;\n  }\n\n  get length(): number {\n    return this.keySegments().flat().length;\n  }\n\n  compileInstructions(\n    instructions: Array<TransactionInstruction>,\n  ): Array<MessageCompiledInstruction> {\n    // Bail early if any account indexes would overflow a u8\n    const U8_MAX = 255;\n    if (this.length > U8_MAX + 1) {\n      throw new Error('Account index overflow encountered during compilation');\n    }\n\n    const keyIndexMap = new Map();\n    this.keySegments()\n      .flat()\n      .forEach((key, index) => {\n        keyIndexMap.set(key.toBase58(), index);\n      });\n\n    const findKeyIndex = (key: PublicKey) => {\n      const keyIndex = keyIndexMap.get(key.toBase58());\n      if (keyIndex === undefined)\n        throw new Error(\n          'Encountered an unknown instruction account key during compilation',\n        );\n      return keyIndex;\n    };\n\n    return instructions.map((instruction): MessageCompiledInstruction => {\n      return {\n        programIdIndex: findKeyIndex(instruction.programId),\n        accountKeyIndexes: instruction.keys.map(meta =>\n          findKeyIndex(meta.pubkey),\n        ),\n        data: instruction.data,\n      };\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {VoteAuthorizeWithSeedArgs} from './programs/vote';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a signature\n */\nexport const signature = (property: string = 'signature') => {\n  return BufferLayout.blob(64, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64') => {\n  return BufferLayout.blob(8, property);\n};\n\ninterface IRustStringShim\n  extends Omit<\n    BufferLayout.Structure<\n      Readonly<{\n        length: number;\n        lengthPadding: number;\n        chars: Uint8Array;\n      }>\n    >,\n    'decode' | 'encode' | 'replicate'\n  > {\n  alloc: (str: string) => number;\n  decode: (b: Uint8Array, offset?: number) => string;\n  encode: (str: string, b: Uint8Array, offset?: number) => number;\n  replicate: (property: string) => this;\n}\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (\n  property: string = 'string',\n): BufferLayout.Layout<string> => {\n  const rsl = BufferLayout.struct<\n    Readonly<{\n      length?: number;\n      lengthPadding?: number;\n      chars: Uint8Array;\n    }>\n  >(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl as unknown as IRustStringShim;\n\n  rslShim.decode = (b: Uint8Array, offset?: number) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str: string, b: Uint8Array, offset?: number) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = (str: string) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct<\n    Readonly<{\n      staker: Uint8Array;\n      withdrawer: Uint8Array;\n    }>\n  >([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct<\n    Readonly<{\n      custodian: Uint8Array;\n      epoch: number;\n      unixTimestamp: number;\n    }>\n  >(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct<\n    Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>\n  >(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteAuthorizeWithSeedArgs object\n */\nexport const voteAuthorizeWithSeedArgs = (\n  property: string = 'voteAuthorizeWithSeedArgs',\n) => {\n  return BufferLayout.struct<VoteAuthorizeWithSeedArgs>(\n    [\n      BufferLayout.u32('voteAuthorizationType'),\n      publicKey('currentAuthorityDerivedKeyOwnerPubkey'),\n      rustString('currentAuthorityDerivedKeySeed'),\n      publicKey('newAuthorized'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  const getItemAlloc = (item: any): number => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    } else if ('fields' in item) {\n      // This is a `Structure` whose size needs to be recursively measured.\n      return getAlloc({layout: item}, fields[item.property]);\n    }\n    // Couldn't determine allocated size of layout\n    return 0;\n  };\n\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    alloc += getItemAlloc(item);\n  });\n\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import {MessageHeader, MessageAddressTableLookup} from './index';\nimport {AccountKeysFromLookups} from './account-keys';\nimport {AddressLookupTableAccount} from '../programs';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {PublicKey} from '../publickey';\n\nexport type CompiledKeyMeta = {\n  isSigner: boolean;\n  isWritable: boolean;\n  isInvoked: boolean;\n};\n\ntype KeyMetaMap = Map<string, CompiledKeyMeta>;\n\nexport class CompiledKeys {\n  payer: PublicKey;\n  keyMetaMap: KeyMetaMap;\n\n  constructor(payer: PublicKey, keyMetaMap: KeyMetaMap) {\n    this.payer = payer;\n    this.keyMetaMap = keyMetaMap;\n  }\n\n  static compile(\n    instructions: Array<TransactionInstruction>,\n    payer: PublicKey,\n  ): CompiledKeys {\n    const keyMetaMap: KeyMetaMap = new Map();\n    const getOrInsertDefault = (pubkey: PublicKey): CompiledKeyMeta => {\n      const address = pubkey.toBase58();\n      let keyMeta = keyMetaMap.get(address);\n      if (keyMeta === undefined) {\n        keyMeta = {\n          isSigner: false,\n          isWritable: false,\n          isInvoked: false,\n        };\n        keyMetaMap.set(address, keyMeta);\n      }\n      return keyMeta;\n    };\n\n    const payerKeyMeta = getOrInsertDefault(payer);\n    payerKeyMeta.isSigner = true;\n    payerKeyMeta.isWritable = true;\n\n    for (const ix of instructions) {\n      getOrInsertDefault(ix.programId).isInvoked = true;\n      for (const accountMeta of ix.keys) {\n        const keyMeta = getOrInsertDefault(accountMeta.pubkey);\n        keyMeta.isSigner ||= accountMeta.isSigner;\n        keyMeta.isWritable ||= accountMeta.isWritable;\n      }\n    }\n\n    return new CompiledKeys(payer, keyMetaMap);\n  }\n\n  getMessageComponents(): [MessageHeader, Array<PublicKey>] {\n    const mapEntries = [...this.keyMetaMap.entries()];\n    assert(mapEntries.length <= 256, 'Max static account keys length exceeded');\n\n    const writableSigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && meta.isWritable,\n    );\n    const readonlySigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && !meta.isWritable,\n    );\n    const writableNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && meta.isWritable,\n    );\n    const readonlyNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && !meta.isWritable,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: writableSigners.length + readonlySigners.length,\n      numReadonlySignedAccounts: readonlySigners.length,\n      numReadonlyUnsignedAccounts: readonlyNonSigners.length,\n    };\n\n    // sanity checks\n    {\n      assert(\n        writableSigners.length > 0,\n        'Expected at least one writable signer key',\n      );\n      const [payerAddress] = writableSigners[0];\n      assert(\n        payerAddress === this.payer.toBase58(),\n        'Expected first writable signer key to be the fee payer',\n      );\n    }\n\n    const staticAccountKeys = [\n      ...writableSigners.map(([address]) => new PublicKey(address)),\n      ...readonlySigners.map(([address]) => new PublicKey(address)),\n      ...writableNonSigners.map(([address]) => new PublicKey(address)),\n      ...readonlyNonSigners.map(([address]) => new PublicKey(address)),\n    ];\n\n    return [header, staticAccountKeys];\n  }\n\n  extractTableLookup(\n    lookupTable: AddressLookupTableAccount,\n  ): [MessageAddressTableLookup, AccountKeysFromLookups] | undefined {\n    const [writableIndexes, drainedWritableKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && keyMeta.isWritable,\n      );\n    const [readonlyIndexes, drainedReadonlyKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && !keyMeta.isWritable,\n      );\n\n    // Don't extract lookup if no keys were found\n    if (writableIndexes.length === 0 && readonlyIndexes.length === 0) {\n      return;\n    }\n\n    return [\n      {\n        accountKey: lookupTable.key,\n        writableIndexes,\n        readonlyIndexes,\n      },\n      {\n        writable: drainedWritableKeys,\n        readonly: drainedReadonlyKeys,\n      },\n    ];\n  }\n\n  /** @internal */\n  private drainKeysFoundInLookupTable(\n    lookupTableEntries: Array<PublicKey>,\n    keyMetaFilter: (keyMeta: CompiledKeyMeta) => boolean,\n  ): [Array<number>, Array<PublicKey>] {\n    const lookupTableIndexes = new Array();\n    const drainedKeys = new Array();\n\n    for (const [address, keyMeta] of this.keyMetaMap.entries()) {\n      if (keyMetaFilter(keyMeta)) {\n        const key = new PublicKey(address);\n        const lookupTableIndex = lookupTableEntries.findIndex(entry =>\n          entry.equals(key),\n        );\n        if (lookupTableIndex >= 0) {\n          assert(lookupTableIndex < 256, 'Max lookup table index exceeded');\n          lookupTableIndexes.push(lookupTableIndex);\n          drainedKeys.push(key);\n          this.keyMetaMap.delete(address);\n        }\n      }\n    }\n\n    return [lookupTableIndexes, drainedKeys];\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport type {Blockhash} from '../blockhash';\nimport * as Layout from '../layout';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {TransactionInstruction} from '../transaction';\nimport {CompiledKeys} from './compiled-keys';\nimport {MessageAccountKeys} from './account-keys';\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[] | PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nexport type CompileLegacyArgs = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n};\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  get version(): 'legacy' {\n    return 'legacy';\n  }\n\n  get staticAccountKeys(): Array<PublicKey> {\n    return this.accountKeys;\n  }\n\n  get compiledInstructions(): Array<MessageCompiledInstruction> {\n    return this.instructions.map(\n      (ix): MessageCompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      }),\n    );\n  }\n\n  get addressTableLookups(): Array<MessageAddressTableLookup> {\n    return [];\n  }\n\n  getAccountKeys(): MessageAccountKeys {\n    return new MessageAccountKeys(this.staticAccountKeys);\n  }\n\n  static compile(args: CompileLegacyArgs): Message {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys);\n    const instructions = accountKeys.compileInstructions(args.instructions).map(\n      (ix: MessageCompiledInstruction): CompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accounts: ix.accountKeyIndexes,\n        data: bs58.encode(ix.data),\n      }),\n    );\n    return new Message({\n      header,\n      accountKeys: staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      instructions,\n    });\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = this.accountKeys.length - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct<\n        Readonly<{\n          data: number[];\n          dataLength: Uint8Array;\n          keyIndices: number[];\n          keyIndicesCount: Uint8Array;\n          programIdIndex: number;\n        }>\n      >([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct<\n      Readonly<{\n        keyCount: Uint8Array;\n        keys: Uint8Array[];\n        numReadonlySignedAccounts: Uint8Array;\n        numReadonlyUnsignedAccounts: Uint8Array;\n        numRequiredSignatures: Uint8Array;\n        recentBlockhash: Uint8Array;\n      }>\n    >([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift()!;\n    if (\n      numRequiredSignatures !==\n      (numRequiredSignatures & VERSION_PREFIX_MASK)\n    ) {\n      throw new Error(\n        'Versioned messages must be deserialized with VersionedMessage.deserialize()',\n      );\n    }\n\n    const numReadonlySignedAccounts = byteArray.shift()!;\n    const numReadonlyUnsignedAccounts = byteArray.shift()!;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      accountKeys.push(new PublicKey(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n    byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift()!;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","import bs58 from 'bs58';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../layout';\nimport {Blockhash} from '../blockhash';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport assert from '../utils/assert';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {TransactionInstruction} from '../transaction';\nimport {AddressLookupTableAccount} from '../programs';\nimport {CompiledKeys} from './compiled-keys';\nimport {AccountKeysFromLookups, MessageAccountKeys} from './account-keys';\n\n/**\n * Message constructor arguments\n */\nexport type MessageV0Args = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** The static account keys used by this transaction */\n  staticAccountKeys: PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  compiledInstructions: MessageCompiledInstruction[];\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  addressTableLookups: MessageAddressTableLookup[];\n};\n\nexport type CompileV0Args = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n  addressLookupTableAccounts?: Array<AddressLookupTableAccount>;\n};\n\nexport type GetAccountKeysArgs =\n  | {\n      accountKeysFromLookups?: AccountKeysFromLookups | null;\n    }\n  | {\n      addressLookupTableAccounts?: AddressLookupTableAccount[] | null;\n    };\n\nexport class MessageV0 {\n  header: MessageHeader;\n  staticAccountKeys: Array<PublicKey>;\n  recentBlockhash: Blockhash;\n  compiledInstructions: Array<MessageCompiledInstruction>;\n  addressTableLookups: Array<MessageAddressTableLookup>;\n\n  constructor(args: MessageV0Args) {\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n\n  get version(): 0 {\n    return 0;\n  }\n\n  get numAccountKeysFromLookups(): number {\n    let count = 0;\n    for (const lookup of this.addressTableLookups) {\n      count += lookup.readonlyIndexes.length + lookup.writableIndexes.length;\n    }\n    return count;\n  }\n\n  getAccountKeys(args?: GetAccountKeysArgs): MessageAccountKeys {\n    let accountKeysFromLookups: AccountKeysFromLookups | undefined;\n    if (\n      args &&\n      'accountKeysFromLookups' in args &&\n      args.accountKeysFromLookups\n    ) {\n      if (\n        this.numAccountKeysFromLookups !=\n        args.accountKeysFromLookups.writable.length +\n          args.accountKeysFromLookups.readonly.length\n      ) {\n        throw new Error(\n          'Failed to get account keys because of a mismatch in the number of account keys from lookups',\n        );\n      }\n      accountKeysFromLookups = args.accountKeysFromLookups;\n    } else if (\n      args &&\n      'addressLookupTableAccounts' in args &&\n      args.addressLookupTableAccounts\n    ) {\n      accountKeysFromLookups = this.resolveAddressTableLookups(\n        args.addressLookupTableAccounts,\n      );\n    } else if (this.addressTableLookups.length > 0) {\n      throw new Error(\n        'Failed to get account keys because address table lookups were not resolved',\n      );\n    }\n    return new MessageAccountKeys(\n      this.staticAccountKeys,\n      accountKeysFromLookups,\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    const numStaticAccountKeys = this.staticAccountKeys.length;\n    if (index >= numStaticAccountKeys) {\n      const lookupAccountKeysIndex = index - numStaticAccountKeys;\n      const numWritableLookupAccountKeys = this.addressTableLookups.reduce(\n        (count, lookup) => count + lookup.writableIndexes.length,\n        0,\n      );\n      return lookupAccountKeysIndex < numWritableLookupAccountKeys;\n    } else if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = numStaticAccountKeys - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  resolveAddressTableLookups(\n    addressLookupTableAccounts: AddressLookupTableAccount[],\n  ): AccountKeysFromLookups {\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: [],\n      readonly: [],\n    };\n\n    for (const tableLookup of this.addressTableLookups) {\n      const tableAccount = addressLookupTableAccounts.find(account =>\n        account.key.equals(tableLookup.accountKey),\n      );\n      if (!tableAccount) {\n        throw new Error(\n          `Failed to find address lookup table account for table key ${tableLookup.accountKey.toBase58()}`,\n        );\n      }\n\n      for (const index of tableLookup.writableIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.writable.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n\n      for (const index of tableLookup.readonlyIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.readonly.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n    }\n\n    return accountKeysFromLookups;\n  }\n\n  static compile(args: CompileV0Args): MessageV0 {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n\n    const addressTableLookups = new Array<MessageAddressTableLookup>();\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: new Array(),\n      readonly: new Array(),\n    };\n    const lookupTableAccounts = args.addressLookupTableAccounts || [];\n    for (const lookupTable of lookupTableAccounts) {\n      const extractResult = compiledKeys.extractTableLookup(lookupTable);\n      if (extractResult !== undefined) {\n        const [addressTableLookup, {writable, readonly}] = extractResult;\n        addressTableLookups.push(addressTableLookup);\n        accountKeysFromLookups.writable.push(...writable);\n        accountKeysFromLookups.readonly.push(...readonly);\n      }\n    }\n\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(\n      staticAccountKeys,\n      accountKeysFromLookups,\n    );\n    const compiledInstructions = accountKeys.compileInstructions(\n      args.instructions,\n    );\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n\n  serialize(): Uint8Array {\n    const encodedStaticAccountKeysLength = Array<number>();\n    shortvec.encodeLength(\n      encodedStaticAccountKeysLength,\n      this.staticAccountKeys.length,\n    );\n\n    const serializedInstructions = this.serializeInstructions();\n    const encodedInstructionsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedInstructionsLength,\n      this.compiledInstructions.length,\n    );\n\n    const serializedAddressTableLookups = this.serializeAddressTableLookups();\n    const encodedAddressTableLookupsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedAddressTableLookupsLength,\n      this.addressTableLookups.length,\n    );\n\n    const messageLayout = BufferLayout.struct<{\n      prefix: number;\n      header: MessageHeader;\n      staticAccountKeysLength: Uint8Array;\n      staticAccountKeys: Array<Uint8Array>;\n      recentBlockhash: Uint8Array;\n      instructionsLength: Uint8Array;\n      serializedInstructions: Uint8Array;\n      addressTableLookupsLength: Uint8Array;\n      serializedAddressTableLookups: Uint8Array;\n    }>([\n      BufferLayout.u8('prefix'),\n      BufferLayout.struct<MessageHeader>(\n        [\n          BufferLayout.u8('numRequiredSignatures'),\n          BufferLayout.u8('numReadonlySignedAccounts'),\n          BufferLayout.u8('numReadonlyUnsignedAccounts'),\n        ],\n        'header',\n      ),\n      BufferLayout.blob(\n        encodedStaticAccountKeysLength.length,\n        'staticAccountKeysLength',\n      ),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        this.staticAccountKeys.length,\n        'staticAccountKeys',\n      ),\n      Layout.publicKey('recentBlockhash'),\n      BufferLayout.blob(encodedInstructionsLength.length, 'instructionsLength'),\n      BufferLayout.blob(\n        serializedInstructions.length,\n        'serializedInstructions',\n      ),\n      BufferLayout.blob(\n        encodedAddressTableLookupsLength.length,\n        'addressTableLookupsLength',\n      ),\n      BufferLayout.blob(\n        serializedAddressTableLookups.length,\n        'serializedAddressTableLookups',\n      ),\n    ]);\n\n    const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n    const MESSAGE_VERSION_0_PREFIX = 1 << 7;\n    const serializedMessageLength = messageLayout.encode(\n      {\n        prefix: MESSAGE_VERSION_0_PREFIX,\n        header: this.header,\n        staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n        staticAccountKeys: this.staticAccountKeys.map(key => key.toBytes()),\n        recentBlockhash: bs58.decode(this.recentBlockhash),\n        instructionsLength: new Uint8Array(encodedInstructionsLength),\n        serializedInstructions,\n        addressTableLookupsLength: new Uint8Array(\n          encodedAddressTableLookupsLength,\n        ),\n        serializedAddressTableLookups,\n      },\n      serializedMessage,\n    );\n    return serializedMessage.slice(0, serializedMessageLength);\n  }\n\n  private serializeInstructions(): Uint8Array {\n    let serializedLength = 0;\n    const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n    for (const instruction of this.compiledInstructions) {\n      const encodedAccountKeyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedAccountKeyIndexesLength,\n        instruction.accountKeyIndexes.length,\n      );\n\n      const encodedDataLength = Array<number>();\n      shortvec.encodeLength(encodedDataLength, instruction.data.length);\n\n      const instructionLayout = BufferLayout.struct<{\n        programIdIndex: number;\n        encodedAccountKeyIndexesLength: Uint8Array;\n        accountKeyIndexes: number[];\n        encodedDataLength: Uint8Array;\n        data: Uint8Array;\n      }>([\n        BufferLayout.u8('programIdIndex'),\n        BufferLayout.blob(\n          encodedAccountKeyIndexesLength.length,\n          'encodedAccountKeyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          instruction.accountKeyIndexes.length,\n          'accountKeyIndexes',\n        ),\n        BufferLayout.blob(encodedDataLength.length, 'encodedDataLength'),\n        BufferLayout.blob(instruction.data.length, 'data'),\n      ]);\n\n      serializedLength += instructionLayout.encode(\n        {\n          programIdIndex: instruction.programIdIndex,\n          encodedAccountKeyIndexesLength: new Uint8Array(\n            encodedAccountKeyIndexesLength,\n          ),\n          accountKeyIndexes: instruction.accountKeyIndexes,\n          encodedDataLength: new Uint8Array(encodedDataLength),\n          data: instruction.data,\n        },\n        serializedInstructions,\n        serializedLength,\n      );\n    }\n\n    return serializedInstructions.slice(0, serializedLength);\n  }\n\n  private serializeAddressTableLookups(): Uint8Array {\n    let serializedLength = 0;\n    const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n    for (const lookup of this.addressTableLookups) {\n      const encodedWritableIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedWritableIndexesLength,\n        lookup.writableIndexes.length,\n      );\n\n      const encodedReadonlyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedReadonlyIndexesLength,\n        lookup.readonlyIndexes.length,\n      );\n\n      const addressTableLookupLayout = BufferLayout.struct<{\n        accountKey: Uint8Array;\n        encodedWritableIndexesLength: Uint8Array;\n        writableIndexes: number[];\n        encodedReadonlyIndexesLength: Uint8Array;\n        readonlyIndexes: number[];\n      }>([\n        Layout.publicKey('accountKey'),\n        BufferLayout.blob(\n          encodedWritableIndexesLength.length,\n          'encodedWritableIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.writableIndexes.length,\n          'writableIndexes',\n        ),\n        BufferLayout.blob(\n          encodedReadonlyIndexesLength.length,\n          'encodedReadonlyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.readonlyIndexes.length,\n          'readonlyIndexes',\n        ),\n      ]);\n\n      serializedLength += addressTableLookupLayout.encode(\n        {\n          accountKey: lookup.accountKey.toBytes(),\n          encodedWritableIndexesLength: new Uint8Array(\n            encodedWritableIndexesLength,\n          ),\n          writableIndexes: lookup.writableIndexes,\n          encodedReadonlyIndexesLength: new Uint8Array(\n            encodedReadonlyIndexesLength,\n          ),\n          readonlyIndexes: lookup.readonlyIndexes,\n        },\n        serializedAddressTableLookups,\n        serializedLength,\n      );\n    }\n\n    return serializedAddressTableLookups.slice(0, serializedLength);\n  }\n\n  static deserialize(serializedMessage: Uint8Array): MessageV0 {\n    let byteArray = [...serializedMessage];\n\n    const prefix = byteArray.shift() as number;\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n    assert(\n      prefix !== maskedPrefix,\n      `Expected versioned message but received legacy message`,\n    );\n\n    const version = maskedPrefix;\n    assert(\n      version === 0,\n      `Expected versioned message with version 0 but found version ${version}`,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: byteArray.shift() as number,\n      numReadonlySignedAccounts: byteArray.shift() as number,\n      numReadonlyUnsignedAccounts: byteArray.shift() as number,\n    };\n\n    const staticAccountKeys = [];\n    const staticAccountKeysLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < staticAccountKeysLength; i++) {\n      staticAccountKeys.push(\n        new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH)),\n      );\n    }\n\n    const recentBlockhash = bs58.encode(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    const compiledInstructions: MessageCompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountKeyIndexesLength = shortvec.decodeLength(byteArray);\n      const accountKeyIndexes = byteArray.splice(0, accountKeyIndexesLength);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const data = new Uint8Array(byteArray.splice(0, dataLength));\n      compiledInstructions.push({\n        programIdIndex,\n        accountKeyIndexes,\n        data,\n      });\n    }\n\n    const addressTableLookupsCount = shortvec.decodeLength(byteArray);\n    const addressTableLookups: MessageAddressTableLookup[] = [];\n    for (let i = 0; i < addressTableLookupsCount; i++) {\n      const accountKey = new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n      const writableIndexesLength = shortvec.decodeLength(byteArray);\n      const writableIndexes = byteArray.splice(0, writableIndexesLength);\n      const readonlyIndexesLength = shortvec.decodeLength(byteArray);\n      const readonlyIndexes = byteArray.splice(0, readonlyIndexesLength);\n      addressTableLookups.push({\n        accountKey,\n        writableIndexes,\n        readonlyIndexes,\n      });\n    }\n\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n}\n","import {VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {Message} from './legacy';\nimport {MessageV0} from './v0';\n\nexport type VersionedMessage = Message | MessageV0;\n// eslint-disable-next-line no-redeclare\nexport const VersionedMessage = {\n  deserializeMessageVersion(serializedMessage: Uint8Array): 'legacy' | number {\n    const prefix = serializedMessage[0];\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n\n    // if the highest bit of the prefix is not set, the message is not versioned\n    if (maskedPrefix === prefix) {\n      return 'legacy';\n    }\n\n    // the lower 7 bits of the prefix indicate the message version\n    return maskedPrefix;\n  },\n\n  deserialize: (serializedMessage: Uint8Array): VersionedMessage => {\n    const version =\n      VersionedMessage.deserializeMessageVersion(serializedMessage);\n    if (version === 'legacy') {\n      return Message.from(serializedMessage);\n    }\n\n    if (version === 0) {\n      return MessageV0.deserialize(serializedMessage);\n    } else {\n      throw new Error(\n        `Transaction message version ${version} deserialization is not supported`,\n      );\n    }\n  },\n};\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {PACKET_DATA_SIZE, SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport {Connection} from '../connection';\nimport {Message} from '../message';\nimport {PublicKey} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport invariant from '../utils/assert';\nimport type {Signer} from '../keypair';\nimport type {Blockhash} from '../blockhash';\nimport type {CompiledInstruction} from '../message';\nimport {sign, verify} from '../utils/ed25519';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\nexport const enum TransactionStatus {\n  BLOCKHEIGHT_EXCEEDED,\n  PROCESSED,\n  TIMED_OUT,\n  NONCE_INVALID,\n}\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * @internal\n */\nexport interface TransactionInstructionJSON {\n  keys: {\n    pubkey: string;\n    isSigner: boolean;\n    isWritable: boolean;\n  }[];\n  programId: string;\n  data: number[];\n}\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionInstructionJSON {\n    return {\n      keys: this.keys.map(({pubkey, isSigner, isWritable}) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable,\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data],\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionCtorFields_DEPRECATED = {\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash;\n};\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\nexport type TransactionCtorFields = TransactionCtorFields_DEPRECATED;\n\n/**\n * Blockhash-based transactions have a lifetime that are defined by\n * the blockhash they include. Any transaction whose blockhash is\n * too old will be rejected.\n */\nexport type TransactionBlockhashCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  blockhash: Blockhash;\n  /** the last block chain can advance to before tx is declared expired */\n  lastValidBlockHeight: number;\n};\n\n/**\n * Use these options to construct a durable nonce transaction.\n */\nexport type TransactionNonceCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  minContextSlot: number;\n  nonceInfo: NonceInformation;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * @internal\n */\nexport interface TransactionJSON {\n  recentBlockhash: string | null;\n  feePayer: string | null;\n  nonceInfo: {\n    nonce: string;\n    nonceInstruction: TransactionInstructionJSON;\n  } | null;\n  instructions: TransactionInstructionJSON[];\n  signers: string[];\n}\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   *\n   * @returns {Buffer | null} Buffer of payer's signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * the last block chain can advance to before tx is declared expired\n   * */\n  lastValidBlockHeight?: number;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * If this is a nonce transaction this represents the minimum slot from which\n   * to evaluate if the nonce has advanced when attempting to confirm the\n   * transaction. This protects against a case where the transaction confirmation\n   * logic loads the nonce account from an old slot and assumes the mismatch in\n   * nonce value implies that the nonce has been advanced.\n   */\n  minNonceContextSlot?: number;\n\n  /**\n   * @internal\n   */\n  _message?: Message;\n\n  /**\n   * @internal\n   */\n  _json?: TransactionJSON;\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n  constructor(opts?: TransactionBlockhashCtor);\n\n  // Construct a transaction using a durable nonce\n  constructor(opts?: TransactionNonceCtor);\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n  constructor(opts?: TransactionCtorFields_DEPRECATED);\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(\n    opts?:\n      | TransactionBlockhashCtor\n      | TransactionNonceCtor\n      | TransactionCtorFields_DEPRECATED,\n  ) {\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'nonceInfo')) {\n      const {minContextSlot, nonceInfo} = opts as TransactionNonceCtor;\n      this.minNonceContextSlot = minContextSlot;\n      this.nonceInfo = nonceInfo;\n    } else if (\n      Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')\n    ) {\n      const {blockhash, lastValidBlockHeight} =\n        opts as TransactionBlockhashCtor;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {recentBlockhash, nonceInfo} =\n        opts as TransactionCtorFields_DEPRECATED;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionJSON {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo\n        ? {\n            nonce: this.nonceInfo.nonce,\n            nonceInstruction: this.nonceInfo.nonceInstruction.toJSON(),\n          }\n        : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({publicKey}) => {\n        return publicKey.toJSON();\n      }),\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   *\n   * @param {Array< Transaction | TransactionInstruction | TransactionInstructionCtorFields >} items - Instructions to add to the Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    if (\n      this._message &&\n      JSON.stringify(this.toJSON()) === JSON.stringify(this._json)\n    ) {\n      return this._message;\n    }\n\n    let recentBlockhash;\n    let instructions: TransactionInstruction[];\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner =\n          uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      const options = {\n        localeMatcher: 'best fit',\n        usage: 'sort',\n        sensitivity: 'variant',\n        ignorePunctuation: false,\n        numeric: false,\n        caseFirst: 'lower',\n      } as Intl.CollatorOptions;\n      return x.pubkey\n        .toBase58()\n        .localeCompare(y.pubkey.toBase58(), 'en', options);\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions: CompiledInstruction[] = instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    compiledInstructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   *\n   * @param {Connection} connection Connection to RPC Endpoint.\n   *\n   * @returns {Promise<number | null>} The estimated fee for the transaction\n   */\n  async getEstimatedFee(connection: Connection): Promise<number | null> {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   *\n   * @param {Array<Signer>} signers Array of signers that will sign the transaction\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   *\n   * @param {Array<Signer>} signers Array of signers that will sign the transaction\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = sign(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * @param {PublicKey} pubkey Public key that will be added to the transaction.\n   * @param {Buffer} signature An externally created signature to add to the transaction.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a Transaction\n   * Optional parameter specifies if we're expecting a fully signed Transaction or a partially signed one.\n   * If no boolean is provided, we expect a fully signed Transaction by default.\n   *\n   * @param {boolean} [requireAllSignatures=true] Require a fully signed Transaction\n   */\n  verifySignatures(requireAllSignatures?: boolean): boolean {\n    return this._verifySignatures(\n      this.serializeMessage(),\n      requireAllSignatures === undefined ? true : requireAllSignatures,\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(\n    signData: Uint8Array,\n    requireAllSignatures: boolean,\n  ): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (!verify(signature, signData, publicKey.toBytes())) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   *\n   * @param {Buffer} [config] Config of transaction.\n   *\n   * @returns {Buffer} Signature of transaction in wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   *\n   * @param {Buffer | Uint8Array | Array<number>} buffer Signature of wire Transaction\n   *\n   * @returns {Transaction} Transaction associated with the signature\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH_IN_BYTES);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   *\n   * @param {Message} message Message of transaction\n   * @param {Array<string>} signatures List of signatures to assign to the transaction\n   *\n   * @returns {Transaction} The populated Transaction\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n\n    return transaction;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {Signer} from '../keypair';\nimport assert from '../utils/assert';\nimport {VersionedMessage} from '../message/versioned';\nimport {SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport * as Layout from '../layout';\nimport {sign} from '../utils/ed25519';\nimport {PublicKey} from '../publickey';\n\nexport type TransactionVersion = 'legacy' | 0;\n\n/**\n * Versioned transaction class\n */\nexport class VersionedTransaction {\n  signatures: Array<Uint8Array>;\n  message: VersionedMessage;\n\n  get version(): TransactionVersion {\n    return this.message.version;\n  }\n\n  constructor(message: VersionedMessage, signatures?: Array<Uint8Array>) {\n    if (signatures !== undefined) {\n      assert(\n        signatures.length === message.header.numRequiredSignatures,\n        'Expected signatures length to be equal to the number of required signatures',\n      );\n      this.signatures = signatures;\n    } else {\n      const defaultSignatures = [];\n      for (let i = 0; i < message.header.numRequiredSignatures; i++) {\n        defaultSignatures.push(new Uint8Array(SIGNATURE_LENGTH_IN_BYTES));\n      }\n      this.signatures = defaultSignatures;\n    }\n    this.message = message;\n  }\n\n  serialize(): Uint8Array {\n    const serializedMessage = this.message.serialize();\n\n    const encodedSignaturesLength = Array<number>();\n    shortvec.encodeLength(encodedSignaturesLength, this.signatures.length);\n\n    const transactionLayout = BufferLayout.struct<{\n      encodedSignaturesLength: Uint8Array;\n      signatures: Array<Uint8Array>;\n      serializedMessage: Uint8Array;\n    }>([\n      BufferLayout.blob(\n        encodedSignaturesLength.length,\n        'encodedSignaturesLength',\n      ),\n      BufferLayout.seq(\n        Layout.signature(),\n        this.signatures.length,\n        'signatures',\n      ),\n      BufferLayout.blob(serializedMessage.length, 'serializedMessage'),\n    ]);\n\n    const serializedTransaction = new Uint8Array(2048);\n    const serializedTransactionLength = transactionLayout.encode(\n      {\n        encodedSignaturesLength: new Uint8Array(encodedSignaturesLength),\n        signatures: this.signatures,\n        serializedMessage,\n      },\n      serializedTransaction,\n    );\n\n    return serializedTransaction.slice(0, serializedTransactionLength);\n  }\n\n  static deserialize(serializedTransaction: Uint8Array): VersionedTransaction {\n    let byteArray = [...serializedTransaction];\n\n    const signatures = [];\n    const signaturesLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < signaturesLength; i++) {\n      signatures.push(\n        new Uint8Array(byteArray.splice(0, SIGNATURE_LENGTH_IN_BYTES)),\n      );\n    }\n\n    const message = VersionedMessage.deserialize(new Uint8Array(byteArray));\n    return new VersionedTransaction(message, signatures);\n  }\n\n  sign(signers: Array<Signer>) {\n    const messageData = this.message.serialize();\n    const signerPubkeys = this.message.staticAccountKeys.slice(\n      0,\n      this.message.header.numRequiredSignatures,\n    );\n    for (const signer of signers) {\n      const signerIndex = signerPubkeys.findIndex(pubkey =>\n        pubkey.equals(signer.publicKey),\n      );\n      assert(\n        signerIndex >= 0,\n        `Cannot sign with non signer key ${signer.publicKey.toBase58()}`,\n      );\n      this.signatures[signerIndex] = sign(messageData, signer.secretKey);\n    }\n  }\n\n  addSignature(publicKey: PublicKey, signature: Uint8Array) {\n    assert(signature.byteLength === 64, 'Signature must be 64 bytes long');\n    const signerPubkeys = this.message.staticAccountKeys.slice(\n      0,\n      this.message.header.numRequiredSignatures,\n    );\n    const signerIndex = signerPubkeys.findIndex(pubkey =>\n      pubkey.equals(publicKey),\n    );\n    assert(\n      signerIndex >= 0,\n      `Can not add signature; \\`${publicKey.toBase58()}\\` is not required to sign this transaction`,\n    );\n    this.signatures[signerIndex] = signature;\n  }\n}\n","// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\nexport const NUM_TICKS_PER_SECOND = 160;\n\n/**\n * @internal\n */\nexport const DEFAULT_TICKS_PER_SLOT = 64;\n\n/**\n * @internal\n */\nexport const NUM_SLOTS_PER_SECOND =\n  NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n\n/**\n * @internal\n */\nexport const MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","import {Connection, SignatureResult} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions &\n    Readonly<{\n      // A signal that, when aborted, cancels any outstanding transaction confirmation operations\n      abortSignal?: AbortSignal;\n    }>,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  let status: SignatureResult;\n  if (\n    transaction.recentBlockhash != null &&\n    transaction.lastValidBlockHeight != null\n  ) {\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          signature: signature,\n          blockhash: transaction.recentBlockhash,\n          lastValidBlockHeight: transaction.lastValidBlockHeight,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else if (\n    transaction.minNonceContextSlot != null &&\n    transaction.nonceInfo != null\n  ) {\n    const {nonceInstruction} = transaction.nonceInfo;\n    const nonceAccountPubkey = nonceInstruction.keys[0].pubkey;\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          minContextSlot: transaction.minNonceContextSlot,\n          nonceAccountPubkey,\n          nonceValue: transaction.nonceInfo.nonce,\n          signature,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else {\n    if (options?.abortSignal != null) {\n      console.warn(\n        'sendAndConfirmTransaction(): A transaction with a deprecated confirmation strategy was ' +\n          'supplied along with an `abortSignal`. Only transactions having `lastValidBlockHeight` ' +\n          'or a combination of `nonceInfo` and `minNonceContextSlot` are abortable.',\n      );\n    }\n    status = (\n      await connection.confirmTransaction(\n        signature,\n        options && options.commitment,\n      )\n    ).value;\n  }\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\nexport interface IInstructionInputData {\n  readonly instruction: number;\n}\n\n/**\n * @internal\n */\nexport type InstructionType<TInputData extends IInstructionInputData> = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  fields?: any,\n): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  buffer: Buffer,\n): TInputData {\n  let data: TInputData;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct<\n  Readonly<{\n    authorizedPubkey: Uint8Array;\n    feeCalculator: Readonly<{\n      lamportsPerSignature: number;\n    }>;\n    nonce: Uint8Array;\n    state: number;\n    version: number;\n  }>\n>([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct<Readonly<{lamportsPerSignature: number}>>(\n    [FeeCalculatorLayout],\n    'feeCalculator',\n  ),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\n/**\n * A durable nonce is a 32 byte value encoded as a base58 string.\n */\nexport type DurableNonce = string;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport {blob, Layout} from '@solana/buffer-layout';\nimport {toBigIntLE, toBufferLE} from 'bigint-buffer';\n\ninterface EncodeDecode<T> {\n  decode(buffer: Buffer, offset?: number): T;\n  encode(src: T, buffer: Buffer, offset?: number): number;\n}\n\nconst encodeDecode = <T>(layout: Layout<T>): EncodeDecode<T> => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {decode, encode};\n};\n\nconst bigInt =\n  (length: number) =>\n  (property?: string): Layout<bigint> => {\n    const layout = blob(length, property);\n    const {encode, decode} = encodeDecode(layout);\n\n    const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n    bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n      const src = decode(buffer, offset);\n      return toBigIntLE(Buffer.from(src));\n    };\n\n    bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n      const src = toBufferLE(bigInt, length);\n      return encode(src, buffer, offset);\n    };\n\n    return bigIntLayout;\n  };\n\nexport const u64 = bigInt(8);\n\nexport const u128 = bigInt(16);\n\nexport const u192 = bigInt(24);\n\nexport const u256 = bigInt(32);\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {NONCE_ACCOUNT_LENGTH} from '../nonce-account';\nimport {PublicKey} from '../publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\nimport {u64} from '../utils/bigint';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/** Decoded transfer system transaction instruction */\nexport type DecodedTransferInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n};\n\n/** Decoded transferWithSeed system transaction instruction */\nexport type DecodedTransferWithSeedInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(\n    instruction: TransactionInstruction,\n  ): DecodedTransferInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): DecodedTransferWithSeedInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof SystemInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount'\n  | 'UpgradeNonceAccount';\n\ntype SystemInstructionInputData = {\n  AdvanceNonceAccount: IInstructionInputData;\n  Allocate: IInstructionInputData & {\n    space: number;\n  };\n  AllocateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  Assign: IInstructionInputData & {\n    programId: Uint8Array;\n  };\n  AssignWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    seed: string;\n    programId: Uint8Array;\n  };\n  AuthorizeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Create: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    space: number;\n  };\n  CreateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  InitializeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Transfer: IInstructionInputData & {\n    lamports: bigint;\n  };\n  TransferWithSeed: IInstructionInputData & {\n    lamports: bigint;\n    programId: Uint8Array;\n    seed: string;\n  };\n  WithdrawNonceAccount: IInstructionInputData & {\n    lamports: number;\n  };\n  UpgradeNonceAccount: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in SystemInstructionType]: InstructionType<\n    SystemInstructionInputData[Instruction]\n  >;\n}>({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct<SystemInstructionInputData['Create']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct<SystemInstructionInputData['Assign']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct<SystemInstructionInputData['Transfer']>([\n      BufferLayout.u32('instruction'),\n      u64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct<SystemInstructionInputData['CreateWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AdvanceNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['WithdrawNonceAccount']\n    >([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['InitializeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AuthorizeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct<SystemInstructionInputData['Allocate']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct<SystemInstructionInputData['AllocateWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('base'),\n        Layout.rustString('seed'),\n        BufferLayout.ns64('space'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<SystemInstructionInputData['AssignWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct<SystemInstructionInputData['TransferWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        u64('lamports'),\n        Layout.rustString('seed'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['UpgradeNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: BigInt(params.lamports)});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {MS_PER_SLOT} from './timing';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './utils/send-and-confirm-transaction';\nimport {sleep} from './utils/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './programs/system';\nimport {IInstructionInputData} from './instruction';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct<\n      Readonly<{\n        bytes: number[];\n        bytesLength: number;\n        bytesLengthPadding: number;\n        instruction: number;\n        offset: number;\n      }>\n    >([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes: bytes as number[],\n          bytesLength: 0,\n          bytesLengthPadding: 0,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct<IInstructionInputData>([\n        BufferLayout.u32('instruction'),\n      ]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      const deployCommitment = 'processed';\n      const finalizeSignature = await connection.sendTransaction(\n        transaction,\n        [payer, program],\n        {preflightCommitment: deployCommitment},\n      );\n      const {context, value} = await connection.confirmTransaction(\n        {\n          signature: finalizeSignature,\n          lastValidBlockHeight: transaction.lastValidBlockHeight!,\n          blockhash: transaction.recentBlockhash!,\n        },\n        deployCommitment,\n      );\n      if (value.err) {\n        throw new Error(\n          `Transaction ${finalizeSignature} failed (${JSON.stringify(value)})`,\n        );\n      }\n      // We prevent programs from being usable until the slot after their deployment.\n      // See https://github.com/solana-labs/solana/pull/29654\n      while (\n        true // eslint-disable-line no-constant-condition\n      ) {\n        try {\n          const currentSlot = await connection.getSlot({\n            commitment: deployCommitment,\n          });\n          if (currentSlot > context.slot) {\n            break;\n          }\n        } catch {\n          /* empty */\n        }\n        await new Promise(resolve =>\n          setTimeout(resolve, Math.round(MS_PER_SLOT / 2)),\n        );\n      }\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a SBF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the SBF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","var objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nmodule.exports = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link Connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n\n// Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nexport const SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016,\n} as const;\nexport type SolanaJSONRPCErrorCodeEnum =\n  (typeof SolanaJSONRPCErrorCode)[keyof typeof SolanaJSONRPCErrorCode];\n\nexport class SolanaJSONRPCError extends Error {\n  code: SolanaJSONRPCErrorCodeEnum | unknown;\n  data?: any;\n  constructor(\n    {\n      code,\n      message,\n      data,\n    }: Readonly<{code: unknown; message: string; data?: any}>,\n    customMessage?: string,\n  ) {\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n}\n","export const Headers = globalThis.Headers;\nexport const Request = globalThis.Request;\nexport const Response = globalThis.Response;\nexport default globalThis.fetch;\n","import RpcWebSocketCommonClient from 'rpc-websockets/dist/lib/client';\nimport RpcWebSocketBrowserFactory from 'rpc-websockets/dist/lib/client/websocket.browser';\nimport {\n  ICommonWebSocket,\n  IWSClientAdditionalOptions,\n  NodeWebSocketType,\n  NodeWebSocketTypeOptions,\n} from 'rpc-websockets/dist/lib/client/client.types';\n\nimport createRpc from './rpc-websocket-factory';\n\ninterface IHasReadyState {\n  readyState: WebSocket['readyState'];\n}\n\nexport default class RpcWebSocketClient extends RpcWebSocketCommonClient {\n  private underlyingSocket: IHasReadyState | undefined;\n  constructor(\n    address?: string,\n    options?: IWSClientAdditionalOptions & NodeWebSocketTypeOptions,\n    generate_request_id?: (\n      method: string,\n      params: object | Array<any>,\n    ) => number,\n  ) {\n    const webSocketFactory = (url: string) => {\n      const rpc = createRpc(url, {\n        autoconnect: true,\n        max_reconnects: 5,\n        reconnect: true,\n        reconnect_interval: 1000,\n        ...options,\n      });\n      if ('socket' in rpc) {\n        this.underlyingSocket = (\n          rpc as ReturnType<typeof RpcWebSocketBrowserFactory>\n        ).socket;\n      } else {\n        this.underlyingSocket = rpc as NodeWebSocketType;\n      }\n      return rpc as ICommonWebSocket;\n    };\n    super(webSocketFactory, address, options, generate_request_id);\n  }\n  call(\n    ...args: Parameters<RpcWebSocketCommonClient['call']>\n  ): ReturnType<RpcWebSocketCommonClient['call']> {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.call(...args);\n    }\n    return Promise.reject(\n      new Error(\n        'Tried to call a JSON-RPC method `' +\n          args[0] +\n          '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' +\n          readyState +\n          ')',\n      ),\n    );\n  }\n  notify(\n    ...args: Parameters<RpcWebSocketCommonClient['notify']>\n  ): ReturnType<RpcWebSocketCommonClient['notify']> {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.notify(...args);\n    }\n    return Promise.reject(\n      new Error(\n        'Tried to send a JSON-RPC notification `' +\n          args[0] +\n          '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' +\n          readyState +\n          ')',\n      ),\n    );\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport assert from '../../utils/assert';\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport {u64} from '../../utils/bigint';\nimport {decodeData} from '../../account-data';\n\nexport type AddressLookupTableState = {\n  deactivationSlot: bigint;\n  lastExtendedSlot: number;\n  lastExtendedSlotStartIndex: number;\n  authority?: PublicKey;\n  addresses: Array<PublicKey>;\n};\n\nexport type AddressLookupTableAccountArgs = {\n  key: PublicKey;\n  state: AddressLookupTableState;\n};\n\n/// The serialized size of lookup table metadata\nconst LOOKUP_TABLE_META_SIZE = 56;\n\nexport class AddressLookupTableAccount {\n  key: PublicKey;\n  state: AddressLookupTableState;\n\n  constructor(args: AddressLookupTableAccountArgs) {\n    this.key = args.key;\n    this.state = args.state;\n  }\n\n  isActive(): boolean {\n    const U64_MAX = BigInt('0xffffffffffffffff');\n    return this.state.deactivationSlot === U64_MAX;\n  }\n\n  static deserialize(accountData: Uint8Array): AddressLookupTableState {\n    const meta = decodeData(LookupTableMetaLayout, accountData);\n\n    const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n    assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n    assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n\n    const numSerializedAddresses = serializedAddressesLen / 32;\n    const {addresses} = BufferLayout.struct<{addresses: Array<Uint8Array>}>([\n      BufferLayout.seq(Layout.publicKey(), numSerializedAddresses, 'addresses'),\n    ]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));\n\n    return {\n      deactivationSlot: meta.deactivationSlot,\n      lastExtendedSlot: meta.lastExtendedSlot,\n      lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n      authority:\n        meta.authority.length !== 0\n          ? new PublicKey(meta.authority[0])\n          : undefined,\n      addresses: addresses.map(address => new PublicKey(address)),\n    };\n  }\n}\n\nconst LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout.struct<{\n    typeIndex: number;\n    deactivationSlot: bigint;\n    lastExtendedSlot: number;\n    lastExtendedStartIndex: number;\n    authority: Array<Uint8Array>;\n  }>([\n    BufferLayout.u32('typeIndex'),\n    u64('deactivationSlot'),\n    BufferLayout.nu64('lastExtendedSlot'),\n    BufferLayout.u8('lastExtendedStartIndex'),\n    BufferLayout.u8(), // option\n    BufferLayout.seq(\n      Layout.publicKey(),\n      BufferLayout.offset(BufferLayout.u8(), -1),\n      'authority',\n    ),\n  ]),\n};\n","import * as BufferLayout from '@solana/buffer-layout';\n\nexport interface IAccountStateData {\n  readonly typeIndex: number;\n}\n\n/**\n * @internal\n */\nexport type AccountType<TInputData extends IAccountStateData> = {\n  /** The account type index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Decode account data buffer using an AccountType\n * @internal\n */\nexport function decodeData<TAccountStateData extends IAccountStateData>(\n  type: AccountType<TAccountStateData>,\n  data: Uint8Array,\n): TAccountStateData {\n  let decoded: TAccountStateData;\n  try {\n    decoded = type.layout.decode(data);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (decoded.typeIndex !== type.index) {\n    throw new Error(\n      `invalid account data; account type mismatch ${decoded.typeIndex} != ${type.index}`,\n    );\n  }\n\n  return decoded;\n}\n","const URL_RE = /^[^:]+:\\/\\/([^:[]+|\\[[^\\]]+\\])(:\\d+)?(.*)/i;\n\nexport function makeWebsocketUrl(endpoint: string) {\n  const matches = endpoint.match(URL_RE);\n  if (matches == null) {\n    throw TypeError(`Failed to validate endpoint URL \\`${endpoint}\\``);\n  }\n  const [\n    _, // eslint-disable-line @typescript-eslint/no-unused-vars\n    hostish,\n    portWithColon,\n    rest,\n  ] = matches;\n  const protocol = endpoint.startsWith('https:') ? 'wss:' : 'ws:';\n  const startPort =\n    portWithColon == null ? null : parseInt(portWithColon.slice(1), 10);\n  const websocketPort =\n    // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n    // is explicitly specifying the endpoint port (HTTP-based RPC), assuming\n    // we're directly trying to connect to solana-validator's ws listening port.\n    // When the endpoint omits the port, we're connecting to the protocol\n    // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n    // proxy which manages WebSocket upgrade and backend port redirection.\n    startPort == null ? '' : `:${startPort + 1}`;\n  return `${protocol}//${hostish}${websocketPort}${rest}`;\n}\n","import HttpKeepAliveAgent, {\n  HttpsAgent as HttpsKeepAliveAgent,\n} from 'agentkeepalive';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n// @ts-ignore\nimport fastStableStringify from 'fast-stable-stringify';\nimport type {Agent as NodeHttpAgent} from 'http';\nimport {Agent as NodeHttpsAgent} from 'https';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport RpcClient from 'jayson/lib/client/browser';\nimport {JSONRPCError} from 'jayson';\n\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError, SolanaJSONRPCError} from './errors';\nimport fetchImpl from './fetch-impl';\nimport {DurableNonce, NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport RpcWebSocketClient from './rpc-websocket';\nimport {MS_PER_SLOT} from './timing';\nimport {\n  Transaction,\n  TransactionStatus,\n  TransactionVersion,\n  VersionedTransaction,\n} from './transaction';\nimport {Message, MessageHeader, MessageV0, VersionedMessage} from './message';\nimport {AddressLookupTableAccount} from './programs/address-lookup-table/state';\nimport assert from './utils/assert';\nimport {sleep} from './utils/sleep';\nimport {toBuffer} from './utils/to-buffer';\nimport {\n  TransactionExpiredBlockheightExceededError,\n  TransactionExpiredNonceInvalidError,\n  TransactionExpiredTimeoutError,\n} from './transaction/expiry-custom-errors';\nimport {makeWebsocketUrl} from './utils/makeWebsocketUrl';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\ninterface IWSRequestParams {\n  [x: string]: any;\n  [x: number]: any;\n}\n\ntype ClientSubscriptionId = number;\n/** @internal */ type ServerSubscriptionId = number;\n/** @internal */ type SubscriptionConfigHash = string;\n/** @internal */ type SubscriptionDisposeFn = () => Promise<void>;\n/** @internal */ type SubscriptionStateChangeCallback = (\n  nextState: StatefulSubscription['state'],\n) => void;\n/** @internal */ type SubscriptionStateChangeDisposeFn = () => void;\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\ntype BaseSubscription<TMethod = SubscriptionConfig['method']> = Readonly<{\n  args: IWSRequestParams;\n  callbacks: Set<Extract<SubscriptionConfig, {method: TMethod}>['callback']>;\n}>;\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\ntype StatefulSubscription = Readonly<\n  // New subscriptions that have not yet been\n  // sent to the server start in this state.\n  | {\n      state: 'pending';\n    }\n  // These subscriptions have been sent to the server\n  // and are waiting for the server to acknowledge them.\n  | {\n      state: 'subscribing';\n    }\n  // These subscriptions have been acknowledged by the\n  // server and have been assigned server subscription ids.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'subscribed';\n    }\n  // These subscriptions are intended to be torn down and\n  // are waiting on an acknowledgement from the server.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribing';\n    }\n  // The request to tear down these subscriptions has been\n  // acknowledged by the server. The `serverSubscriptionId`\n  // is the id of the now-dead subscription.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribed';\n    }\n>;\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\ntype SubscriptionConfig = Readonly<\n  | {\n      callback: AccountChangeCallback;\n      method: 'accountSubscribe';\n      unsubscribeMethod: 'accountUnsubscribe';\n    }\n  | {\n      callback: LogsCallback;\n      method: 'logsSubscribe';\n      unsubscribeMethod: 'logsUnsubscribe';\n    }\n  | {\n      callback: ProgramAccountChangeCallback;\n      method: 'programSubscribe';\n      unsubscribeMethod: 'programUnsubscribe';\n    }\n  | {\n      callback: RootChangeCallback;\n      method: 'rootSubscribe';\n      unsubscribeMethod: 'rootUnsubscribe';\n    }\n  | {\n      callback: SignatureSubscriptionCallback;\n      method: 'signatureSubscribe';\n      unsubscribeMethod: 'signatureUnsubscribe';\n    }\n  | {\n      callback: SlotChangeCallback;\n      method: 'slotSubscribe';\n      unsubscribeMethod: 'slotUnsubscribe';\n    }\n  | {\n      callback: SlotUpdateCallback;\n      method: 'slotsUpdatesSubscribe';\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe';\n    }\n>;\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\ntype DistributiveOmit<T, K extends PropertyKey> = T extends unknown\n  ? Omit<T, K>\n  : never;\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\ntype Subscription = BaseSubscription &\n  StatefulSubscription &\n  DistributiveOmit<SubscriptionConfig, 'callback'>;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => Promise<any>;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => Promise<any[]>;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\nexport type BlockhashWithExpiryBlockHeight = Readonly<{\n  blockhash: Blockhash;\n  lastValidBlockHeight: number;\n}>;\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\nexport type BlockheightBasedTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & BlockhashWithExpiryBlockHeight;\n\n/**\n * A strategy for confirming durable nonce transactions.\n */\nexport type DurableNonceTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & {\n    /**\n     * The lowest slot at which to fetch the nonce value from the\n     * nonce account. This should be no lower than the slot at\n     * which the last-known value of the nonce was fetched.\n     */\n    minContextSlot: number;\n    /**\n     * The account where the current value of the nonce is stored.\n     */\n    nonceAccountPubkey: PublicKey;\n    /**\n     * The nonce value that was used to sign the transaction\n     * for which confirmation is being sought.\n     */\n    nonceValue: DurableNonce;\n  };\n\n/**\n * Properties shared by all transaction confirmation strategies\n */\nexport type BaseTransactionConfirmationStrategy = Readonly<{\n  /** A signal that, when aborted, cancels any outstanding transaction confirmation operations */\n  abortSignal?: AbortSignal;\n  signature: TransactionSignature;\n}>;\n\n/**\n * This type represents all transaction confirmation strategies\n */\nexport type TransactionConfirmationStrategy =\n  | BlockheightBasedTransactionConfirmationStrategy\n  | DurableNonceTransactionConfirmationStrategy;\n\n/* @internal */\nfunction assertEndpointUrl(putativeUrl: string) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n  return putativeUrl;\n}\n\n/** @internal */\nfunction extractCommitmentFromConfig<TConfig>(\n  commitmentOrConfig?: Commitment | ({commitment?: Commitment} & TConfig),\n) {\n  let commitment: Commitment | undefined;\n  let config: Omit<TConfig, 'commitment'> | undefined;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {commitment: specifiedCommitment, ...specifiedConfig} =\n      commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {commitment, config};\n}\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * @internal\n */\nfunction versionedMessageFromResponse(\n  version: TransactionVersion | undefined,\n  response: MessageResponse,\n): VersionedMessage {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(\n        accountKey => new PublicKey(accountKey),\n      ),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(ix => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      })),\n      addressTableLookups: response.addressTableLookups!,\n    });\n  } else {\n    return new Message(response);\n  }\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getAccountInfo` query behavior\n */\nexport type GetAccountInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for changing `getBalance` query behavior\n */\nexport type GetBalanceConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetVersionedBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getStakeMinimumDelegation` query behavior\n */\nexport type GetStakeMinimumDelegationConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n};\n\n/**\n * Configuration object for changing `getBlockHeight` query behavior\n */\nexport type GetBlockHeightConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getEpochInfo` query behavior\n */\nexport type GetEpochInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getInflationReward` query behavior\n */\nexport type GetInflationRewardConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** An epoch for which the reward occurs. If omitted, the previous epoch will be used */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getLatestBlockhash` query behavior\n */\nexport type GetLatestBlockhashConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `isBlockhashValid` query behavior\n */\nexport type IsBlockhashValidConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlot` query behavior\n */\nexport type GetSlotConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlotLeader` query behavior\n */\nexport type GetSlotLeaderConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetVersionedTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n};\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n  /** vote account commission when the reward was credited */\n  commission?: number | null;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n        commission: optional(nullable(number())),\n      }),\n    ),\n  ),\n);\n\nexport type RecentPrioritizationFees = {\n  /** slot in which the fee was observed */\n  slot: number;\n  /** the per-compute-unit fee paid by at least one successfully landed transaction, specified in increments of 0.000001 lamports*/\n  prioritizationFee: number;\n};\n\n/**\n * Configuration object for changing `getRecentPrioritizationFees` query behavior\n */\nexport type GetRecentPrioritizationFeesConfig = {\n  /**\n   * If this parameter is provided, the response will reflect a fee to land a transaction locking\n   * all of the provided accounts as writable.\n   */\n  lockedWritableAccounts?: PublicKey[];\n};\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesResult = array(\n  pick({\n    slot: number(),\n    prioritizationFee: number(),\n  }),\n);\n\nexport type InflationRate = {\n  /** total inflation */\n  total: number;\n  /** inflation allocated to validators */\n  validator: number;\n  /** inflation allocated to the foundation */\n  foundation: number;\n  /** epoch for which these values are valid */\n  epoch: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateResult = pick({\n  total: number(),\n  validator: number(),\n  foundation: number(),\n  epoch: number(),\n});\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type TransactionReturnDataEncoding = 'base64';\n\nexport type TransactionReturnData = {\n  programId: string;\n  data: [string, TransactionReturnDataEncoding];\n};\n\nexport type SimulateTransactionConfig = {\n  /** Optional parameter used to enable signature verification before simulation */\n  sigVerify?: boolean;\n  /** Optional parameter used to replace the simulated transaction's recent blockhash with the latest blockhash */\n  replaceRecentBlockhash?: boolean;\n  /** Optional parameter used to set the commitment level when selecting the latest block */\n  commitment?: Commitment;\n  /** Optional parameter used to specify a list of account addresses to return post simulation state for */\n  accounts?: {\n    encoding: 'base64';\n    addresses: string[];\n  };\n  /** Optional parameter used to specify the minimum block slot that can be used for simulation */\n  minContextSlot?: number;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: (SimulatedTransactionAccountInfo | null)[] | null;\n  unitsConsumed?: number;\n  returnData?: TransactionReturnData | null;\n};\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            }),\n          ),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n    returnData: optional(\n      nullable(\n        pick({\n          programId: string(),\n          data: tuple([string(), literal('base64')]),\n        }),\n      ),\n    ),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Collection of addresses loaded by a transaction using address table lookups\n */\nexport type LoadedAddresses = {\n  writable: Array<PublicKey>;\n  readonly: Array<PublicKey>;\n};\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type VersionedTransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: VersionedMessage;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The transaction version */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed transaction message from the RPC API\n */\ntype MessageResponse = {\n  accountKeys: string[];\n  header: MessageHeader;\n  instructions: CompiledInstruction[];\n  recentBlockhash: string;\n  addressTableLookups?: ParsedAddressTableLookup[];\n};\n\n/**\n * A confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n  /** Indicates if the account key came from the transaction or a lookup table */\n  source?: 'transaction' | 'lookupTable';\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed address table lookup\n */\nexport type ParsedAddressTableLookup = {\n  /** Address lookup table account key */\n  accountKey: PublicKey;\n  /** Parsed instruction info */\n  writableIndexes: number[];\n  /** Parsed instruction info */\n  readonlyIndexes: number[];\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n  /** Address table lookups used to load additional accounts */\n  addressTableLookups?: ParsedAddressTableLookup[] | null;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The version of the transaction message */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type AccountsModeBlockResponse = VersionedAccountsModeBlockResponse;\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type NoneModeBlockResponse = VersionedNoneModeBlockResponse;\n\n/**\n * A block with parsed transactions\n */\nexport type ParsedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The details of the transaction */\n    transaction: ParsedTransaction;\n    /** Metadata produced from the transaction */\n    meta: ParsedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n  /** The number of blocks beneath this block */\n  blockHeight: number | null;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `accounts`\n */\nexport type ParsedAccountsModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<ParsedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        ParsedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `none`\n */\nexport type ParsedNoneModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type VersionedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: VersionedMessage;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type VersionedAccountsModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<VersionedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        VersionedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type VersionedNoneModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A confirmed block on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * recent block production information\n */\nexport type BlockProduction = Readonly<{\n  /** a dictionary of validator identities, as base-58 encoded strings. Value is a two element array containing the number of leader slots and the number of blocks produced */\n  byIdentity: Readonly<Record<string, ReadonlyArray<number>>>;\n  /** Block production slot range */\n  range: Readonly<{\n    /** first slot of the block production information (inclusive) */\n    firstSlot: number;\n    /** last slot of block production information (inclusive) */\n    lastSlot: number;\n  }>;\n}>;\n\nexport type GetBlockProductionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Slot range to return block production for. If parameter not provided, defaults to current epoch. */\n  range?: {\n    /** first slot to return block production information for (inclusive) */\n    firstSlot: number;\n    /** last slot to return block production information for (inclusive). If parameter not provided, defaults to the highest slot */\n    lastSlot?: number;\n  };\n  /** Only return results for this validator identity (base-58 encoded) */\n  identity?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    byIdentity: record(string(), array(number())),\n    range: pick({\n      firstSlot: number(),\n      lastSlot: number(),\n    }),\n  }),\n);\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  httpHeaders?: HttpHeaders,\n  customFetch?: FetchFn,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false,\n): RpcClient {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agent: NodeHttpAgent | NodeHttpsAgent | undefined;\n  if (process.env.BROWSER) {\n    if (httpAgent != null) {\n      console.warn(\n        'You have supplied an `httpAgent` when creating a `Connection` in a browser environment.' +\n          'It has been ignored; `httpAgent` is only used in Node environments.',\n      );\n    }\n  } else {\n    if (httpAgent == null) {\n      if (process.env.NODE_ENV !== 'test') {\n        const agentOptions = {\n          // One second fewer than the Solana RPC's keepalive timeout.\n          // Read more: https://github.com/solana-labs/solana/issues/27859#issuecomment-1340097889\n          freeSocketTimeout: 19000,\n          keepAlive: true,\n          maxSockets: 25,\n        };\n        if (url.startsWith('https:')) {\n          agent = new HttpsKeepAliveAgent(agentOptions);\n        } else {\n          agent = new HttpKeepAliveAgent(agentOptions);\n        }\n      }\n    } else {\n      if (httpAgent !== false) {\n        const isHttps = url.startsWith('https:');\n        if (isHttps && !(httpAgent instanceof NodeHttpsAgent)) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `https.Agent`. You have, instead, supplied an ' +\n              '`http.Agent` through `httpAgent`.',\n          );\n        } else if (!isHttps && httpAgent instanceof NodeHttpsAgent) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `http.Agent`. You have, instead, supplied an ' +\n              '`https.Agent` through `httpAgent`.',\n          );\n        }\n        agent = httpAgent;\n      }\n    }\n  }\n\n  let fetchWithMiddleware: FetchFn | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise<Parameters<FetchFn>>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(info, init, (modifiedInfo, modifiedInit) =>\n              resolve([modifiedInfo, modifiedInit]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n        COMMON_HTTP_HEADERS,\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateRpcResult = jsonRpcResult(GetInflationRateResult);\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesRpcResult = jsonRpcResult(\n  GetRecentPrioritizationFeesResult,\n);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst AddressTableLookupStruct = pick({\n  accountKey: PublicKeyFromString,\n  writableIndexes: array(number()),\n  readonlyIndexes: array(number()),\n});\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n    addressTableLookups: optional(array(AddressTableLookupStruct)),\n  }),\n});\n\nconst AnnotatedAccountKey = pick({\n  pubkey: PublicKeyFromString,\n  signer: boolean(),\n  writable: boolean(),\n  source: optional(union([literal('transaction'), literal('lookupTable')])),\n});\n\nconst ConfirmedTransactionAccountsModeResult = pick({\n  accountKeys: array(AnnotatedAccountKey),\n  signatures: array(string()),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(AnnotatedAccountKey),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n    addressTableLookups: optional(nullable(array(AddressTableLookupStruct))),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\nconst LoadedAddressesResult = pick({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString),\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\nconst TransactionVersionStruct = union([literal(0), literal('legacy')]);\n\n/** @internal */\nconst RewardsResult = pick({\n  pubkey: string(),\n  lamports: number(),\n  postBalance: nullable(number()),\n  rewardType: nullable(string()),\n  commission: optional(nullable(number())),\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `none`\n */\nconst GetNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `accounts`\n */\nconst GetAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message\n */\nconst GetParsedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ParsedConfirmedTransactionResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `accounts`\n */\nconst GetParsedAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `none`\n */\nconst GetParsedNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: nullable(ConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"isBlockhashValid\" message\n */\nconst IsBlockhashValidRpcResult = jsonRpcResultAndContext(boolean());\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** wrap the result in an RpcResponse JSON object */\n  withContext?: boolean;\n};\n\nexport type GetProgramAccountsResponse = readonly Readonly<{\n  account: AccountInfo<Buffer>;\n  /** the account Pubkey as base-58 encoded string */\n  pubkey: PublicKey;\n}>[];\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetStakeActivationConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Epoch for which to calculate activation details. If parameter not provided, defaults to current epoch */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTokenAccountsByOwnerConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTransactionCountConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonce`\n */\nexport type GetNonceConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonceAndContext`\n */\nexport type GetNonceAndContextConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** Cluster confirmation status, if available. Possible values: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {\n  [header: string]: string;\n} & {\n  // Prohibited headers; for internal use only.\n  'solana-client'?: never;\n};\n\n/**\n * The type of the JavaScript `fetch()` API\n */\nexport type FetchFn = typeof fetchImpl;\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  info: Parameters<FetchFn>[0],\n  init: Parameters<FetchFn>[1],\n  fetch: (...a: Parameters<FetchFn>) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /**\n   * An `http.Agent` that will be used to manage socket connections (eg. to implement connection\n   * persistence). Set this to `false` to create a connection that uses no agent. This applies to\n   * Node environments only.\n   */\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false;\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional custom fetch function */\n  fetch?: FetchFn;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retrying calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${process.env.npm_package_version ?? 'UNKNOWN'}`,\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */ private _rpcWebSocketGeneration: number = 0;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    latestBlockhash: BlockhashWithExpiryBlockHeight | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    latestBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ private _nextClientSubscriptionId: ClientSubscriptionId = 0;\n  /** @internal */ private _subscriptionDisposeFunctionsByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionDisposeFn\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionHashByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionConfigHash\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionStateChangeCallbacksByHash: {\n    [hash: SubscriptionConfigHash]:\n      | Set<SubscriptionStateChangeCallback>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionCallbacksByServerSubscriptionId: {\n    [serverSubscriptionId: ServerSubscriptionId]:\n      | Set<SubscriptionConfig['callback']>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionsByHash: {\n    [hash: SubscriptionConfigHash]: Subscription | undefined;\n  } = {};\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n  /** @internal */ private _subscriptionsAutoDisposedByRpc: Set<ServerSubscriptionId> =\n    new Set();\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    let httpAgent;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n      httpAgent = commitmentOrConfig.httpAgent;\n    }\n\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      endpoint,\n      httpHeaders,\n      fetch,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n      httpAgent,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint(): string {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    /** @internal */\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get balance for ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get block time for slot ${slot}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get minimum ledger slot',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get first available block',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token account balance',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<GetProgramAccountsResponse>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitmentOrConfig?: Commitment | GetTokenAccountsByOwnerConfig,\n  ): Promise<RpcResponseAndContext<GetProgramAccountsResponse>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token largest accounts',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'base64',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(\n        publicKey,\n        commitmentOrConfig,\n      );\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleParsedAccounts(\n    publicKeys: PublicKey[],\n    rawConfig?: GetMultipleAccountsConfig,\n  ): Promise<\n    RpcResponseAndContext<(AccountInfo<Buffer | ParsedAccountData> | null)[]>\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(ParsedAccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<RpcResponseAndContext<(AccountInfo<Buffer> | null)[]>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const res = await this.getMultipleAccountsInfoAndContext(\n      publicKeys,\n      commitmentOrConfig,\n    );\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetStakeActivationConfig,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get Stake Activation ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment: GetProgramAccountsConfig &\n      Readonly<{withContext: true}>,\n  ): Promise<RpcResponseAndContext<GetProgramAccountsResponse>>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<GetProgramAccountsResponse>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<\n    | GetProgramAccountsResponse\n    | RpcResponseAndContext<GetProgramAccountsResponse>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const {encoding, ...configWithoutEncoding} = config || {};\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      configWithoutEncoding,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const baseSchema = array(KeyedAccountInfoResult);\n    const res =\n      configWithoutEncoding.withContext === true\n        ? create(unsafeRes, jsonRpcResultAndContext(baseSchema))\n        : create(unsafeRes, jsonRpcResult(baseSchema));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  confirmTransaction(\n    strategy: TransactionConfirmationStrategy,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  /** @deprecated Instead, call `confirmTransaction` and pass in {@link TransactionConfirmationStrategy} */\n  // eslint-disable-next-line no-dupe-class-members\n  confirmTransaction(\n    strategy: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(\n    strategy: TransactionConfirmationStrategy | TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let rawSignature: string;\n\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config = strategy as TransactionConfirmationStrategy;\n\n      if (config.abortSignal?.aborted) {\n        return Promise.reject(config.abortSignal.reason);\n      }\n      rawSignature = config.signature;\n    }\n\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    if (typeof strategy === 'string') {\n      return await this.confirmTransactionUsingLegacyTimeoutStrategy({\n        commitment: commitment || this.commitment,\n        signature: rawSignature,\n      });\n    } else if ('lastValidBlockHeight' in strategy) {\n      return await this.confirmTransactionUsingBlockHeightExceedanceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    } else {\n      return await this.confirmTransactionUsingDurableNonceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    }\n  }\n\n  private getCancellationPromise(signal?: AbortSignal): Promise<never> {\n    return new Promise<never>((_, reject) => {\n      if (signal == null) {\n        return;\n      }\n      if (signal.aborted) {\n        reject(signal.reason);\n      } else {\n        signal.addEventListener('abort', () => {\n          reject(signal.reason);\n        });\n      }\n    });\n  }\n\n  private getTransactionConfirmationPromise({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }): {\n    abortConfirmation(): void;\n    confirmationPromise: Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>;\n  } {\n    let signatureSubscriptionId: number | undefined;\n    let disposeSignatureSubscriptionStateChangeObserver:\n      | SubscriptionStateChangeDisposeFn\n      | undefined;\n    let done = false;\n    const confirmationPromise = new Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>((resolve, reject) => {\n      try {\n        signatureSubscriptionId = this.onSignature(\n          signature,\n          (result: SignatureResult, context: Context) => {\n            signatureSubscriptionId = undefined;\n            const response = {\n              context,\n              value: result,\n            };\n            resolve({__type: TransactionStatus.PROCESSED, response});\n          },\n          commitment,\n        );\n        const subscriptionSetupPromise = new Promise<void>(\n          resolveSubscriptionSetup => {\n            if (signatureSubscriptionId == null) {\n              resolveSubscriptionSetup();\n            } else {\n              disposeSignatureSubscriptionStateChangeObserver =\n                this._onSubscriptionStateChange(\n                  signatureSubscriptionId,\n                  nextState => {\n                    if (nextState === 'subscribed') {\n                      resolveSubscriptionSetup();\n                    }\n                  },\n                );\n            }\n          },\n        );\n        (async () => {\n          await subscriptionSetupPromise;\n          if (done) return;\n          const response = await this.getSignatureStatus(signature);\n          if (done) return;\n          if (response == null) {\n            return;\n          }\n          const {context, value} = response;\n          if (value == null) {\n            return;\n          }\n          if (value?.err) {\n            reject(value.err);\n          } else {\n            switch (commitment) {\n              case 'confirmed':\n              case 'single':\n              case 'singleGossip': {\n                if (value.confirmationStatus === 'processed') {\n                  return;\n                }\n                break;\n              }\n              case 'finalized':\n              case 'max':\n              case 'root': {\n                if (\n                  value.confirmationStatus === 'processed' ||\n                  value.confirmationStatus === 'confirmed'\n                ) {\n                  return;\n                }\n                break;\n              }\n              // exhaust enums to ensure full coverage\n              case 'processed':\n              case 'recent':\n            }\n            done = true;\n            resolve({\n              __type: TransactionStatus.PROCESSED,\n              response: {\n                context,\n                value,\n              },\n            });\n          }\n        })();\n      } catch (err) {\n        reject(err);\n      }\n    });\n    const abortConfirmation = () => {\n      if (disposeSignatureSubscriptionStateChangeObserver) {\n        disposeSignatureSubscriptionStateChangeObserver();\n        disposeSignatureSubscriptionStateChangeObserver = undefined;\n      }\n      if (signatureSubscriptionId != null) {\n        this.removeSignatureListener(signatureSubscriptionId);\n        signatureSubscriptionId = undefined;\n      }\n    };\n    return {abortConfirmation, confirmationPromise};\n  }\n\n  private async confirmTransactionUsingBlockHeightExceedanceStrategy({\n    commitment,\n    strategy: {abortSignal, lastValidBlockHeight, signature},\n  }: {\n    commitment?: Commitment;\n    strategy: BlockheightBasedTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.BLOCKHEIGHT_EXCEEDED;\n    }>(resolve => {\n      const checkBlockHeight = async () => {\n        try {\n          const blockHeight = await this.getBlockHeight(commitment);\n          return blockHeight;\n        } catch (_e) {\n          return -1;\n        }\n      };\n      (async () => {\n        let currentBlockHeight = await checkBlockHeight();\n        if (done) return;\n        while (currentBlockHeight <= lastValidBlockHeight) {\n          await sleep(1000);\n          if (done) return;\n          currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n        }\n        resolve({__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED});\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredBlockheightExceededError(signature);\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingDurableNonceStrategy({\n    commitment,\n    strategy: {\n      abortSignal,\n      minContextSlot,\n      nonceAccountPubkey,\n      nonceValue,\n      signature,\n    },\n  }: {\n    commitment?: Commitment;\n    strategy: DurableNonceTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.NONCE_INVALID;\n      slotInWhichNonceDidAdvance: number | null;\n    }>(resolve => {\n      let currentNonceValue: string | undefined = nonceValue;\n      let lastCheckedSlot: number | null = null;\n      const getCurrentNonceValue = async () => {\n        try {\n          const {context, value: nonceAccount} = await this.getNonceAndContext(\n            nonceAccountPubkey,\n            {\n              commitment,\n              minContextSlot,\n            },\n          );\n          lastCheckedSlot = context.slot;\n          return nonceAccount?.nonce;\n        } catch (e) {\n          // If for whatever reason we can't reach/read the nonce\n          // account, just keep using the last-known value.\n          return currentNonceValue;\n        }\n      };\n      (async () => {\n        currentNonceValue = await getCurrentNonceValue();\n        if (done) return;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          if (nonceValue !== currentNonceValue) {\n            resolve({\n              __type: TransactionStatus.NONCE_INVALID,\n              slotInWhichNonceDidAdvance: lastCheckedSlot,\n            });\n            return;\n          }\n          await sleep(2000);\n          if (done) return;\n          currentNonceValue = await getCurrentNonceValue();\n          if (done) return;\n        }\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        // Double check that the transaction is indeed unconfirmed.\n        let signatureStatus:\n          | RpcResponseAndContext<SignatureStatus | null>\n          | null\n          | undefined;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          const status = await this.getSignatureStatus(signature);\n          if (status == null) {\n            break;\n          }\n          if (\n            status.context.slot <\n            (outcome.slotInWhichNonceDidAdvance ?? minContextSlot)\n          ) {\n            await sleep(400);\n            continue;\n          }\n          signatureStatus = status;\n          break;\n        }\n        if (signatureStatus?.value) {\n          const commitmentForStatus = commitment || 'finalized';\n          const {confirmationStatus} = signatureStatus.value;\n          switch (commitmentForStatus) {\n            case 'processed':\n            case 'recent':\n              if (\n                confirmationStatus !== 'processed' &&\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'confirmed':\n            case 'single':\n            case 'singleGossip':\n              if (\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'finalized':\n            case 'max':\n            case 'root':\n              if (confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            default:\n              // Exhaustive switch.\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n              ((_: never) => {})(commitmentForStatus);\n          }\n          result = {\n            context: signatureStatus.context,\n            value: {err: signatureStatus.value.err},\n          };\n        } else {\n          throw new TransactionExpiredNonceInvalidError(signature);\n        }\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingLegacyTimeoutStrategy({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }) {\n    let timeoutId;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.TIMED_OUT;\n      timeoutMs: number;\n    }>(resolve => {\n      let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n      switch (commitment) {\n        case 'processed':\n        case 'recent':\n        case 'single':\n        case 'confirmed':\n        case 'singleGossip': {\n          timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n          break;\n        }\n        // exhaust enums to ensure full coverage\n        case 'finalized':\n        case 'max':\n        case 'root':\n      }\n      timeoutId = setTimeout(\n        () => resolve({__type: TransactionStatus.TIMED_OUT, timeoutMs}),\n        timeoutMs,\n      );\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({\n        commitment,\n        signature,\n      });\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredTimeoutError(\n          signature,\n          outcome.timeoutMs / 1000,\n        );\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(\n    commitmentOrConfig?: Commitment | GetSlotConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(\n    commitmentOrConfig?: Commitment | GetSlotLeaderConfig,\n  ): Promise<string> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(\n    commitmentOrConfig?: Commitment | GetTransactionCountConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get transaction count',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitmentOrConfig?: Commitment | GetInflationRewardConfig,\n  ): Promise<(InflationReward | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the specific inflation values for the current epoch\n   */\n  async getInflationRate(): Promise<InflationRate> {\n    const unsafeRes = await this._rpcRequest('getInflationRate', []);\n    const res = create(unsafeRes, GetInflationRateRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation rate');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(\n    commitmentOrConfig?: Commitment | GetEpochInfoConfig,\n  ): Promise<EpochInfo> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(commitment?: Commitment): Promise<\n    RpcResponseAndContext<{\n      blockhash: Blockhash;\n      feeCalculator: FeeCalculator;\n    }>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      limit ? [limit] : [],\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent performance samples',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: VersionedMessage,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number | null>> {\n    const wireMessage = toBuffer(message.serialize()).toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee for message');\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of prioritization fees from recent blocks.\n   */\n  async getRecentPrioritizationFees(\n    config?: GetRecentPrioritizationFeesConfig,\n  ): Promise<RecentPrioritizationFees[]> {\n    const accounts = config?.lockedWritableAccounts?.map(key => key.toBase58());\n    const args = accounts?.length ? [accounts] : [];\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPrioritizationFees',\n      args,\n    );\n    const res = create(unsafeRes, GetRecentPrioritizationFeesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent prioritization fees',\n      );\n    }\n    return res.result;\n  }\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<RpcResponseAndContext<BlockhashWithExpiryBlockHeight>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns whether a blockhash is still valid or not\n   */\n  async isBlockhashValid(\n    blockhash: Blockhash,\n    rawConfig?: IsBlockhashValidConfig,\n  ): Promise<RpcResponseAndContext<boolean>> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgs(\n      [blockhash],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('isBlockhashValid', args);\n    const res = create(unsafeRes, IsBlockhashValidRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to determine if the blockhash `' + blockhash + '`is valid',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   *\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  async getBlock(\n    slot: number,\n    rawConfig?: GetBlockConfig,\n  ): Promise<BlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<AccountsModeBlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'none'},\n  ): Promise<NoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<VersionedBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<VersionedAccountsModeBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<VersionedNoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | VersionedBlockResponse\n    | VersionedAccountsModeBlockResponse\n    | VersionedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          const {result} = res;\n          return result\n            ? {\n                ...result,\n                transactions: result.transactions.map(\n                  ({transaction, meta, version}) => ({\n                    meta,\n                    transaction: {\n                      ...transaction,\n                      message: versionedMessageFromResponse(\n                        version,\n                        transaction.message,\n                      ),\n                    },\n                    version,\n                  }),\n                ),\n              }\n            : null;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(\n        e as JSONRPCError,\n        'failed to get confirmed block',\n      );\n    }\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized block\n   */\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<ParsedNoneModeBlockResponse>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | ParsedBlockResponse\n    | ParsedAccountsModeBlockResponse\n    | ParsedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetParsedAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetParsedNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetParsedBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e as JSONRPCError, 'failed to get block');\n    }\n  }\n\n  /*\n   * Returns the current block height of the node\n   */\n  getBlockHeight = (() => {\n    const requestPromises: {[hash: string]: Promise<number>} = {};\n    return async (\n      commitmentOrConfig?: Commitment | GetBlockHeightConfig,\n    ): Promise<number> => {\n      const {commitment, config} =\n        extractCommitmentFromConfig(commitmentOrConfig);\n      const args = this._buildArgs(\n        [],\n        commitment,\n        undefined /* encoding */,\n        config,\n      );\n      const requestHash = fastStableStringify(args);\n      requestPromises[requestHash] =\n        requestPromises[requestHash] ??\n        (async () => {\n          try {\n            const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n            const res = create(unsafeRes, jsonRpcResult(number()));\n            if ('error' in res) {\n              throw new SolanaJSONRPCError(\n                res.error,\n                'failed to get block height information',\n              );\n            }\n            return res.result;\n          } finally {\n            delete requestPromises[requestHash];\n          }\n        })();\n      return await requestPromises[requestHash];\n    };\n  })();\n\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(\n    configOrCommitment?: GetBlockProductionConfig | Commitment,\n  ): Promise<RpcResponseAndContext<BlockProduction>> {\n    let extra: Omit<GetBlockProductionConfig, 'commitment'> | undefined;\n    let commitment: Commitment | undefined;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {commitment: c, ...rest} = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block production information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   *\n   * @deprecated Instead, call `getTransaction` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetTransactionConfig,\n  ): Promise<TransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: versionedMessageFromResponse(\n          result.version,\n          result.transaction.message,\n        ),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<ParsedTransactionWithMeta | null> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<(ParsedTransactionWithMeta | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        'jsonParsed',\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   *\n   * @deprecated Instead, call `getTransactions` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetTransactionConfig | Finality,\n  ): Promise<(TransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        undefined /* encoding */,\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      const result = res.result;\n      if (!result) return result;\n\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: versionedMessageFromResponse(\n            result.version,\n            result.transaction.message,\n          ),\n        },\n      };\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed transaction',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(\n          res.error,\n          'failed to get confirmed transactions',\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  async getAddressLookupTable(\n    accountKey: PublicKey,\n    config?: GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AddressLookupTableAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      accountKey,\n      config,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = new AddressLookupTableAccount({\n        key: accountKey,\n        state: AddressLookupTableAccount.deserialize(accountInfo.data),\n      });\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceAndContextConfig,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitmentOrConfig,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceConfig,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `airdrop to ${to.toBase58()} failed`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(\n    disableCache: boolean,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<BlockhashWithExpiryBlockHeight> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash\n        ? cachedLatestBlockhash.blockhash\n        : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * get the stake minimum delegation\n   */\n  async getStakeMinimumDelegation(\n    config?: GetStakeMinimumDelegationConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    const {commitment, config: configArg} = extractCommitmentFromConfig(config);\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get stake minimum delegation`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Simulate a transaction\n   *\n   * @deprecated Instead, call {@link simulateTransaction} with {@link\n   * VersionedTransaction} and {@link SimulateTransactionConfig} parameters\n   */\n  simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  simulateTransaction(\n    transaction: VersionedTransaction,\n    config?: SimulateTransactionConfig,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async simulateTransaction(\n    transactionOrMessage: VersionedTransaction | Transaction | Message,\n    configOrSigners?: SimulateTransactionConfig | Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    if ('message' in transactionOrMessage) {\n      const versionedTx = transactionOrMessage;\n      const wireTransaction = versionedTx.serialize();\n      const encodedTransaction =\n        Buffer.from(wireTransaction).toString('base64');\n      if (Array.isArray(configOrSigners) || includeAccounts !== undefined) {\n        throw new Error('Invalid arguments');\n      }\n\n      const config: any = configOrSigners || {};\n      config.encoding = 'base64';\n      if (!('commitment' in config)) {\n        config.commitment = this.commitment;\n      }\n\n      const args = [encodedTransaction, config];\n      const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n      const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n      if ('error' in res) {\n        throw new Error('failed to simulate transaction: ' + res.error.message);\n      }\n      return res.result;\n    }\n\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx: Transaction = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (configOrSigners !== undefined && !Array.isArray(configOrSigners)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = configOrSigners;\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   *\n   * @deprecated Instead, call {@link sendTransaction} with a {@link\n   * VersionedTransaction}\n   */\n  sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Send a signed transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  sendTransaction(\n    transaction: VersionedTransaction,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Sign and send a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async sendTransaction(\n    transaction: VersionedTransaction | Transaction,\n    signersOrOptions?: Array<Signer> | SendOptions,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if ('version' in transaction) {\n      if (signersOrOptions && Array.isArray(signersOrOptions)) {\n        throw new Error('Invalid arguments');\n      }\n\n      const wireTransaction = transaction.serialize();\n      return await this.sendRawTransaction(wireTransaction, signersOrOptions);\n    }\n\n    if (signersOrOptions === undefined || !Array.isArray(signersOrOptions)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = signersOrOptions;\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      (async () => {\n        try {\n          await this._rpcWebSocket.notify('ping');\n          // eslint-disable-next-line no-empty\n        } catch {}\n      })();\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration =\n      (this._rpcWebSocketGeneration + 1) % Number.MAX_SAFE_INTEGER;\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(\n      this._subscriptionsByHash as Record<SubscriptionConfigHash, Subscription>,\n    ).forEach(([hash, subscription]) => {\n      this._setSubscription(hash, {\n        ...subscription,\n        state: 'pending',\n      });\n    });\n  }\n\n  /**\n   * @internal\n   */\n  private _setSubscription(\n    hash: SubscriptionConfigHash,\n    nextSubscription: Subscription,\n  ) {\n    const prevState = this._subscriptionsByHash[hash]?.state;\n    this._subscriptionsByHash[hash] = nextSubscription;\n    if (prevState !== nextSubscription.state) {\n      const stateChangeCallbacks =\n        this._subscriptionStateChangeCallbacksByHash[hash];\n      if (stateChangeCallbacks) {\n        stateChangeCallbacks.forEach(cb => {\n          try {\n            cb(nextSubscription.state);\n            // eslint-disable-next-line no-empty\n          } catch {}\n        });\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  private _onSubscriptionStateChange(\n    clientSubscriptionId: ClientSubscriptionId,\n    callback: SubscriptionStateChangeCallback,\n  ): SubscriptionStateChangeDisposeFn {\n    const hash =\n      this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n    if (hash == null) {\n      return () => {};\n    }\n    const stateChangeCallbacks = (this._subscriptionStateChangeCallbacksByHash[\n      hash\n    ] ||= new Set());\n    stateChangeCallbacks.add(callback);\n    return () => {\n      stateChangeCallbacks.delete(callback);\n      if (stateChangeCallbacks.size === 0) {\n        delete this._subscriptionStateChangeCallbacksByHash[hash];\n      }\n    };\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all(\n      // Don't be tempted to change this to `Object.entries`. We call\n      // `_updateSubscriptions` recursively when processing the state,\n      // so it's important that we look up the *current* version of\n      // each subscription, every time we process a hash.\n      Object.keys(this._subscriptionsByHash).map(async hash => {\n        const subscription = this._subscriptionsByHash[hash];\n        if (subscription === undefined) {\n          // This entry has since been deleted. Skip.\n          return;\n        }\n        switch (subscription.state) {\n          case 'pending':\n          case 'unsubscribed':\n            if (subscription.callbacks.size === 0) {\n              /**\n               * You can end up here when:\n               *\n               * - a subscription has recently unsubscribed\n               *   without having new callbacks added to it\n               *   while the unsubscribe was in flight, or\n               * - when a pending subscription has its\n               *   listeners removed before a request was\n               *   sent to the server.\n               *\n               * Being that nobody is interested in this\n               * subscription any longer, delete it.\n               */\n              delete this._subscriptionsByHash[hash];\n              if (subscription.state === 'unsubscribed') {\n                delete this._subscriptionCallbacksByServerSubscriptionId[\n                  subscription.serverSubscriptionId\n                ];\n              }\n              await this._updateSubscriptions();\n              return;\n            }\n            await (async () => {\n              const {args, method} = subscription;\n              try {\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'subscribing',\n                });\n                const serverSubscriptionId: ServerSubscriptionId =\n                  (await this._rpcWebSocket.call(method, args)) as number;\n                this._setSubscription(hash, {\n                  ...subscription,\n                  serverSubscriptionId,\n                  state: 'subscribed',\n                });\n                this._subscriptionCallbacksByServerSubscriptionId[\n                  serverSubscriptionId\n                ] = subscription.callbacks;\n                await this._updateSubscriptions();\n              } catch (e) {\n                if (e instanceof Error) {\n                  console.error(\n                    `${method} error for argument`,\n                    args,\n                    e.message,\n                  );\n                }\n                if (!isCurrentConnectionStillActive()) {\n                  return;\n                }\n                // TODO: Maybe add an 'errored' state or a retry limit?\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'pending',\n                });\n                await this._updateSubscriptions();\n              }\n            })();\n            break;\n          case 'subscribed':\n            if (subscription.callbacks.size === 0) {\n              // By the time we successfully set up a subscription\n              // with the server, the client stopped caring about it.\n              // Tear it down now.\n              await (async () => {\n                const {serverSubscriptionId, unsubscribeMethod} = subscription;\n                if (\n                  this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)\n                ) {\n                  /**\n                   * Special case.\n                   * If we're dealing with a subscription that has been auto-\n                   * disposed by the RPC, then we can skip the RPC call to\n                   * tear down the subscription here.\n                   *\n                   * NOTE: There is a proposal to eliminate this special case, here:\n                   * https://github.com/solana-labs/solana/issues/18892\n                   */\n                  this._subscriptionsAutoDisposedByRpc.delete(\n                    serverSubscriptionId,\n                  );\n                } else {\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  try {\n                    await this._rpcWebSocket.call(unsubscribeMethod, [\n                      serverSubscriptionId,\n                    ]);\n                  } catch (e) {\n                    if (e instanceof Error) {\n                      console.error(`${unsubscribeMethod} error:`, e.message);\n                    }\n                    if (!isCurrentConnectionStillActive()) {\n                      return;\n                    }\n                    // TODO: Maybe add an 'errored' state or a retry limit?\n                    this._setSubscription(hash, {\n                      ...subscription,\n                      state: 'subscribed',\n                    });\n                    await this._updateSubscriptions();\n                    return;\n                  }\n                }\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'unsubscribed',\n                });\n                await this._updateSubscriptions();\n              })();\n            }\n            break;\n          case 'subscribing':\n          case 'unsubscribing':\n            break;\n        }\n      }),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  private _handleServerNotification<\n    TCallback extends SubscriptionConfig['callback'],\n  >(\n    serverSubscriptionId: ServerSubscriptionId,\n    callbackArgs: Parameters<TCallback>,\n  ): void {\n    const callbacks =\n      this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n          // I failed to find a way to convince TypeScript that `cb` is of type\n          // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n          // See https://github.com/microsoft/TypeScript/issues/47615\n          // @ts-ignore\n          ...callbackArgs,\n        );\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const {result, subscription} = create(\n      notification,\n      AccountNotificationResult,\n    );\n    this._handleServerNotification<AccountChangeCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  private _makeSubscription(\n    subscriptionConfig: SubscriptionConfig,\n    /**\n     * When preparing `args` for a call to `_makeSubscription`, be sure\n     * to carefully apply a default `commitment` property, if necessary.\n     *\n     * - If the user supplied a `commitment` use that.\n     * - Otherwise, if the `Connection::commitment` is set, use that.\n     * - Otherwise, set it to the RPC server default: `finalized`.\n     *\n     * This is extremely important to ensure that these two fundamentally\n     * identical subscriptions produce the same identifying hash:\n     *\n     * - A subscription made without specifying a commitment.\n     * - A subscription made where the commitment specified is the same\n     *   as the default applied to the subscription above.\n     *\n     * Example; these two subscriptions must produce the same hash:\n     *\n     * - An `accountSubscribe` subscription for `'PUBKEY'`\n     * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n     *   `'finalized'`.\n     *\n     * See the 'making a subscription with defaulted params omitted' test\n     * in `connection-subscriptions.ts` for more.\n     */\n    args: IWSRequestParams,\n  ): ClientSubscriptionId {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify(\n      [subscriptionConfig.method, args],\n      true /* isArrayProp */,\n    );\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending',\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionHashByClientSubscriptionId[clientSubscriptionId] = hash;\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[\n      clientSubscriptionId\n    ] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n      delete this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(\n        subscription !== undefined,\n        `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`,\n      );\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64',\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'accountSubscribe',\n        unsubscribeMethod: 'accountUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'account change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      ProgramAccountNotificationResult,\n    );\n    this._handleServerNotification<ProgramAccountChangeCallback>(subscription, [\n      {\n        accountId: result.value.pubkey,\n        accountInfo: result.value.account,\n      },\n      result.context,\n    ]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64' /* encoding */,\n      filters ? {filters: filters} : undefined /* extra */,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'programSubscribe',\n        unsubscribeMethod: 'programUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'program account change',\n    );\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [typeof filter === 'object' ? {mentions: [filter.toString()]} : filter],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'logsSubscribe',\n        unsubscribeMethod: 'logsUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id client subscription id to deregister.\n   */\n  async removeOnLogsListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const {result, subscription} = create(notification, LogsNotificationResult);\n    this._handleServerNotification<LogsCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const {result, subscription} = create(notification, SlotNotificationResult);\n    this._handleServerNotification<SlotChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotSubscribe',\n        unsubscribeMethod: 'slotUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SlotUpdateNotificationResult,\n    );\n    this._handleServerNotification<SlotUpdateCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotsUpdatesSubscribe',\n        unsubscribeMethod: 'slotsUpdatesUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotUpdateListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot update',\n    );\n  }\n\n  /**\n   * @internal\n   */\n\n  private async _unsubscribeClientSubscription(\n    clientSubscriptionId: ClientSubscriptionId,\n    subscriptionName: string,\n  ) {\n    const dispose =\n      this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn(\n        'Ignored unsubscribe request because an active subscription with id ' +\n          `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` +\n          'could not be found.',\n      );\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SignatureNotificationResult,\n    );\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification<SignatureSubscriptionCallback>(\n      subscription,\n      result.value === 'receivedSignature'\n        ? [{type: 'received'}, result.context]\n        : [{type: 'status', result: result.value}, result.context],\n    );\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [signature],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          if (notification.type === 'status') {\n            callback(notification.result, context);\n            // Signatures subscriptions are auto-removed by the RPC service\n            // so no need to explicitly send an unsubscribe message.\n            try {\n              this.removeSignatureListener(clientSubscriptionId);\n              // eslint-disable-next-line no-empty\n            } catch (_err) {\n              // Already removed.\n            }\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): ClientSubscriptionId {\n    const {commitment, ...extra} = {\n      ...options,\n      commitment:\n        (options && options.commitment) || this._commitment || 'finalized', // Apply connection/server default.\n    };\n    const args = this._buildArgs(\n      [signature],\n      commitment,\n      undefined /* encoding */,\n      extra,\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          callback(notification, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSignatureListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'signature result',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const {result, subscription} = create(notification, RootNotificationResult);\n    this._handleServerNotification<RootChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'rootSubscribe',\n        unsubscribeMethod: 'rootUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeRootChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'root change',\n    );\n  }\n}\n","import {generateKeypair, getPublicKey, Ed25519Keypair} from './utils/ed25519';\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param {Ed25519Keypair} keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    this._keypair = keypair ?? generateKeypair();\n  }\n\n  /**\n   * Generate a new random keypair\n   *\n   * @returns {Keypair} Keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(generateKeypair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options skip secret key validation\n   *\n   * @returns {Keypair} Keypair\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    if (secretKey.byteLength !== 64) {\n      throw new Error('bad secret key size');\n    }\n    const publicKey = secretKey.slice(32, 64);\n    if (!options || !options.skipValidation) {\n      const privateScalar = secretKey.slice(0, 32);\n      const computedPublicKey = getPublicKey(privateScalar);\n      for (let ii = 0; ii < 32; ii++) {\n        if (publicKey[ii] !== computedPublicKey[ii]) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n    }\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   *\n   * @returns {Keypair} Keypair\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    const publicKey = getPublicKey(seed);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * The public key for this keypair\n   *\n   * @returns {PublicKey} PublicKey\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   * @returns {Uint8Array} Secret key in an array of Uint8 bytes\n   */\n  get secretKey(): Uint8Array {\n    return new Uint8Array(this._keypair.secretKey);\n  }\n}\n","import {toBufferLE} from 'bigint-buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport * as bigintLayout from '../../utils/bigint';\nimport {SystemProgram} from '../system';\nimport {TransactionInstruction} from '../../transaction';\nimport {decodeData, encodeData, IInstructionInputData} from '../../instruction';\n\nexport * from './state';\n\nexport type CreateLookupTableParams = {\n  /** Account used to derive and control the new address lookup table. */\n  authority: PublicKey;\n  /** Account that will fund the new address lookup table. */\n  payer: PublicKey;\n  /** A recent slot must be used in the derivation path for each initialized table. */\n  recentSlot: bigint | number;\n};\n\nexport type FreezeLookupTableParams = {\n  /** Address lookup table account to freeze. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type ExtendLookupTableParams = {\n  /** Address lookup table account to extend. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Account that will fund the table reallocation.\n   * Not required if the reallocation has already been funded. */\n  payer?: PublicKey;\n  /** List of Public Keys to be added to the lookup table. */\n  addresses: Array<PublicKey>;\n};\n\nexport type DeactivateLookupTableParams = {\n  /** Address lookup table account to deactivate. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type CloseLookupTableParams = {\n  /** Address lookup table account to close. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Recipient of closed account lamports. */\n  recipient: PublicKey;\n};\n\n/**\n * An enumeration of valid LookupTableInstructionType's\n */\nexport type LookupTableInstructionType =\n  | 'CreateLookupTable'\n  | 'ExtendLookupTable'\n  | 'CloseLookupTable'\n  | 'FreezeLookupTable'\n  | 'DeactivateLookupTable';\n\ntype LookupTableInstructionInputData = {\n  CreateLookupTable: IInstructionInputData &\n    Readonly<{\n      recentSlot: bigint;\n      bumpSeed: number;\n    }>;\n  FreezeLookupTable: IInstructionInputData;\n  ExtendLookupTable: IInstructionInputData &\n    Readonly<{\n      numberOfAddresses: bigint;\n      addresses: Array<Uint8Array>;\n    }>;\n  DeactivateLookupTable: IInstructionInputData;\n  CloseLookupTable: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nexport const LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CreateLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64('recentSlot'),\n      BufferLayout.u8('bumpSeed'),\n    ]),\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['FreezeLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['ExtendLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64(),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'addresses',\n      ),\n    ]),\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['DeactivateLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CloseLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\nexport class AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): LookupTableInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n\n    let type: LookupTableInstructionType | undefined;\n    for (const [layoutType, layout] of Object.entries(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS,\n    )) {\n      if ((layout as any).index == index) {\n        type = layoutType as LookupTableInstructionType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error(\n        'Invalid Instruction. Should be a LookupTable Instruction',\n      );\n    }\n    return type;\n  }\n\n  static decodeCreateLookupTable(\n    instruction: TransactionInstruction,\n  ): CreateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n\n    const {recentSlot} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable,\n      instruction.data,\n    );\n\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot),\n    };\n  }\n\n  static decodeExtendLookupTable(\n    instruction: TransactionInstruction,\n  ): ExtendLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(\n        `invalid instruction; found ${instruction.keys.length} keys, expected at least 2`,\n      );\n    }\n\n    const {addresses} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable,\n      instruction.data,\n    );\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer:\n        instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer)),\n    };\n  }\n\n  static decodeCloseLookupTable(\n    instruction: TransactionInstruction,\n  ): CloseLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey,\n    };\n  }\n\n  static decodeFreezeLookupTable(\n    instruction: TransactionInstruction,\n  ): FreezeLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  static decodeDeactivateLookupTable(\n    instruction: TransactionInstruction,\n  ): DeactivateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not AddressLookupTable Program',\n      );\n    }\n  }\n  /**\n   * @internal\n   */\n  static checkKeysLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\nexport class AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static programId: PublicKey = new PublicKey(\n    'AddressLookupTab1e1111111111111111111111111',\n  );\n\n  static createLookupTable(params: CreateLookupTableParams) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync(\n      [params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)],\n      this.programId,\n    );\n\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed,\n    });\n\n    const keys = [\n      {\n        pubkey: lookupTableAddress,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ];\n\n    return [\n      new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data,\n      }),\n      lookupTableAddress,\n    ] as [TransactionInstruction, PublicKey];\n  }\n\n  static freezeLookupTable(params: FreezeLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static extendLookupTable(params: ExtendLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes()),\n    });\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    if (params.payer) {\n      keys.push(\n        {\n          pubkey: params.payer,\n          isSigner: true,\n          isWritable: true,\n        },\n        {\n          pubkey: SystemProgram.programId,\n          isSigner: false,\n          isWritable: false,\n        },\n      );\n    }\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static deactivateLookupTable(params: DeactivateLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static closeLookupTable(params: CloseLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.recipient,\n        isSigner: false,\n        isWritable: true,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {u64} from '../utils/bigint';\n\n/**\n * Compute Budget Instruction class\n */\nexport class ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): ComputeBudgetInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: ComputeBudgetInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS,\n    )) {\n      if (layout.index == typeIndex) {\n        type = ixType as ComputeBudgetInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error(\n        'Instruction type incorrect; not a ComputeBudgetInstruction',\n      );\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(\n    instruction: TransactionInstruction,\n  ): RequestUnitsParams {\n    this.checkProgramId(instruction.programId);\n    const {units, additionalFee} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits,\n      instruction.data,\n    );\n    return {units, additionalFee};\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(\n    instruction: TransactionInstruction,\n  ): RequestHeapFrameParams {\n    this.checkProgramId(instruction.programId);\n    const {bytes} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame,\n      instruction.data,\n    );\n    return {bytes};\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitLimitParams {\n    this.checkProgramId(instruction.programId);\n    const {units} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit,\n      instruction.data,\n    );\n    return {units};\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitPriceParams {\n    this.checkProgramId(instruction.programId);\n    const {microLamports} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice,\n      instruction.data,\n    );\n    return {microLamports};\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not ComputeBudgetProgram',\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\nexport type ComputeBudgetInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof ComputeBudgetInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'RequestUnits'\n  | 'RequestHeapFrame'\n  | 'SetComputeUnitLimit'\n  | 'SetComputeUnitPrice';\n\ntype ComputeBudgetInstructionInputData = {\n  RequestUnits: IInstructionInputData & Readonly<RequestUnitsParams>;\n  RequestHeapFrame: IInstructionInputData & Readonly<RequestHeapFrameParams>;\n  SetComputeUnitLimit: IInstructionInputData &\n    Readonly<SetComputeUnitLimitParams>;\n  SetComputeUnitPrice: IInstructionInputData &\n    Readonly<SetComputeUnitPriceParams>;\n};\n\n/**\n * Request units instruction params\n */\nexport interface RequestUnitsParams {\n  /** Units to request for transaction-wide compute */\n  units: number;\n  /** Prioritization fee lamports */\n  additionalFee: number;\n}\n\n/**\n * Request heap frame instruction params\n */\nexport type RequestHeapFrameParams = {\n  /** Requested transaction-wide program heap size in bytes. Must be multiple of 1024. Applies to each program, including CPIs. */\n  bytes: number;\n};\n\n/**\n * Set compute unit limit instruction params\n */\nexport interface SetComputeUnitLimitParams {\n  /** Transaction-wide compute unit limit */\n  units: number;\n}\n\n/**\n * Set compute unit price instruction params\n */\nexport interface SetComputeUnitPriceParams {\n  /** Transaction compute unit price used for prioritization fees */\n  microLamports: number | bigint;\n}\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nexport const COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in ComputeBudgetInstructionType]: InstructionType<\n    ComputeBudgetInstructionInputData[Instruction]\n  >;\n}>({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestUnits']\n    >([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u32('units'),\n      BufferLayout.u32('additionalFee'),\n    ]),\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestHeapFrame']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')]),\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitLimit']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('units')]),\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitPrice']\n    >([BufferLayout.u8('instruction'), u64('microLamports')]),\n  },\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nexport class ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n  static programId: PublicKey = new PublicKey(\n    'ComputeBudget111111111111111111111111111111',\n  );\n\n  /**\n   * @deprecated Instead, call {@link setComputeUnitLimit} and/or {@link setComputeUnitPrice}\n   */\n  static requestUnits(params: RequestUnitsParams): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static requestHeapFrame(\n    params: RequestHeapFrameParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitLimit(\n    params: SetComputeUnitLimitParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitPrice(\n    params: SetComputeUnitPriceParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports),\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {Keypair} from '../keypair';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {sign} from '../utils/ed25519';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    padding: number;\n    publicKeyInstructionIndex: number;\n    publicKeyOffset: number;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    const index =\n      instructionIndex == null\n        ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n        : instructionIndex;\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = sign(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {secp256k1} from '@noble/curves/secp256k1';\n\nexport const ecdsaSign = (\n  msgHash: Parameters<typeof secp256k1.sign>[0],\n  privKey: Parameters<typeof secp256k1.sign>[1],\n) => {\n  const signature = secp256k1.sign(msgHash, privKey);\n  return [signature.toCompactRawBytes(), signature.recovery!] as const;\n};\nexport const isValidPrivateKey = secp256k1.utils.isValidPrivateKey;\nexport const publicKeyCreate = secp256k1.getPublicKey;\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport {keccak_256} from '@noble/hashes/sha3';\n\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {publicKeyCreate, ecdsaSign} from '../utils/secp256k1';\nimport {toBuffer} from '../utils/to-buffer';\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    ethAddress: Uint8Array;\n    ethAddressInstructionIndex: number;\n    ethAddressOffset: number;\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    recoveryId: number;\n    signature: Uint8Array;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(keccak_256(toBuffer(publicKey))).slice(\n        -ETHEREUM_ADDRESS_BYTES,\n      );\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(\n        privateKey,\n        false /* isCompressed */,\n      ).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(keccak_256(toBuffer(message)));\n      const [signature, recoveryId] = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\ntype AuthorizedRaw = Readonly<{\n  staker: Uint8Array;\n  withdrawer: Uint8Array;\n}>;\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\ntype LockupRaw = Readonly<{\n  custodian: Uint8Array;\n  epoch: number;\n  unixTimestamp: number;\n}>;\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Split with seed transaction params\n */\nexport type SplitStakeWithSeedParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof StakeInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Merge'\n  | 'Split'\n  | 'Withdraw';\n\ntype StakeInstructionInputData = {\n  Authorize: IInstructionInputData &\n    Readonly<{\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  AuthorizeWithSeed: IInstructionInputData &\n    Readonly<{\n      authorityOwner: Uint8Array;\n      authoritySeed: string;\n      instruction: number;\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  Deactivate: IInstructionInputData;\n  Delegate: IInstructionInputData;\n  Initialize: IInstructionInputData &\n    Readonly<{\n      authorized: AuthorizedRaw;\n      lockup: LockupRaw;\n    }>;\n  Merge: IInstructionInputData;\n  Split: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n  Withdraw: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n};\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in StakeInstructionType]: InstructionType<\n    StakeInstructionInputData[Instruction]\n  >;\n}>({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct<StakeInstructionInputData['Initialize']>([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<StakeInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct<StakeInstructionInputData['Delegate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct<StakeInstructionInputData['Split']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct<StakeInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct<StakeInstructionInputData['Deactivate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct<StakeInstructionInputData['Merge']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct<StakeInstructionInputData['AuthorizeWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('newAuthorized'),\n        BufferLayout.u32('stakeAuthorizationType'),\n        Layout.rustString('authoritySeed'),\n        Layout.publicKey('authorityOwner'),\n      ],\n    ),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `StakeState::size_of()`:\n   * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params: SplitStakeParams): TransactionInstruction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params: SplitStakeWithSeedParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports,\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey,\n        seed,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(\n      this.splitInstruction({\n        stakePubkey,\n        authorizedPubkey,\n        splitStakePubkey,\n        lamports,\n      }),\n    );\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * AuthorizeWithSeed instruction params\n */\nexport type AuthorizeVoteWithSeedParams = {\n  currentAuthorityDerivedKeyBasePubkey: PublicKey;\n  currentAuthorityDerivedKeyOwnerPubkey: PublicKey;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n  votePubkey: PublicKey;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey,\n        currentAuthorityDerivedKeySeed,\n        newAuthorized,\n        voteAuthorizationType,\n      },\n    } = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    return {\n      currentAuthorityDerivedKeyBasePubkey: instruction.keys[2].pubkey,\n      currentAuthorityDerivedKeyOwnerPubkey: new PublicKey(\n        currentAuthorityDerivedKeyOwnerPubkey,\n      ),\n      currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n      votePubkey: instruction.keys[0].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof VoteInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  'Authorize' | 'AuthorizeWithSeed' | 'InitializeAccount' | 'Withdraw';\n\n/** @internal */\nexport type VoteAuthorizeWithSeedArgs = Readonly<{\n  currentAuthorityDerivedKeyOwnerPubkey: Uint8Array;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorized: Uint8Array;\n  voteAuthorizationType: number;\n}>;\ntype VoteInstructionInputData = {\n  Authorize: IInstructionInputData & {\n    newAuthorized: Uint8Array;\n    voteAuthorizationType: number;\n  };\n  AuthorizeWithSeed: IInstructionInputData & {\n    voteAuthorizeWithSeedArgs: VoteAuthorizeWithSeedArgs;\n  };\n  InitializeAccount: IInstructionInputData & {\n    voteInit: Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>;\n  };\n  Withdraw: IInstructionInputData & {\n    lamports: number;\n  };\n};\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in VoteInstructionType]: InstructionType<\n    VoteInstructionInputData[Instruction]\n  >;\n}>({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct<VoteInstructionInputData['InitializeAccount']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<VoteInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct<VoteInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<VoteInstructionInputData['AuthorizeWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteAuthorizeWithSeedArgs(),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   *\n   * KEEP IN SYNC WITH `VoteState::size_of()` in https://github.com/solana-labs/solana/blob/a474cb24b9238f5edcc982f65c0b37d4a1046f7e/sdk/program/src/vote/state/mod.rs#L340-L342\n   */\n  static space: number = process.env.TEST_LIVE ? 3762 : 3731;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account\n   * where the current Voter or Withdrawer authority is a derived key.\n   */\n  static authorizeWithSeed(params: AuthorizeVoteWithSeedParams): Transaction {\n    const {\n      currentAuthorityDerivedKeyBasePubkey,\n      currentAuthorityDerivedKeyOwnerPubkey,\n      currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n      votePubkey,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey: toBuffer(\n          currentAuthorityDerivedKeyOwnerPubkey.toBuffer(),\n        ),\n        currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        voteAuthorizationType: voteAuthorizationType.index,\n      },\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: currentAuthorityDerivedKeyBasePubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw safely from a Vote account.\n   *\n   * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n   * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n   * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n   * `withdraw` method directly.\n   */\n  static safeWithdraw(\n    params: WithdrawFromVoteAccountParams,\n    currentVoteAccountBalance: number,\n    rentExemptMinimum: number,\n  ): Transaction {\n    if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n      throw new Error(\n        'Withdraw will leave vote account with insuffcient funds.',\n      );\n    }\n    return VoteProgram.withdraw(params);\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './utils/shortvec-encoding';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBLIC_KEY_LENGTH));\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './utils/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = Readonly<{\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n}>;\n\nexport type AuthorizedVoter = Readonly<{\n  epoch: number;\n  authorizedVoter: PublicKey;\n}>;\n\ntype AuthorizedVoterRaw = Readonly<{\n  authorizedVoter: Uint8Array;\n  epoch: number;\n}>;\n\ntype PriorVoters = Readonly<{\n  buf: PriorVoterRaw[];\n  idx: number;\n  isEmpty: number;\n}>;\n\nexport type PriorVoter = Readonly<{\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\ntype PriorVoterRaw = Readonly<{\n  authorizedPubkey: Uint8Array;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\nexport type BlockTimestamp = Readonly<{\n  slot: number;\n  timestamp: number;\n}>;\n\ntype VoteAccountData = Readonly<{\n  authorizedVoters: AuthorizedVoterRaw[];\n  authorizedWithdrawer: Uint8Array;\n  commission: number;\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n  nodePubkey: Uint8Array;\n  priorVoters: PriorVoters;\n  rootSlot: number;\n  rootSlotValid: number;\n  votes: Lockout[];\n}>;\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct<VoteAccountData>([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq<Lockout>(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq<AuthorizedVoterRaw>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct<PriorVoters>(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq<EpochCredits>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct<BlockTimestamp>(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch,\n}: AuthorizedVoterRaw): AuthorizedVoter {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoterRaw): PriorVoter {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({buf, idx, isEmpty}: PriorVoters): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [\n    ...buf.slice(idx + 1).map(parsePriorVoters),\n    ...buf.slice(0, idx).map(parsePriorVoters),\n  ];\n}\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nconst base64 = require('base64-js')\nconst ieee754 = require('ieee754')\nconst customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nconst K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    const arr = new Uint8Array(1)\n    const proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  const buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  const valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  const b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  const length = byteLength(string, encoding) | 0\n  let buf = createBuffer(length)\n\n  const actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  const length = array.length < 0 ? 0 : checked(array.length) | 0\n  const buf = createBuffer(length)\n  for (let i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    const copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  let buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    const len = checked(obj.length) | 0\n    const buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  let x = a.length\n  let y = b.length\n\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  let i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  const buffer = Buffer.allocUnsafe(length)\n  let pos = 0\n  for (i = 0; i < list.length; ++i) {\n    let buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)\n        buf.copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  const len = string.length\n  const mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  let loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  const i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  const len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (let i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  const len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (let i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  const len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (let i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  const length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  let str = ''\n  const max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  let x = thisEnd - thisStart\n  let y = end - start\n  const len = Math.min(x, y)\n\n  const thisCopy = this.slice(thisStart, thisEnd)\n  const targetCopy = target.slice(start, end)\n\n  for (let i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  let indexSize = 1\n  let arrLength = arr.length\n  let valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  let i\n  if (dir) {\n    let foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      let found = true\n      for (let j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  const remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  const strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  let i\n  for (i = 0; i < length; ++i) {\n    const parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  const remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  const res = []\n\n  let i = start\n  while (i < end) {\n    const firstByte = buf[i]\n    let codePoint = null\n    let bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      let secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nconst MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  const len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  let res = ''\n  let i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  const len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  let out = ''\n  for (let i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  const bytes = buf.slice(start, end)\n  let res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (let i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  const len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  const newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  let val = this[offset + --byteLength]\n  let mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const lo = first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24\n\n  const hi = this[++offset] +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    last * 2 ** 24\n\n  return BigInt(lo) + (BigInt(hi) << BigInt(32))\n})\n\nBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const hi = first * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  const lo = this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last\n\n  return (BigInt(hi) << BigInt(32)) + BigInt(lo)\n})\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let i = byteLength\n  let mul = 1\n  let val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = this[offset + 4] +\n    this[offset + 5] * 2 ** 8 +\n    this[offset + 6] * 2 ** 16 +\n    (last << 24) // Overflow\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24)\n})\n\nBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = (first << 24) + // Overflow\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last)\n})\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let mul = 1\n  let i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction wrtBigUInt64LE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  return offset\n}\n\nfunction wrtBigUInt64BE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset + 7] = lo\n  lo = lo >> 8\n  buf[offset + 6] = lo\n  lo = lo >> 8\n  buf[offset + 5] = lo\n  lo = lo >> 8\n  buf[offset + 4] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset + 3] = hi\n  hi = hi >> 8\n  buf[offset + 2] = hi\n  hi = hi >> 8\n  buf[offset + 1] = hi\n  hi = hi >> 8\n  buf[offset] = hi\n  return offset + 8\n}\n\nBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = 0\n  let mul = 1\n  let sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  let sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  const len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      const code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  let i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    const bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    const len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// CUSTOM ERRORS\n// =============\n\n// Simplified versions from Node, changed for Buffer-only usage\nconst errors = {}\nfunction E (sym, getMessage, Base) {\n  errors[sym] = class NodeError extends Base {\n    constructor () {\n      super()\n\n      Object.defineProperty(this, 'message', {\n        value: getMessage.apply(this, arguments),\n        writable: true,\n        configurable: true\n      })\n\n      // Add the error code to the name to include it in the stack trace.\n      this.name = `${this.name} [${sym}]`\n      // Access the stack to generate the error message including the error code\n      // from the name.\n      this.stack // eslint-disable-line no-unused-expressions\n      // Reset the name to the actual name.\n      delete this.name\n    }\n\n    get code () {\n      return sym\n    }\n\n    set code (value) {\n      Object.defineProperty(this, 'code', {\n        configurable: true,\n        enumerable: true,\n        value,\n        writable: true\n      })\n    }\n\n    toString () {\n      return `${this.name} [${sym}]: ${this.message}`\n    }\n  }\n}\n\nE('ERR_BUFFER_OUT_OF_BOUNDS',\n  function (name) {\n    if (name) {\n      return `${name} is outside of buffer bounds`\n    }\n\n    return 'Attempt to access memory outside buffer bounds'\n  }, RangeError)\nE('ERR_INVALID_ARG_TYPE',\n  function (name, actual) {\n    return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`\n  }, TypeError)\nE('ERR_OUT_OF_RANGE',\n  function (str, range, input) {\n    let msg = `The value of \"${str}\" is out of range.`\n    let received = input\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n      received = addNumericalSeparator(String(input))\n    } else if (typeof input === 'bigint') {\n      received = String(input)\n      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n        received = addNumericalSeparator(received)\n      }\n      received += 'n'\n    }\n    msg += ` It must be ${range}. Received ${received}`\n    return msg\n  }, RangeError)\n\nfunction addNumericalSeparator (val) {\n  let res = ''\n  let i = val.length\n  const start = val[0] === '-' ? 1 : 0\n  for (; i >= start + 4; i -= 3) {\n    res = `_${val.slice(i - 3, i)}${res}`\n  }\n  return `${val.slice(0, i)}${res}`\n}\n\n// CHECK FUNCTIONS\n// ===============\n\nfunction checkBounds (buf, offset, byteLength) {\n  validateNumber(offset, 'offset')\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\n    boundsError(offset, buf.length - (byteLength + 1))\n  }\n}\n\nfunction checkIntBI (value, min, max, buf, offset, byteLength) {\n  if (value > max || value < min) {\n    const n = typeof min === 'bigint' ? 'n' : ''\n    let range\n    if (byteLength > 3) {\n      if (min === 0 || min === BigInt(0)) {\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`\n      } else {\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +\n                `${(byteLength + 1) * 8 - 1}${n}`\n      }\n    } else {\n      range = `>= ${min}${n} and <= ${max}${n}`\n    }\n    throw new errors.ERR_OUT_OF_RANGE('value', range, value)\n  }\n  checkBounds(buf, offset, byteLength)\n}\n\nfunction validateNumber (value, name) {\n  if (typeof value !== 'number') {\n    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)\n  }\n}\n\nfunction boundsError (value, length, type) {\n  if (Math.floor(value) !== value) {\n    validateNumber(value, type)\n    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)\n  }\n\n  if (length < 0) {\n    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()\n  }\n\n  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',\n                                    `>= ${type ? 1 : 0} and <= ${length}`,\n                                    value)\n}\n\n// HELPER FUNCTIONS\n// ================\n\nconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  let codePoint\n  const length = string.length\n  let leadSurrogate = null\n  const bytes = []\n\n  for (let i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  let c, hi, lo\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  let i\n  for (i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nconst hexSliceLookupTable = (function () {\n  const alphabet = '0123456789abcdef'\n  const table = new Array(256)\n  for (let i = 0; i < 16; ++i) {\n    const i16 = i * 16\n    for (let j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n\n// Return not function with Error if BigInt not supported\nfunction defineBigIntMethod (fn) {\n  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn\n}\n\nfunction BufferBigIntNotDefined () {\n  throw new Error('BigInt not supported')\n}\n","export const CHAIN_NAMESPACES = {\n  EIP155: \"eip155\",\n  SOLANA: \"solana\",\n  OTHER: \"other\",\n} as const;\n// eip155 for all evm chains\nexport type ChainNamespaceType = (typeof CHAIN_NAMESPACES)[keyof typeof CHAIN_NAMESPACES];\n\nexport const ADAPTER_NAMESPACES = {\n  EIP155: \"eip155\",\n  SOLANA: \"solana\",\n  MULTICHAIN: \"multichain\",\n} as const;\n// eip155 for all evm chains\nexport type AdapterNamespaceType = (typeof ADAPTER_NAMESPACES)[keyof typeof ADAPTER_NAMESPACES];\n\nexport type CustomChainConfig = {\n  chainNamespace: ChainNamespaceType;\n  /**\n   * The chain id of the chain\n   */\n  chainId: string;\n  /**\n   * RPC target Url for the chain\n   */\n  rpcTarget: string;\n  /**\n   * Display Name for the chain\n   */\n  displayName: string;\n  /**\n   * Url of the block explorer\n   */\n  blockExplorer: string;\n  /**\n   * Default currency ticker of the network (e.g: ETH)\n   */\n  ticker: string;\n  /**\n   * Name for currency ticker (e.g: `Ethereum`)\n   */\n  tickerName: string;\n  /**\n   * Number of decimals for the currency ticker (e.g: 18)\n   */\n  decimals?: number;\n};\n","import { CustomError } from \"ts-custom-error\";\n\n// @flow\nexport interface IWeb3AuthError extends CustomError {\n  code: number;\n  message: string;\n  toString(): string;\n}\n\nexport type ErrorCodes = {\n  [key: number]: string;\n};\n\nexport abstract class Web3AuthError extends CustomError implements IWeb3AuthError {\n  code: number;\n\n  message: string;\n\n  public constructor(code: number, message?: string) {\n    // takes care of stack and proto\n    super(message);\n\n    this.code = code;\n    this.message = message || \"\";\n    // Set name explicitly as minification can mangle class names\n    Object.defineProperty(this, \"name\", { value: \"Web3AuthError\" });\n  }\n\n  toJSON(): IWeb3AuthError {\n    return {\n      name: this.name,\n      code: this.code,\n      message: this.message,\n    };\n  }\n\n  toString(): string {\n    return JSON.stringify(this.toJSON());\n  }\n}\n\nexport class WalletInitializationError extends Web3AuthError {\n  protected static messages: ErrorCodes = {\n    5000: \"Custom\",\n    5001: \"Wallet is not found\",\n    5002: \"Wallet is not installed\",\n    5003: \"Wallet is not ready yet\",\n    5004: \"Wallet window is blocked\",\n    5005: \"Wallet window has been closed by the user\",\n    5006: \"Incompatible chain namespace provided\",\n    5007: \"Adapter has already been included\",\n    5008: \"Invalid provider Config\",\n    5009: \"Provider is not ready yet\",\n    5010: \"Failed to connect with rpc url\",\n    5011: \"Invalid params passed in\",\n    5013: \"Invalid network provided\",\n  };\n\n  public constructor(code: number, message?: string) {\n    // takes care of stack and proto\n    super(code, message);\n\n    // Set name explicitly as minification can mangle class names\n    Object.defineProperty(this, \"name\", { value: \"WalletInitializationError\" });\n  }\n\n  public static fromCode(code: number, extraMessage = \"\"): IWeb3AuthError {\n    return new WalletInitializationError(code, `${WalletInitializationError.messages[code]}, ${extraMessage}`);\n  }\n\n  // Custom methods\n  public static notFound(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5001, extraMessage);\n  }\n\n  public static notInstalled(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5002, extraMessage);\n  }\n\n  public static notReady(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5003, extraMessage);\n  }\n\n  public static windowBlocked(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5004, extraMessage);\n  }\n\n  public static windowClosed(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5005, extraMessage);\n  }\n\n  public static incompatibleChainNameSpace(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5006, extraMessage);\n  }\n\n  public static duplicateAdapterError(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5007, extraMessage);\n  }\n\n  public static invalidProviderConfigError(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5008, extraMessage);\n  }\n\n  public static providerNotReadyError(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5009, extraMessage);\n  }\n\n  public static rpcConnectionError(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5010, extraMessage);\n  }\n\n  public static invalidParams(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5011, extraMessage);\n  }\n\n  public static invalidNetwork(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5013, extraMessage);\n  }\n}\n\n/**\n * wallet login errors\n */\n\nexport class WalletLoginError extends Web3AuthError {\n  protected static messages: ErrorCodes = {\n    5000: \"Custom\",\n    5111: \"Failed to connect with wallet\",\n    5112: \"Failed to disconnect from wallet\",\n    5113: \"Wallet is not connected\",\n    5114: \"Wallet popup has been closed by the user\",\n    5115: \"User has already enabled mfa, please use the @web3auth/web3auth-web sdk for login with mfa\",\n  };\n\n  public constructor(code: number, message?: string) {\n    // takes care of stack and proto\n    super(code, message);\n\n    // Set name explicitly as minification can mangle class names\n    Object.defineProperty(this, \"name\", { value: \"WalletLoginError\" });\n  }\n\n  public static fromCode(code: number, extraMessage = \"\"): IWeb3AuthError {\n    return new WalletLoginError(code, `${WalletLoginError.messages[code]}. ${extraMessage}`);\n  }\n\n  public static connectionError(extraMessage = \"\"): IWeb3AuthError {\n    return WalletLoginError.fromCode(5111, extraMessage);\n  }\n\n  public static disconnectionError(extraMessage = \"\"): IWeb3AuthError {\n    return WalletLoginError.fromCode(5112, extraMessage);\n  }\n\n  public static notConnectedError(extraMessage = \"\"): IWeb3AuthError {\n    return WalletLoginError.fromCode(5113, extraMessage);\n  }\n\n  public static popupClosed(extraMessage = \"\"): IWeb3AuthError {\n    return WalletLoginError.fromCode(5114, extraMessage);\n  }\n\n  public static mfaEnabled(extraMessage = \"\"): IWeb3AuthError {\n    return WalletLoginError.fromCode(5115, extraMessage);\n  }\n}\n","export const MULTI_CHAIN_ADAPTERS = {\n  OPENLOGIN: \"openlogin\",\n  WALLET_CONNECT_V1: \"wallet-connect-v1\",\n  WALLET_CONNECT_V2: \"wallet-connect-v2\",\n};\n\nexport const SOLANA_ADAPTERS = {\n  TORUS_SOLANA: \"torus-solana\",\n  PHANTOM: \"phantom\",\n  SOLFLARE: \"solflare\",\n  SLOPE: \"slope\",\n  ...MULTI_CHAIN_ADAPTERS,\n};\n\nexport const EVM_ADAPTERS = {\n  TORUS_EVM: \"torus-evm\",\n  METAMASK: \"metamask\",\n  COINBASE: \"coinbase\",\n  ...MULTI_CHAIN_ADAPTERS,\n};\n\nexport const WALLET_ADAPTERS = {\n  ...EVM_ADAPTERS,\n  ...SOLANA_ADAPTERS,\n};\nexport type WALLET_ADAPTER_TYPE = (typeof WALLET_ADAPTERS)[keyof typeof WALLET_ADAPTERS];\nexport type SOLANA_ADAPTER_TYPE = (typeof SOLANA_ADAPTERS)[keyof typeof SOLANA_ADAPTERS];\nexport type EVM_ADAPTER_TYPE = (typeof EVM_ADAPTERS)[keyof typeof EVM_ADAPTERS];\nexport type MULTI_CHAIN_ADAPTER_TYPE = (typeof MULTI_CHAIN_ADAPTERS)[keyof typeof MULTI_CHAIN_ADAPTERS];\n\nexport const ADAPTER_NAMES = {\n  [MULTI_CHAIN_ADAPTERS.OPENLOGIN]: \"OpenLogin\",\n  [MULTI_CHAIN_ADAPTERS.WALLET_CONNECT_V1]: \"Wallet Connect v1\",\n  [MULTI_CHAIN_ADAPTERS.WALLET_CONNECT_V2]: \"Wallet Connect v2\",\n  [SOLANA_ADAPTERS.TORUS_SOLANA]: \"Torus\",\n  [SOLANA_ADAPTERS.PHANTOM]: \"Phantom\",\n  [SOLANA_ADAPTERS.SOLFLARE]: \"Solflare\",\n  [SOLANA_ADAPTERS.SLOPE]: \"Slope\",\n  [EVM_ADAPTERS.TORUS_EVM]: \"Torus\",\n  [EVM_ADAPTERS.METAMASK]: \"Metamask\",\n  [EVM_ADAPTERS.COINBASE]: \"Coinbase\",\n};\n","import { OPENLOGIN_NETWORK, OPENLOGIN_NETWORK_TYPE, OpenloginUserInfo } from \"@toruslabs/openlogin\";\nimport { SafeEventEmitter } from \"@toruslabs/openlogin-jrpc\";\n\nimport { getChainConfig } from \"../chain/config\";\nimport { AdapterNamespaceType, CHAIN_NAMESPACES, ChainNamespaceType, CustomChainConfig } from \"../chain/IChainInterface\";\nimport { WalletInitializationError, WalletLoginError } from \"../errors\";\nimport { SafeEventEmitterProvider } from \"../provider/IProvider\";\nimport { WALLET_ADAPTERS } from \"../wallet\";\n\nexport type UserInfo = OpenloginUserInfo;\n\nexport const ADAPTER_CATEGORY = {\n  EXTERNAL: \"external\",\n  IN_APP: \"in_app\",\n} as const;\nexport type ADAPTER_CATEGORY_TYPE = (typeof ADAPTER_CATEGORY)[keyof typeof ADAPTER_CATEGORY];\n\nexport interface AdapterInitOptions {\n  /**\n   * Whether to auto connect to the adapter based on redirect mode or saved adapters\n   */\n  autoConnect?: boolean;\n}\n\nexport const ADAPTER_STATUS = {\n  NOT_READY: \"not_ready\",\n  READY: \"ready\",\n  CONNECTING: \"connecting\",\n  CONNECTED: \"connected\",\n  DISCONNECTED: \"disconnected\",\n  ERRORED: \"errored\",\n} as const;\n\nexport const ADAPTER_EVENTS = {\n  ...ADAPTER_STATUS,\n  ADAPTER_DATA_UPDATED: \"adapter_data_updated\",\n} as const;\nexport type ADAPTER_STATUS_TYPE = (typeof ADAPTER_STATUS)[keyof typeof ADAPTER_STATUS];\n\nexport type CONNECTED_EVENT_DATA = {\n  adapter: string;\n  reconnected: boolean;\n};\n\nexport type UserAuthInfo = { idToken: string };\n\nexport interface BaseAdapterSettings {\n  clientId?: string;\n  sessionTime?: number;\n  chainConfig?: Partial<CustomChainConfig> & Pick<CustomChainConfig, \"chainNamespace\">;\n  web3AuthNetwork?: OPENLOGIN_NETWORK_TYPE;\n  useCoreKitKey?: boolean;\n}\n\nexport interface IAdapter<T> extends SafeEventEmitter {\n  adapterNamespace: AdapterNamespaceType;\n  currentChainNamespace: ChainNamespaceType;\n  chainConfigProxy: CustomChainConfig | null;\n  type: ADAPTER_CATEGORY_TYPE;\n  name: string;\n  sessionTime: number;\n  web3AuthNetwork: OPENLOGIN_NETWORK_TYPE;\n  clientId: string;\n  status: ADAPTER_STATUS_TYPE;\n  provider: SafeEventEmitterProvider | null;\n  adapterData?: unknown;\n  init(options?: AdapterInitOptions): Promise<void>;\n  disconnect(options?: { cleanup: boolean }): Promise<void>;\n  connect(params?: T): Promise<SafeEventEmitterProvider | null>;\n  getUserInfo(): Promise<Partial<UserInfo>>;\n  setAdapterSettings(adapterSettings: BaseAdapterSettings): void;\n  authenticateUser(): Promise<UserAuthInfo>;\n}\n\nexport abstract class BaseAdapter<T> extends SafeEventEmitter implements IAdapter<T> {\n  public adapterData?: unknown = {};\n\n  public sessionTime = 86400;\n\n  public clientId: string;\n\n  public web3AuthNetwork: OPENLOGIN_NETWORK_TYPE = OPENLOGIN_NETWORK.MAINNET;\n\n  protected rehydrated = false;\n\n  // should be added in constructor or from setAdapterSettings function\n  // before calling init function.\n  protected chainConfig: CustomChainConfig | null = null;\n\n  public abstract adapterNamespace: AdapterNamespaceType;\n\n  public abstract currentChainNamespace: ChainNamespaceType;\n\n  public abstract type: ADAPTER_CATEGORY_TYPE;\n\n  public abstract name: string;\n\n  public abstract status: ADAPTER_STATUS_TYPE;\n\n  constructor(options: BaseAdapterSettings = {}) {\n    super();\n    this.setAdapterSettings(options);\n  }\n\n  get chainConfigProxy(): CustomChainConfig | null {\n    return this.chainConfig ? { ...this.chainConfig } : null;\n  }\n\n  public abstract get provider(): SafeEventEmitterProvider | null;\n\n  public setAdapterSettings(options: BaseAdapterSettings): void {\n    if (this.status === ADAPTER_STATUS.READY) return;\n    if (options?.sessionTime) {\n      this.sessionTime = options.sessionTime;\n    }\n    if (options?.clientId) {\n      this.clientId = options.clientId;\n    }\n    if (options?.web3AuthNetwork) {\n      this.web3AuthNetwork = options.web3AuthNetwork;\n    }\n    const customChainConfig = options.chainConfig;\n    if (customChainConfig) {\n      if (!customChainConfig.chainNamespace) throw WalletInitializationError.notReady(\"ChainNamespace is required while setting chainConfig\");\n      this.currentChainNamespace = customChainConfig.chainNamespace;\n      // chainId is optional in this function.\n      // we go with mainnet chainId by default.\n      const defaultChainConfig = getChainConfig(customChainConfig.chainNamespace, customChainConfig.chainId);\n      // NOTE: It is being forced casted to CustomChainConfig to handle OTHER Chainnamespace\n      // where chainConfig is not required.\n      const finalChainConfig = { ...(defaultChainConfig || {}), ...customChainConfig } as CustomChainConfig;\n\n      this.chainConfig = finalChainConfig;\n    }\n  }\n\n  checkConnectionRequirements(): void {\n    // we reconnect without killing existing wallet connect session on calling connect again.\n    if (this.name === WALLET_ADAPTERS.WALLET_CONNECT_V1 && this.status === ADAPTER_STATUS.CONNECTING) return;\n    else if (this.status === ADAPTER_STATUS.CONNECTING) throw WalletInitializationError.notReady(\"Already connecting\");\n\n    if (this.status === ADAPTER_STATUS.CONNECTED) throw WalletLoginError.connectionError(\"Already connected\");\n    if (this.status !== ADAPTER_STATUS.READY)\n      throw WalletLoginError.connectionError(\n        \"Wallet adapter is not ready yet, Please wait for init function to resolve before calling connect/connectTo function\"\n      );\n  }\n\n  checkInitializationRequirements(): void {\n    if (!this.clientId) throw WalletInitializationError.invalidParams(\"Please initialize Web3Auth with a valid clientId in constructor\");\n    if (!this.chainConfig) throw WalletInitializationError.invalidParams(\"rpcTarget is required in chainConfig\");\n    if (!this.chainConfig.rpcTarget && this.chainConfig.chainNamespace !== CHAIN_NAMESPACES.OTHER) {\n      throw WalletInitializationError.invalidParams(\"rpcTarget is required in chainConfig\");\n    }\n\n    if (!this.chainConfig.chainId && this.chainConfig.chainNamespace !== CHAIN_NAMESPACES.OTHER) {\n      throw WalletInitializationError.invalidParams(\"chainID is required in chainConfig\");\n    }\n    if (this.status === ADAPTER_STATUS.NOT_READY) return;\n    if (this.status === ADAPTER_STATUS.CONNECTED) throw WalletInitializationError.notReady(\"Already connected\");\n    if (this.status === ADAPTER_STATUS.READY) throw WalletInitializationError.notReady(\"Adapter is already initialized\");\n  }\n\n  checkDisconnectionRequirements(): void {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.disconnectionError(\"Not connected with wallet\");\n  }\n\n  updateAdapterData(data: unknown): void {\n    this.adapterData = data;\n    this.emit(ADAPTER_EVENTS.ADAPTER_DATA_UPDATED, { adapterName: this.name, data });\n  }\n\n  abstract init(options?: AdapterInitOptions): Promise<void>;\n  abstract connect(params?: T): Promise<SafeEventEmitterProvider | null>;\n  abstract disconnect(): Promise<void>;\n  abstract getUserInfo(): Promise<Partial<UserInfo>>;\n  abstract authenticateUser(): Promise<UserAuthInfo>;\n}\n\nexport interface BaseAdapterConfig {\n  label: string;\n  showOnModal?: boolean;\n  showOnMobile?: boolean;\n  showOnDesktop?: boolean;\n}\n\nexport type LoginMethodConfig = Record<\n  string,\n  {\n    /**\n     * Display Name. If not provided, we use the default for openlogin app\n     */\n    name: string;\n    /**\n     * Description for button. If provided, it renders as a full length button. else, icon button\n     */\n    description?: string;\n    /**\n     * Logo to be shown on mouse hover. If not provided, we use the default for openlogin app\n     */\n    logoHover?: string;\n    /**\n     * Logo to be shown on dark background (dark theme). If not provided, we use the default for openlogin app\n     */\n    logoLight?: string;\n    /**\n     * Logo to be shown on light background (light theme). If not provided, we use the default for openlogin app\n     */\n    logoDark?: string;\n    /**\n     * Show login button on the main list\n     */\n    mainOption?: boolean;\n    /**\n     * Whether to show the login button on modal or not\n     */\n    showOnModal?: boolean;\n    /**\n     * Whether to show the login button on desktop\n     */\n    showOnDesktop?: boolean;\n    /**\n     * Whether to show the login button on mobile\n     */\n    showOnMobile?: boolean;\n  }\n>;\n\nexport interface IWalletConnectExtensionAdapter {\n  name: string;\n  chains: ChainNamespaceType[];\n  logo: string;\n  mobile: {\n    native: string;\n    universal: string;\n  };\n  desktop: {\n    native: string;\n    universal: string;\n  };\n}\n\nexport interface WalletConnectV1Data {\n  uri: string;\n  extensionAdapters: IWalletConnectExtensionAdapter[];\n}\n\nexport interface IAdapterDataEvent {\n  adapterName: string;\n  data: unknown;\n}\n\nexport interface INetworkSwitchProvider {\n  addChain(chainConfig: CustomChainConfig): Promise<void>;\n  switchChain(chainId: string): Promise<void>;\n}\nexport interface INetworkSwitch {\n  addNetwork(params: { chainConfig: CustomChainConfig; appOrigin: string }): Promise<boolean>;\n  switchNetwork(params: { currentChainConfig: CustomChainConfig; newChainConfig: Partial<CustomChainConfig>; appOrigin: string }): Promise<boolean>;\n}\n\nexport abstract class BaseNetworkSwitch implements INetworkSwitch {\n  abstract switchNetwork(params: {\n    currentChainConfig: CustomChainConfig;\n    newChainConfig: Partial<CustomChainConfig>;\n    appOrigin: string;\n  }): Promise<boolean>;\n\n  abstract addNetwork(params: { chainConfig: CustomChainConfig; appOrigin: string }): Promise<boolean>;\n}\n","import loglevel from \"loglevel\";\n\nexport default loglevel.getLogger(\"web3auth-logger\");\n","export function storageAvailable(type: \"sessionStorage\" | \"localStorage\"): boolean {\n  let storageExists = false;\n  let storageLength = 0;\n  let storage: Storage;\n  try {\n    storage = (window as any)[type];\n    storageExists = true;\n    storageLength = storage.length;\n    const x = \"__storage_test__\";\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return true;\n  } catch (error: unknown) {\n    const _error = error as DOMException;\n    return !!(\n      _error &&\n      // everything except Firefox\n      (_error.code === 22 ||\n        // Firefox\n        _error.code === 1014 ||\n        // test name field too, because code might not be present\n        // everything except Firefox\n        _error.name === \"QuotaExceededError\" ||\n        // Firefox\n        _error.name === \"NS_ERROR_DOM_QUOTA_REACHED\") &&\n      // acknowledge QuotaExceededError only if there's something already stored\n      storageExists &&\n      storageLength !== 0\n    );\n  }\n}\n\nexport const isHexStrict = (hex: string): boolean => {\n  return (typeof hex === \"string\" || typeof hex === \"number\") && /^(-)?0x[0-9a-f]*$/i.test(hex);\n};\n","import { createFetchMiddleware } from \"@toruslabs/base-controllers\";\nimport { JRPCEngineEndCallback, JRPCEngineNextCallback, JRPCMiddleware, JRPCRequest, JRPCResponse, mergeMiddleware } from \"@toruslabs/openlogin-jrpc\";\nimport { CustomChainConfig } from \"@web3auth/base\";\n\nexport function createChainIdMiddleware(chainId: string): JRPCMiddleware<unknown, unknown> {\n  return (req: JRPCRequest<unknown>, res: JRPCResponse<string>, next: JRPCEngineNextCallback, end: JRPCEngineEndCallback) => {\n    if (req.method === \"solana_chainId\") {\n      res.result = chainId;\n      return end();\n    }\n    return next();\n  };\n}\n\nexport function createProviderConfigMiddleware(providerConfig: Omit<CustomChainConfig, \"chainNamespace\">): JRPCMiddleware<unknown, unknown> {\n  return (\n    req: JRPCRequest<unknown>,\n    res: JRPCResponse<Omit<CustomChainConfig, \"chainNamespace\">>,\n    next: JRPCEngineNextCallback,\n    end: JRPCEngineEndCallback\n  ) => {\n    if (req.method === \"solana_provider_config\") {\n      res.result = providerConfig;\n      return end();\n    }\n    return next();\n  };\n}\n\nexport function createConfigMiddleware(providerConfig: Omit<CustomChainConfig, \"chainNamespace\">): JRPCMiddleware<unknown, unknown> {\n  const { chainId } = providerConfig;\n\n  return mergeMiddleware([createChainIdMiddleware(chainId), createProviderConfigMiddleware(providerConfig)]);\n}\n\nexport function createJsonRpcClient(providerConfig: Omit<CustomChainConfig, \"chainNamespace\">): {\n  networkMiddleware: JRPCMiddleware<unknown, unknown>;\n  fetchMiddleware: JRPCMiddleware<unknown, unknown>;\n} {\n  const { rpcTarget } = providerConfig;\n  const fetchMiddleware = createFetchMiddleware({ rpcTarget });\n  const networkMiddleware = mergeMiddleware([createConfigMiddleware(providerConfig), fetchMiddleware]);\n  return { networkMiddleware, fetchMiddleware };\n}\n","import { createAsyncMiddleware, JRPCMiddleware, JRPCRequest, mergeMiddleware } from \"@toruslabs/openlogin-jrpc\";\n\nimport { TransactionOrVersionedTransaction } from \"../interface\";\n\nexport interface IProviderHandlers {\n  requestAccounts: (req: JRPCRequest<unknown>) => Promise<string[]>;\n  getAccounts: (req: JRPCRequest<unknown>) => Promise<string[]>;\n  getPrivateKey: (req: JRPCRequest<unknown>) => Promise<string>;\n  signTransaction: (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>) => Promise<TransactionOrVersionedTransaction>;\n  signAllTransactions: (req: JRPCRequest<{ message: TransactionOrVersionedTransaction[] }>) => Promise<TransactionOrVersionedTransaction[]>;\n  signAndSendTransaction: (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>) => Promise<{ signature: string }>;\n  getSecretKey: (req: JRPCRequest<unknown>) => Promise<string>;\n  signMessage: (req: JRPCRequest<{ message: Uint8Array; display?: string }>) => Promise<Uint8Array>;\n}\n\nexport function createGetAccountsMiddleware({ getAccounts }: { getAccounts: IProviderHandlers[\"getAccounts\"] }): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware(async (request, response, next) => {\n    const { method } = request;\n    if (method !== \"getAccounts\") return next();\n\n    if (!getAccounts) throw new Error(\"WalletMiddleware - opts.getAccounts not provided\");\n    // This calls from the prefs controller\n    const accounts = await getAccounts(request);\n    response.result = accounts;\n    return undefined;\n  });\n}\n\nexport function createRequestAccountsMiddleware({\n  requestAccounts,\n}: {\n  requestAccounts: IProviderHandlers[\"requestAccounts\"];\n}): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware(async (request, response, next) => {\n    const { method } = request;\n    if (method !== \"requestAccounts\") return next();\n\n    if (!requestAccounts) throw new Error(\"WalletMiddleware - opts.requestAccounts not provided\");\n    // This calls the UI login function\n    const accounts = await requestAccounts(request);\n    response.result = accounts;\n    return undefined;\n  });\n}\n\nexport function createGenericJRPCMiddleware<T, U>(\n  targetMethod: string,\n  handler: (req: JRPCRequest<T>) => Promise<U>\n): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware<T, unknown>(async (request, response, next) => {\n    const { method } = request;\n    if (method !== targetMethod) return next();\n\n    if (!handler) throw new Error(`WalletMiddleware - ${targetMethod} not provided`);\n\n    const result = await handler(request);\n\n    response.result = result;\n    return undefined;\n  });\n}\n\nexport function createSolanaMiddleware(providerHandlers: IProviderHandlers): JRPCMiddleware<unknown, unknown> {\n  const { getAccounts, requestAccounts, signTransaction, signAndSendTransaction, signAllTransactions, signMessage, getPrivateKey, getSecretKey } =\n    providerHandlers;\n\n  return mergeMiddleware([\n    createRequestAccountsMiddleware({ requestAccounts }),\n    createGetAccountsMiddleware({ getAccounts }),\n    createGenericJRPCMiddleware<{ message: TransactionOrVersionedTransaction }, TransactionOrVersionedTransaction>(\n      \"signTransaction\",\n      signTransaction\n    ),\n    createGenericJRPCMiddleware<{ message: TransactionOrVersionedTransaction }, { signature: string }>(\n      \"signAndSendTransaction\",\n      signAndSendTransaction\n    ),\n    createGenericJRPCMiddleware<{ message: TransactionOrVersionedTransaction[] }, TransactionOrVersionedTransaction[]>(\n      \"signAllTransactions\",\n      signAllTransactions\n    ),\n    createGenericJRPCMiddleware<{ message: Uint8Array }, Uint8Array>(\"signMessage\", signMessage),\n    createGenericJRPCMiddleware<void, string>(\"solanaPrivateKey\", getPrivateKey),\n    createGenericJRPCMiddleware<void, string>(\"private_key\", getPrivateKey),\n    createGenericJRPCMiddleware<void, string>(\"solanaSecretKey\", getSecretKey),\n  ]);\n}\nexport interface AddSolanaChainParameter {\n  chainId: string; // A 0x-prefixed hexadecimal string\n  chainName: string;\n  nativeCurrency: {\n    name: string;\n    symbol: string; // 2-6 characters long\n    decimals: 18;\n  };\n  rpcUrls: string[];\n  blockExplorerUrls?: string[];\n}\n\nexport interface IChainSwitchHandlers {\n  addNewChainConfig: (req: JRPCRequest<AddSolanaChainParameter>) => Promise<void>;\n  switchSolanaChain: (req: JRPCRequest<{ chainId: string }>) => Promise<void>;\n}\nexport function createChainSwitchMiddleware({ addNewChainConfig, switchSolanaChain }: IChainSwitchHandlers): JRPCMiddleware<unknown, unknown> {\n  return mergeMiddleware([\n    createGenericJRPCMiddleware<AddSolanaChainParameter, void>(\"addSolanaChain\", addNewChainConfig),\n    createGenericJRPCMiddleware<{ chainId: string }, void>(\"switchSolanaChain\", switchSolanaChain),\n  ]);\n}\n\nexport interface IAccountHandlers {\n  updatePrivatekey: (req: JRPCRequest<{ privateKey: string }>) => Promise<void>;\n}\nexport function createAccountMiddleware({ updatePrivatekey }: IAccountHandlers): JRPCMiddleware<unknown, unknown> {\n  return mergeMiddleware([createGenericJRPCMiddleware<{ privateKey: string }, void>(\"updateAccount\", updatePrivatekey)]);\n}\n","import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine, JRPCMiddleware } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, CustomChainConfig } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\n\nimport { createConfigMiddleware } from \"../../../rpc/JrpcClient\";\nimport { createSolanaMiddleware, IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nexport abstract class BaseInjectedProvider<P> extends BaseProvider<BaseProviderConfig, BaseProviderState, P> {\n  constructor({ config, state }: { config: BaseProviderConfig; state?: BaseProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.SOLANA } }, state });\n  }\n\n  public async switchChain(_: { chainId: string }): Promise<void> {\n    return Promise.resolve();\n  }\n\n  public async setupProvider(injectedProvider: P): Promise<void> {\n    const engine = new JRPCEngine();\n\n    const providerHandlers = this.getProviderHandlers(injectedProvider);\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n    engine.push(solanaMiddleware);\n\n    const configMiddleware = createConfigMiddleware(this.config.chainConfig as CustomChainConfig);\n    engine.push(configMiddleware);\n\n    const injectedProviderProxy = this.getInjectedProviderProxy(injectedProvider);\n    if (injectedProviderProxy) {\n      engine.push(injectedProviderProxy);\n    }\n\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await this.lookupNetwork();\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    const { chainConfig } = this.config;\n    this.update({\n      chainId: chainConfig.chainId,\n    });\n    return chainConfig.chainId || \"\";\n  }\n\n  protected getInjectedProviderProxy(_: P): JRPCMiddleware<unknown, unknown> {\n    return undefined;\n  }\n\n  protected abstract getProviderHandlers(injectedProvider: P): IProviderHandlers;\n}\n","import { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport bs58 from \"bs58\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { IBaseWalletProvider, TransactionOrVersionedTransaction } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nexport const getBaseProviderHandlers = (injectedProvider: IBaseWalletProvider): IProviderHandlers => {\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      return injectedProvider.publicKey ? [bs58.encode(injectedProvider.publicKey.toBytes())] : [];\n    },\n    getAccounts: async () => (injectedProvider.publicKey ? [bs58.encode(injectedProvider.publicKey.toBytes())] : []),\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getSecretKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    signTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<TransactionOrVersionedTransaction> => {\n      const transaction = await injectedProvider.signTransaction(req.params.message);\n      return transaction;\n    },\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array; display?: \"utf8\" | \"hex\" }>): Promise<Uint8Array> => {\n      const sigData = await injectedProvider.signMessage(req.params.message, req.params.display);\n      return sigData.signature;\n    },\n    signAllTransactions: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction[] }>): Promise<TransactionOrVersionedTransaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const transaction = await injectedProvider.signAllTransactions(req.params.message);\n      return transaction;\n    },\n    signAndSendTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<{ signature: string }> => {\n      const txRes = await injectedProvider.signAndSendTransaction(req.params.message);\n      return { signature: txRes.signature };\n    },\n  };\n  return providerHandlers;\n};\n","import { createAsyncMiddleware, JRPCEngineNextCallback, JRPCMiddleware, JRPCRequest, JRPCResponse } from \"@toruslabs/openlogin-jrpc\";\n\nimport { InjectedProvider } from \"./interface\";\n\nexport function createInjectedProviderProxyMiddleware(provider: InjectedProvider): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware(async (req: JRPCRequest<unknown[]>, res: JRPCResponse<unknown>, _next: JRPCEngineNextCallback) => {\n    const result = await provider.request({\n      ...req,\n    });\n    res.result = result;\n  });\n}\n","import { JRPCMiddleware } from \"@toruslabs/openlogin-jrpc\";\n\nimport { IPhantomWalletProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { BaseInjectedProvider } from \"../base/baseInjectedProvider\";\nimport { getBaseProviderHandlers } from \"../base/providerHandlers\";\nimport { createInjectedProviderProxyMiddleware } from \"../injectedProviderProxy\";\n\nexport class PhantomInjectedProvider extends BaseInjectedProvider<IPhantomWalletProvider> {\n  protected getProviderHandlers(injectedProvider: IPhantomWalletProvider): IProviderHandlers {\n    return getBaseProviderHandlers(injectedProvider);\n  }\n\n  protected getInjectedProviderProxy(injectedProvider: IPhantomWalletProvider): JRPCMiddleware<unknown, unknown> {\n    return createInjectedProviderProxyMiddleware(injectedProvider);\n  }\n}\n","import { Connection, PublicKey, Transaction, VersionedTransaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { CustomChainConfig, SafeEventEmitterProvider } from \"@web3auth/base\";\nimport bs58 from \"bs58\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { ISlopeProvider, TransactionOrVersionedTransaction } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nconst isVersionTransction = (transaction: TransactionOrVersionedTransaction) =>\n  (transaction as VersionedTransaction).version !== undefined || transaction instanceof VersionedTransaction;\n\nexport const getSlopeHandlers = (injectedProvider: ISlopeProvider, getProviderEngineProxy: () => SafeEventEmitterProvider): IProviderHandlers => {\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      const { data } = await injectedProvider.connect();\n      return [data.publicKey];\n    },\n    getAccounts: async () => {\n      const { data } = await injectedProvider.connect();\n      return [data.publicKey];\n    },\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getSecretKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    signTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<TransactionOrVersionedTransaction> => {\n      const txMessage = req.params.message;\n      if (!txMessage) throw ethErrors.rpc.invalidRequest({ message: \"Invalid transaction message\" });\n\n      const message = isVersionTransction(txMessage)\n        ? (txMessage as VersionedTransaction).message.serialize()\n        : (txMessage as Transaction).serializeMessage();\n      const { data } = await injectedProvider.signTransaction(bs58.encode(message));\n      if (!data.publicKey || !data.signature) throw new Error(\"Invalid signature from slope wallet\");\n\n      const publicKey = new PublicKey(data.publicKey);\n      const signature = bs58.decode(data.signature);\n      txMessage.addSignature(publicKey, Buffer.from(signature));\n      return txMessage;\n    },\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array }>): Promise<Uint8Array> => {\n      const response = await injectedProvider.signMessage(req.params.message);\n      return bs58.decode(response.data.signature);\n    },\n    signAndSendTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<{ signature: string }> => {\n      const provider = getProviderEngineProxy();\n      if (!provider) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n      const txMessage = req.params.message;\n      if (!txMessage) throw ethErrors.rpc.invalidRequest({ message: \"Invalid transaction message\" });\n\n      const message = isVersionTransction(txMessage)\n        ? (txMessage as VersionedTransaction).message.serialize()\n        : (txMessage as Transaction).serializeMessage();\n      const { data } = await injectedProvider.signTransaction(bs58.encode(message));\n      if (!data.publicKey || !data.signature) throw new Error(\"Invalid signature from slope wallet\");\n      const publicKey = new PublicKey(data.publicKey);\n      const signature = bs58.decode(data.signature);\n      txMessage.addSignature(publicKey, Buffer.from(signature));\n      const chainConfig = (await provider.request<CustomChainConfig>({ method: \"solana_provider_config\", params: [] })) as CustomChainConfig;\n      const conn = new Connection(chainConfig.rpcTarget);\n      const res = await conn.sendRawTransaction(txMessage.serialize());\n      return { signature: res };\n    },\n    signAllTransactions: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction[] }>): Promise<TransactionOrVersionedTransaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n\n      const allTxns = req.params.message;\n      const { length } = allTxns;\n\n      const unsignedTx = [];\n\n      for (let i = 0; i < length; i++) {\n        const item = allTxns[i];\n        const message = isVersionTransction(item) ? (item as VersionedTransaction).message.serialize() : (item as Transaction).serializeMessage();\n        unsignedTx.push(bs58.encode(message));\n      }\n      const { msg, data } = await injectedProvider.signAllTransactions(unsignedTx);\n\n      if (!data.publicKey || data.signatures?.length !== length) throw new Error(msg);\n\n      const publicKey = new PublicKey(data.publicKey);\n\n      for (let i = 0; i < length; i++) {\n        const signature = bs58.decode(data.signatures[i]);\n        allTxns[i].addSignature(publicKey, Buffer.from(signature));\n      }\n\n      return allTxns;\n    },\n  };\n  return providerHandlers;\n};\n","import { ISlopeProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { BaseInjectedProvider } from \"../base/baseInjectedProvider\";\nimport { getSlopeHandlers } from \"./providerHandlers\";\n\nexport class SlopeInjectedProxyProvider extends BaseInjectedProvider<ISlopeProvider> {\n  protected getProviderHandlers(injectedProvider: ISlopeProvider): IProviderHandlers {\n    return getSlopeHandlers(injectedProvider, this.getProviderEngineProxy.bind(this));\n  }\n}\n","import { SolflareWallet } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { BaseInjectedProvider } from \"../base/baseInjectedProvider\";\nimport { getSolflareHandlers } from \"./providerHandlers\";\n\nexport class SolflareInjectedProvider extends BaseInjectedProvider<SolflareWallet> {\n  protected getProviderHandlers(injectedProvider: SolflareWallet): IProviderHandlers {\n    return getSolflareHandlers(injectedProvider, this.getProviderEngineProxy.bind(this));\n  }\n}\n","import { Connection } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { CustomChainConfig, SafeEventEmitterProvider } from \"@web3auth/base\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { IBaseWalletProvider, SolflareWallet, TransactionOrVersionedTransaction } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { getBaseProviderHandlers } from \"../base/providerHandlers\";\n\nexport const getSolflareHandlers = (injectedProvider: SolflareWallet, getProviderEngineProxy: () => SafeEventEmitterProvider): IProviderHandlers => {\n  const solflareProviderHandlers = getBaseProviderHandlers(injectedProvider as IBaseWalletProvider);\n  solflareProviderHandlers.signAndSendTransaction = async (\n    req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>\n  ): Promise<{ signature: string }> => {\n    const provider = getProviderEngineProxy();\n    if (!provider) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n\n    const transaction = await injectedProvider.signTransaction(req.params.message);\n    const chainConfig = (await provider.request<CustomChainConfig>({ method: \"solana_provider_config\", params: [] })) as CustomChainConfig;\n    const conn = new Connection(chainConfig.rpcTarget);\n    const res = await conn.sendRawTransaction(transaction.serialize());\n    return { signature: res };\n  };\n  return solflareProviderHandlers;\n};\n","import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, isHexStrict, WalletInitializationError } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { ITorusWalletProvider } from \"../../../interface\";\nimport { createSolanaMiddleware } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { createInjectedProviderProxyMiddleware } from \"../injectedProviderProxy\";\nimport { getTorusHandlers } from \"./providerHandlers\";\n\nexport class TorusInjectedProvider extends BaseProvider<BaseProviderConfig, BaseProviderState, ITorusWalletProvider> {\n  constructor({ config, state }: { config: BaseProviderConfig; state?: BaseProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.SOLANA } }, state });\n  }\n\n  public async switchChain(_: { chainId: string }): Promise<void> {\n    return Promise.resolve();\n  }\n\n  public async setupProvider(injectedProvider: ITorusWalletProvider): Promise<void> {\n    this.handleInjectedProviderUpdate(injectedProvider);\n    await this.setupEngine(injectedProvider);\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    if (!this.provider) throw ethErrors.provider.custom({ message: \"Torus solana provider is not initialized\", code: 4902 });\n    const { chainId } = this.config.chainConfig;\n\n    const connectedChainId = await this.provider.request<unknown, string>({\n      method: \"solana_chainId\",\n    });\n\n    const connectedHexChainId = isHexStrict(connectedChainId.toString()) ? connectedChainId : `0x${parseInt(connectedChainId, 10).toString(16)}`;\n    if (chainId !== connectedHexChainId)\n      throw WalletInitializationError.rpcConnectionError(`Invalid network, net_version is: ${connectedHexChainId}, expected: ${chainId}`);\n\n    this.update({ chainId: connectedHexChainId });\n    this.provider.emit(\"connect\", { chainId: this.state.chainId });\n    this.provider.emit(\"chainChanged\", this.state.chainId);\n    return this.state.chainId;\n  }\n\n  private async setupEngine(injectedProvider: ITorusWalletProvider): Promise<void> {\n    const providerHandlers = getTorusHandlers(injectedProvider);\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n    const injectedProviderProxy = createInjectedProviderProxyMiddleware(injectedProvider);\n    const engine = new JRPCEngine();\n    engine.push(solanaMiddleware);\n    engine.push(injectedProviderProxy);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await this.lookupNetwork();\n  }\n\n  private async handleInjectedProviderUpdate(injectedProvider: ITorusWalletProvider): Promise<void> {\n    injectedProvider.on(\"accountsChanged\", async (accounts: string[]) => {\n      this.provider.emit(\"accountsChanged\", accounts);\n    });\n    injectedProvider.on(\"chainChanged\", async (chainId: string) => {\n      const connectedHexChainId = isHexStrict(chainId) ? chainId : `0x${parseInt(chainId, 10).toString(16)}`;\n      // Check if chainId changed and trigger event\n      this.configure({\n        chainConfig: { ...this.config.chainConfig, chainId: connectedHexChainId },\n      });\n      await this.setupProvider(injectedProvider);\n    });\n  }\n}\n","import { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { ITorusWalletProvider, TransactionOrVersionedTransaction } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nexport const getTorusHandlers = (injectedProvider: ITorusWalletProvider): IProviderHandlers => {\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      const accounts = await injectedProvider.request<string[]>({\n        method: \"solana_requestAccounts\",\n        params: {},\n      });\n      return accounts;\n    },\n\n    getAccounts: async () => {\n      const accounts = await injectedProvider.request<string[]>({\n        method: \"solana_requestAccounts\",\n        params: {},\n      });\n      return accounts;\n    },\n\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getSecretKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array }>): Promise<Uint8Array> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const message = await injectedProvider.signMessage(req.params.message);\n      return message;\n    },\n\n    signTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<TransactionOrVersionedTransaction> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const txMessage = req.params.message;\n      const response = await injectedProvider.signTransaction(txMessage);\n      return response;\n    },\n\n    signAndSendTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<{ signature: string }> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const txMessage = req.params.message;\n      const response = await injectedProvider.sendTransaction(txMessage);\n      return { signature: response };\n    },\n\n    signAllTransactions: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction[] }>): Promise<TransactionOrVersionedTransaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const transactions = req.params.message;\n      const response = await injectedProvider.signAllTransactions(transactions);\n      return response;\n    },\n  };\n  return providerHandlers;\n};\n","import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine, JRPCMiddleware, JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, CustomChainConfig, WalletInitializationError } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { createJsonRpcClient } from \"../../rpc/JrpcClient\";\nimport {\n  AddSolanaChainParameter,\n  createAccountMiddleware,\n  createChainSwitchMiddleware,\n  createSolanaMiddleware,\n  IAccountHandlers,\n  IChainSwitchHandlers,\n} from \"../../rpc/solanaRpcMiddlewares\";\nimport { getProviderHandlers } from \"./solanaPrivateKeyUtils\";\n\nexport interface SolanaPrivKeyProviderConfig extends BaseProviderConfig {\n  chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n}\nexport interface SolanaPrivKeyProviderState extends BaseProviderState {\n  privateKey?: string;\n}\nexport class SolanaPrivateKeyProvider extends BaseProvider<BaseProviderConfig, SolanaPrivKeyProviderState, string> {\n  constructor({ config, state }: { config: SolanaPrivKeyProviderConfig; state?: BaseProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.SOLANA } }, state });\n  }\n\n  public static getProviderInstance = async (params: {\n    privKey: string;\n    chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n  }): Promise<SolanaPrivateKeyProvider> => {\n    const providerFactory = new SolanaPrivateKeyProvider({ config: { chainConfig: params.chainConfig } });\n    await providerFactory.setupProvider(params.privKey);\n    return providerFactory;\n  };\n\n  public async enable(): Promise<string[]> {\n    if (!this.state.privateKey)\n      throw ethErrors.provider.custom({ message: \"Private key is not found in state, plz pass it in constructor state param\", code: 4902 });\n    await this.setupProvider(this.state.privateKey);\n    return this._providerEngineProxy.request<unknown, string[]>({ method: \"eth_accounts\" });\n  }\n\n  public async setupProvider(privKey: string): Promise<void> {\n    const providerHandlers = await getProviderHandlers({ privKey, getProviderEngineProxy: this.getProviderEngineProxy.bind(this) });\n\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n\n    const engine = new JRPCEngine();\n    const { networkMiddleware } = createJsonRpcClient(this.config.chainConfig as CustomChainConfig);\n    engine.push(this.getChainSwitchMiddleware());\n    engine.push(this.getAccountMiddleware());\n    engine.push(solanaMiddleware);\n    engine.push(networkMiddleware);\n\n    const provider = providerFromEngine(engine);\n\n    this.updateProviderEngineProxy(provider);\n\n    await this.lookupNetwork();\n  }\n\n  public async updateAccount(params: { privateKey: string }): Promise<void> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const existingKey = await this._providerEngineProxy.request<unknown, string>({ method: \"solanaPrivateKey\" });\n    if (existingKey !== params.privateKey) {\n      await this.setupProvider(params.privateKey);\n      this._providerEngineProxy.emit(\"accountsChanged\", {\n        accounts: await this._providerEngineProxy.request<unknown, string[]>({ method: \"requestAccounts\" }),\n      });\n    }\n  }\n\n  public async switchChain(params: { chainId: string }): Promise<void> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const chainConfig = this.getChainConfig(params.chainId);\n    this.update({\n      chainId: \"loading\",\n    });\n    this.configure({ chainConfig });\n    const privKey = await this._providerEngineProxy.request<unknown, string>({ method: \"solanaPrivateKey\" });\n    await this.setupProvider(privKey);\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const health = await this._providerEngineProxy.request<unknown, string>({\n      method: \"getHealth\",\n      params: [],\n    });\n    const { chainConfig } = this.config;\n    if (health !== \"ok\")\n      throw WalletInitializationError.rpcConnectionError(`Failed to lookup network for following rpc target: ${chainConfig.rpcTarget}`);\n    this.update({ chainId: chainConfig.chainId });\n    if (this.state.chainId !== chainConfig.chainId) {\n      this.provider.emit(\"chainChanged\", this.state.chainId);\n      this.provider.emit(\"connect\", { chainId: this.state.chainId });\n    }\n    return this.state.chainId;\n  }\n\n  private getChainSwitchMiddleware(): JRPCMiddleware<unknown, unknown> {\n    const chainSwitchHandlers: IChainSwitchHandlers = {\n      addNewChainConfig: async (req: JRPCRequest<AddSolanaChainParameter>): Promise<void> => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        const { chainId, chainName, rpcUrls, blockExplorerUrls, nativeCurrency } = req.params;\n\n        if (!chainId) throw ethErrors.rpc.invalidParams(\"Missing chainId in chainParams\");\n        if (!rpcUrls || rpcUrls.length === 0) throw ethErrors.rpc.invalidParams(\"Missing rpcUrls in chainParams\");\n        if (!nativeCurrency) throw ethErrors.rpc.invalidParams(\"Missing nativeCurrency in chainParams\");\n        this.addChain({\n          chainNamespace: CHAIN_NAMESPACES.SOLANA,\n          chainId,\n          ticker: nativeCurrency?.symbol || \"SOL\",\n          tickerName: nativeCurrency?.name || \"Solana\",\n          displayName: chainName,\n          rpcTarget: rpcUrls[0],\n          blockExplorer: blockExplorerUrls?.[0] || \"\",\n          decimals: nativeCurrency?.decimals || 9,\n        });\n      },\n      switchSolanaChain: async (req: JRPCRequest<{ chainId: string }>): Promise<void> => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        if (!req.params.chainId) throw ethErrors.rpc.invalidParams(\"Missing chainId\");\n        await this.switchChain(req.params);\n      },\n    };\n    const chainSwitchMiddleware = createChainSwitchMiddleware(chainSwitchHandlers);\n    return chainSwitchMiddleware;\n  }\n\n  private getAccountMiddleware(): JRPCMiddleware<unknown, unknown> {\n    const accountHandlers: IAccountHandlers = {\n      updatePrivatekey: async (req: JRPCRequest<{ privateKey: string }>): Promise<void> => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        if (!req.params.privateKey) throw ethErrors.rpc.invalidParams(\"Missing privateKey\");\n        const { privateKey } = req.params;\n        await this.updateAccount({ privateKey });\n      },\n    };\n    return createAccountMiddleware(accountHandlers);\n  }\n}\n","import { Keypair, VersionedTransaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport nacl from \"@toruslabs/tweetnacl-js\";\nimport { SafeEventEmitterProvider, WalletInitializationError } from \"@web3auth/base\";\nimport bs58 from \"bs58\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { TransactionOrVersionedTransaction } from \"../../interface\";\nimport { IProviderHandlers } from \"../../rpc/solanaRpcMiddlewares\";\n\nexport async function getProviderHandlers({\n  privKey,\n  getProviderEngineProxy,\n}: {\n  privKey: string;\n  getProviderEngineProxy: () => SafeEventEmitterProvider | null;\n}): Promise<IProviderHandlers> {\n  const keyPairGenerator = (): Keypair => {\n    return Keypair.fromSecretKey(Buffer.from(privKey, \"hex\"));\n  };\n  if (typeof privKey !== \"string\") throw WalletInitializationError.invalidParams(\"privKey must be a string\");\n  const keyPair = keyPairGenerator();\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      return [keyPair.publicKey.toBase58()];\n    },\n    getAccounts: async () => [keyPair.publicKey.toBase58()],\n\n    getPrivateKey: async () => privKey,\n    getSecretKey: async () => bs58.encode(keyPair.secretKey),\n\n    signTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<TransactionOrVersionedTransaction> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const transaction = req.params.message;\n      if ((transaction as VersionedTransaction).version !== undefined || transaction instanceof VersionedTransaction) {\n        (transaction as VersionedTransaction).sign([keyPair]);\n      } else {\n        transaction.partialSign(keyPair);\n      }\n      return transaction;\n    },\n\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array }>): Promise<Uint8Array> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const signedMsg = nacl.sign.detached(req.params.message, keyPair.secretKey);\n      return signedMsg;\n    },\n\n    signAndSendTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<{ signature: string }> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const _providerEngineProxy = getProviderEngineProxy();\n      if (!_providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n\n      const transaction = req.params.message;\n      if ((transaction as VersionedTransaction).version !== undefined || transaction instanceof VersionedTransaction) {\n        (transaction as VersionedTransaction).sign([keyPair]);\n      } else {\n        transaction.partialSign(keyPair);\n      }\n      const sig = await _providerEngineProxy.request<string>({\n        method: \"sendTransaction\",\n        params: [Buffer.from(transaction.serialize()).toString(\"base64\"), { encoding: \"base64\" }],\n      });\n      return { signature: sig };\n    },\n\n    signAllTransactions: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction[] }>): Promise<TransactionOrVersionedTransaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n\n      const txns = req.params?.message;\n      for (const tx of txns || []) {\n        const transaction = tx;\n        if ((transaction as VersionedTransaction).version !== undefined || transaction instanceof VersionedTransaction) {\n          (transaction as VersionedTransaction).sign([keyPair]);\n        } else {\n          transaction.partialSign(keyPair);\n        }\n      }\n      return txns;\n    },\n  };\n\n  return providerHandlers;\n}\n","import { RequestArguments, SafeEventEmitterProvider } from \"@web3auth/base\";\n\nimport { ISolanaWallet, TransactionOrVersionedTransaction } from \"./interface\";\n\nexport class SolanaWallet implements ISolanaWallet {\n  public provider: SafeEventEmitterProvider;\n\n  constructor(provider: SafeEventEmitterProvider) {\n    this.provider = provider;\n  }\n\n  public async requestAccounts(): Promise<string[]> {\n    const accounts = await this.provider.request<string[]>({\n      method: \"requestAccounts\",\n      params: {},\n    });\n    return accounts;\n  }\n\n  public async signAndSendTransaction<T extends TransactionOrVersionedTransaction>(transaction: T): Promise<{ signature: string }> {\n    const { signature } = await this.provider.request<{ signature: string }>({\n      method: \"signAndSendTransaction\",\n      params: {\n        message: transaction,\n      },\n    });\n    return { signature };\n  }\n\n  public async signTransaction<T extends TransactionOrVersionedTransaction>(transaction: T): Promise<T> {\n    const signedTransaction = await this.provider.request({\n      method: \"signTransaction\",\n      params: {\n        message: transaction,\n      },\n    });\n    return signedTransaction as T;\n  }\n\n  public async signAllTransactions<T extends TransactionOrVersionedTransaction>(transactions: T[]): Promise<T[]> {\n    const signedTransactions = await this.provider.request({\n      method: \"signAllTransactions\",\n      params: {\n        message: transactions,\n      },\n    });\n    return signedTransactions as T[];\n  }\n\n  public async signMessage(data: Uint8Array): Promise<Uint8Array> {\n    const response = await this.provider.request<Uint8Array>({\n      method: \"signMessage\",\n      params: {\n        message: data,\n      },\n    });\n    return response as Uint8Array;\n  }\n\n  public async request<T>(args: RequestArguments): Promise<T> {\n    const result = await this.provider.request<T>(args);\n    return result as T;\n  }\n}\n","'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n// @ts-ignore\nvar _Buffer = require('safe-buffer').Buffer\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source) }\n    if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return _Buffer.alloc(0) }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = _Buffer.allocUnsafe(zeroes + (size - it4))\n    vch.fill(0x00, 0, zeroes)\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nlet converter;\n/**\n * Convert a little-endian buffer into a BigInt.\n * @param buf The little-endian buffer to convert\n * @returns A BigInt with the little-endian representation of buf.\n */\nfunction toBigIntLE(buf) {\n    {\n        const reversed = Buffer.from(buf);\n        reversed.reverse();\n        const hex = reversed.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, false);\n}\nexports.toBigIntLE = toBigIntLE;\n/**\n * Convert a big-endian buffer into a BigInt\n * @param buf The big-endian buffer to convert.\n * @returns A BigInt with the big-endian representation of buf.\n */\nfunction toBigIntBE(buf) {\n    {\n        const hex = buf.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, true);\n}\nexports.toBigIntBE = toBigIntBE;\n/**\n * Convert a BigInt to a little-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A little-endian buffer representation of num.\n */\nfunction toBufferLE(num, width) {\n    {\n        const hex = num.toString(16);\n        const buffer = Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n        buffer.reverse();\n        return buffer;\n    }\n    // Allocation is done here, since it is slower using napi in C\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), false);\n}\nexports.toBufferLE = toBufferLE;\n/**\n * Convert a BigInt to a big-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A big-endian buffer representation of num.\n */\nfunction toBufferBE(num, width) {\n    {\n        const hex = num.toString(16);\n        return Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n    }\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), true);\n}\nexports.toBufferBE = toBufferBE;\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.deserializeUnchecked = exports.deserialize = exports.serialize = exports.BinaryReader = exports.BinaryWriter = exports.BorshError = exports.baseDecode = exports.baseEncode = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst bs58_1 = __importDefault(require(\"bs58\"));\n// TODO: Make sure this polyfill not included when not required\nconst encoding = __importStar(require(\"text-encoding-utf-8\"));\nconst ResolvedTextDecoder = typeof TextDecoder !== \"function\" ? encoding.TextDecoder : TextDecoder;\nconst textDecoder = new ResolvedTextDecoder(\"utf-8\", { fatal: true });\nfunction baseEncode(value) {\n    if (typeof value === \"string\") {\n        value = Buffer.from(value, \"utf8\");\n    }\n    return bs58_1.default.encode(Buffer.from(value));\n}\nexports.baseEncode = baseEncode;\nfunction baseDecode(value) {\n    return Buffer.from(bs58_1.default.decode(value));\n}\nexports.baseDecode = baseDecode;\nconst INITIAL_LENGTH = 1024;\nclass BorshError extends Error {\n    constructor(message) {\n        super(message);\n        this.fieldPath = [];\n        this.originalMessage = message;\n    }\n    addToFieldPath(fieldName) {\n        this.fieldPath.splice(0, 0, fieldName);\n        // NOTE: Modifying message directly as jest doesn't use .toString()\n        this.message = this.originalMessage + \": \" + this.fieldPath.join(\".\");\n    }\n}\nexports.BorshError = BorshError;\n/// Binary encoder.\nclass BinaryWriter {\n    constructor() {\n        this.buf = Buffer.alloc(INITIAL_LENGTH);\n        this.length = 0;\n    }\n    maybeResize() {\n        if (this.buf.length < 16 + this.length) {\n            this.buf = Buffer.concat([this.buf, Buffer.alloc(INITIAL_LENGTH)]);\n        }\n    }\n    writeU8(value) {\n        this.maybeResize();\n        this.buf.writeUInt8(value, this.length);\n        this.length += 1;\n    }\n    writeU16(value) {\n        this.maybeResize();\n        this.buf.writeUInt16LE(value, this.length);\n        this.length += 2;\n    }\n    writeU32(value) {\n        this.maybeResize();\n        this.buf.writeUInt32LE(value, this.length);\n        this.length += 4;\n    }\n    writeU64(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 8)));\n    }\n    writeU128(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 16)));\n    }\n    writeU256(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 32)));\n    }\n    writeU512(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 64)));\n    }\n    writeBuffer(buffer) {\n        // Buffer.from is needed as this.buf.subarray can return plain Uint8Array in browser\n        this.buf = Buffer.concat([\n            Buffer.from(this.buf.subarray(0, this.length)),\n            buffer,\n            Buffer.alloc(INITIAL_LENGTH),\n        ]);\n        this.length += buffer.length;\n    }\n    writeString(str) {\n        this.maybeResize();\n        const b = Buffer.from(str, \"utf8\");\n        this.writeU32(b.length);\n        this.writeBuffer(b);\n    }\n    writeFixedArray(array) {\n        this.writeBuffer(Buffer.from(array));\n    }\n    writeArray(array, fn) {\n        this.maybeResize();\n        this.writeU32(array.length);\n        for (const elem of array) {\n            this.maybeResize();\n            fn(elem);\n        }\n    }\n    toArray() {\n        return this.buf.subarray(0, this.length);\n    }\n}\nexports.BinaryWriter = BinaryWriter;\nfunction handlingRangeError(target, propertyKey, propertyDescriptor) {\n    const originalMethod = propertyDescriptor.value;\n    propertyDescriptor.value = function (...args) {\n        try {\n            return originalMethod.apply(this, args);\n        }\n        catch (e) {\n            if (e instanceof RangeError) {\n                const code = e.code;\n                if ([\"ERR_BUFFER_OUT_OF_BOUNDS\", \"ERR_OUT_OF_RANGE\"].indexOf(code) >= 0) {\n                    throw new BorshError(\"Reached the end of buffer when deserializing\");\n                }\n            }\n            throw e;\n        }\n    };\n}\nclass BinaryReader {\n    constructor(buf) {\n        this.buf = buf;\n        this.offset = 0;\n    }\n    readU8() {\n        const value = this.buf.readUInt8(this.offset);\n        this.offset += 1;\n        return value;\n    }\n    readU16() {\n        const value = this.buf.readUInt16LE(this.offset);\n        this.offset += 2;\n        return value;\n    }\n    readU32() {\n        const value = this.buf.readUInt32LE(this.offset);\n        this.offset += 4;\n        return value;\n    }\n    readU64() {\n        const buf = this.readBuffer(8);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU128() {\n        const buf = this.readBuffer(16);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU256() {\n        const buf = this.readBuffer(32);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU512() {\n        const buf = this.readBuffer(64);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readBuffer(len) {\n        if (this.offset + len > this.buf.length) {\n            throw new BorshError(`Expected buffer length ${len} isn't within bounds`);\n        }\n        const result = this.buf.slice(this.offset, this.offset + len);\n        this.offset += len;\n        return result;\n    }\n    readString() {\n        const len = this.readU32();\n        const buf = this.readBuffer(len);\n        try {\n            // NOTE: Using TextDecoder to fail on invalid UTF-8\n            return textDecoder.decode(buf);\n        }\n        catch (e) {\n            throw new BorshError(`Error decoding UTF-8 string: ${e}`);\n        }\n    }\n    readFixedArray(len) {\n        return new Uint8Array(this.readBuffer(len));\n    }\n    readArray(fn) {\n        const len = this.readU32();\n        const result = Array();\n        for (let i = 0; i < len; ++i) {\n            result.push(fn());\n        }\n        return result;\n    }\n}\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU8\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU16\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU32\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU64\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU128\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU256\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU512\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readString\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readFixedArray\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readArray\", null);\nexports.BinaryReader = BinaryReader;\nfunction capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\nfunction serializeField(schema, fieldName, value, fieldType, writer) {\n    try {\n        // TODO: Handle missing values properly (make sure they never result in just skipped write)\n        if (typeof fieldType === \"string\") {\n            writer[`write${capitalizeFirstLetter(fieldType)}`](value);\n        }\n        else if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                if (value.length !== fieldType[0]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[0]}, but got ${value.length} bytes`);\n                }\n                writer.writeFixedArray(value);\n            }\n            else if (fieldType.length === 2 && typeof fieldType[1] === \"number\") {\n                if (value.length !== fieldType[1]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[1]}, but got ${value.length} bytes`);\n                }\n                for (let i = 0; i < fieldType[1]; i++) {\n                    serializeField(schema, null, value[i], fieldType[0], writer);\n                }\n            }\n            else {\n                writer.writeArray(value, (item) => {\n                    serializeField(schema, fieldName, item, fieldType[0], writer);\n                });\n            }\n        }\n        else if (fieldType.kind !== undefined) {\n            switch (fieldType.kind) {\n                case \"option\": {\n                    if (value === null || value === undefined) {\n                        writer.writeU8(0);\n                    }\n                    else {\n                        writer.writeU8(1);\n                        serializeField(schema, fieldName, value, fieldType.type, writer);\n                    }\n                    break;\n                }\n                case \"map\": {\n                    writer.writeU32(value.size);\n                    value.forEach((val, key) => {\n                        serializeField(schema, fieldName, key, fieldType.key, writer);\n                        serializeField(schema, fieldName, val, fieldType.value, writer);\n                    });\n                    break;\n                }\n                default:\n                    throw new BorshError(`FieldType ${fieldType} unrecognized`);\n            }\n        }\n        else {\n            serializeStruct(schema, value, writer);\n        }\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction serializeStruct(schema, obj, writer) {\n    if (typeof obj.borshSerialize === \"function\") {\n        obj.borshSerialize(writer);\n        return;\n    }\n    const structSchema = schema.get(obj.constructor);\n    if (!structSchema) {\n        throw new BorshError(`Class ${obj.constructor.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        structSchema.fields.map(([fieldName, fieldType]) => {\n            serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n        });\n    }\n    else if (structSchema.kind === \"enum\") {\n        const name = obj[structSchema.field];\n        for (let idx = 0; idx < structSchema.values.length; ++idx) {\n            const [fieldName, fieldType] = structSchema.values[idx];\n            if (fieldName === name) {\n                writer.writeU8(idx);\n                serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n                break;\n            }\n        }\n    }\n    else {\n        throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${obj.constructor.name}`);\n    }\n}\n/// Serialize given object using schema of the form:\n/// { class_name -> [ [field_name, field_type], .. ], .. }\nfunction serialize(schema, obj, Writer = BinaryWriter) {\n    const writer = new Writer();\n    serializeStruct(schema, obj, writer);\n    return writer.toArray();\n}\nexports.serialize = serialize;\nfunction deserializeField(schema, fieldName, fieldType, reader) {\n    try {\n        if (typeof fieldType === \"string\") {\n            return reader[`read${capitalizeFirstLetter(fieldType)}`]();\n        }\n        if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                return reader.readFixedArray(fieldType[0]);\n            }\n            else if (typeof fieldType[1] === \"number\") {\n                const arr = [];\n                for (let i = 0; i < fieldType[1]; i++) {\n                    arr.push(deserializeField(schema, null, fieldType[0], reader));\n                }\n                return arr;\n            }\n            else {\n                return reader.readArray(() => deserializeField(schema, fieldName, fieldType[0], reader));\n            }\n        }\n        if (fieldType.kind === \"option\") {\n            const option = reader.readU8();\n            if (option) {\n                return deserializeField(schema, fieldName, fieldType.type, reader);\n            }\n            return undefined;\n        }\n        if (fieldType.kind === \"map\") {\n            let map = new Map();\n            const length = reader.readU32();\n            for (let i = 0; i < length; i++) {\n                const key = deserializeField(schema, fieldName, fieldType.key, reader);\n                const val = deserializeField(schema, fieldName, fieldType.value, reader);\n                map.set(key, val);\n            }\n            return map;\n        }\n        return deserializeStruct(schema, fieldType, reader);\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction deserializeStruct(schema, classType, reader) {\n    if (typeof classType.borshDeserialize === \"function\") {\n        return classType.borshDeserialize(reader);\n    }\n    const structSchema = schema.get(classType);\n    if (!structSchema) {\n        throw new BorshError(`Class ${classType.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        const result = {};\n        for (const [fieldName, fieldType] of schema.get(classType).fields) {\n            result[fieldName] = deserializeField(schema, fieldName, fieldType, reader);\n        }\n        return new classType(result);\n    }\n    if (structSchema.kind === \"enum\") {\n        const idx = reader.readU8();\n        if (idx >= structSchema.values.length) {\n            throw new BorshError(`Enum index: ${idx} is out of range`);\n        }\n        const [fieldName, fieldType] = structSchema.values[idx];\n        const fieldValue = deserializeField(schema, fieldName, fieldType, reader);\n        return new classType({ [fieldName]: fieldValue });\n    }\n    throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${classType.constructor.name}`);\n}\n/// Deserializes object from bytes using schema.\nfunction deserialize(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    const result = deserializeStruct(schema, classType, reader);\n    if (reader.offset < buffer.length) {\n        throw new BorshError(`Unexpected ${buffer.length - reader.offset} bytes after deserialized data`);\n    }\n    return result;\n}\nexports.deserialize = deserialize;\n/// Deserializes object from bytes using schema, without checking the length read\nfunction deserializeUnchecked(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    return deserializeStruct(schema, classType, reader);\n}\nexports.deserializeUnchecked = deserializeUnchecked;\n","var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","'use strict';\n\nconst uuid = require('uuid').v4;\nconst generateRequest = require('../../generateRequest');\n\n/**\n * Constructor for a Jayson Browser Client that does not depend any node.js core libraries\n * @class ClientBrowser\n * @param {Function} callServer Method that calls the server, receives the stringified request and a regular node-style callback\n * @param {Object} [options]\n * @param {Function} [options.reviver] Reviver function for JSON\n * @param {Function} [options.replacer] Replacer function for JSON\n * @param {Number} [options.version=2] JSON-RPC version to use (1|2)\n * @param {Function} [options.generator] Function to use for generating request IDs\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n * @return {ClientBrowser}\n */\nconst ClientBrowser = function(callServer, options) {\n  if(!(this instanceof ClientBrowser)) {\n    return new ClientBrowser(callServer, options);\n  }\n\n  if (!options) {\n    options = {};\n  }\n\n  this.options = {\n    reviver: typeof options.reviver !== 'undefined' ? options.reviver : null,\n    replacer: typeof options.replacer !== 'undefined' ? options.replacer : null,\n    generator: typeof options.generator !== 'undefined' ? options.generator : function() { return uuid(); },\n    version: typeof options.version !== 'undefined' ? options.version : 2,\n    notificationIdNull: typeof options.notificationIdNull === 'boolean' ? options.notificationIdNull : false,\n  };\n\n  this.callServer = callServer;\n};\n\nmodule.exports = ClientBrowser;\n\n/**\n *  Creates a request and dispatches it if given a callback.\n *  @param {String|Array} method A batch request if passed an Array, or a method name if passed a String\n *  @param {Array|Object} [params] Parameters for the method\n *  @param {String|Number} [id] Optional id. If undefined an id will be generated. If null it creates a notification request\n *  @param {Function} [callback] Request callback. If specified, executes the request rather than only returning it.\n *  @throws {TypeError} Invalid parameters\n *  @return {Object} JSON-RPC 1.0 or 2.0 compatible request\n */\nClientBrowser.prototype.request = function(method, params, id, callback) {\n  const self = this;\n  let request = null;\n\n  // is this a batch request?\n  const isBatch = Array.isArray(method) && typeof params === 'function';\n\n  if (this.options.version === 1 && isBatch) {\n    throw new TypeError('JSON-RPC 1.0 does not support batching');\n  }\n\n  // is this a raw request?\n  const isRaw = !isBatch && method && typeof method === 'object' && typeof params === 'function';\n\n  if(isBatch || isRaw) {\n    callback = params;\n    request = method;\n  } else {\n    if(typeof id === 'function') {\n      callback = id;\n      // specifically undefined because \"null\" is a notification request\n      id = undefined;\n    }\n\n    const hasCallback = typeof callback === 'function';\n\n    try {\n      request = generateRequest(method, params, id, {\n        generator: this.options.generator,\n        version: this.options.version,\n        notificationIdNull: this.options.notificationIdNull,\n      });\n    } catch(err) {\n      if(hasCallback) {\n        return callback(err);\n      }\n      throw err;\n    }\n\n    // no callback means we should just return a raw request\n    if(!hasCallback) {\n      return request;\n    }\n\n  }\n\n  let message;\n  try {\n    message = JSON.stringify(request, this.options.replacer);\n  } catch(err) {\n    return callback(err);\n  }\n\n  this.callServer(message, function(err, response) {\n    self._parseResponse(err, response, callback);\n  });\n\n  // always return the raw request\n  return request;\n};\n\n/**\n * Parses a response from a server\n * @param {Object} err Error to pass on that is unrelated to the actual response\n * @param {String} responseText JSON-RPC 1.0 or 2.0 response\n * @param {Function} callback Callback that will receive different arguments depending on the amount of parameters\n * @private\n */\nClientBrowser.prototype._parseResponse = function(err, responseText, callback) {\n  if(err) {\n    callback(err);\n    return;\n  }\n\n  if(!responseText) {\n    // empty response text, assume that is correct because it could be a\n    // notification which jayson does not give any body for\n    return callback();\n  }\n\n  let response;\n  try {\n    response = JSON.parse(responseText, this.options.reviver);\n  } catch(err) {\n    return callback(err);\n  }\n\n  if(callback.length === 3) {\n    // if callback length is 3, we split callback arguments on error and response\n\n    // is batch response?\n    if(Array.isArray(response)) {\n\n      // neccesary to split strictly on validity according to spec here\n      const isError = function(res) {\n        return typeof res.error !== 'undefined';\n      };\n\n      const isNotError = function (res) {\n        return !isError(res);\n      };\n\n      return callback(null, response.filter(isError), response.filter(isNotError));\n    \n    } else {\n\n      // split regardless of validity\n      return callback(null, response.error, response.result);\n    \n    }\n  \n  }\n\n  callback(null, response);\n};\n","'use strict';\n\nconst uuid = require('uuid').v4;\n\n/**\n *  Generates a JSON-RPC 1.0 or 2.0 request\n *  @param {String} method Name of method to call\n *  @param {Array|Object} params Array of parameters passed to the method as specified, or an object of parameter names and corresponding value\n *  @param {String|Number|null} [id] Request ID can be a string, number, null for explicit notification or left out for automatic generation\n *  @param {Object} [options]\n *  @param {Number} [options.version=2] JSON-RPC version to use (1 or 2)\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n *  @param {Function} [options.generator] Passed the request, and the options object and is expected to return a request ID\n *  @throws {TypeError} If any of the parameters are invalid\n *  @return {Object} A JSON-RPC 1.0 or 2.0 request\n *  @memberOf Utils\n */\nconst generateRequest = function(method, params, id, options) {\n  if(typeof method !== 'string') {\n    throw new TypeError(method + ' must be a string');\n  }\n\n  options = options || {};\n\n  // check valid version provided\n  const version = typeof options.version === 'number' ? options.version : 2;\n  if (version !== 1 && version !== 2) {\n    throw new TypeError(version + ' must be 1 or 2');\n  }\n\n  const request = {\n    method: method\n  };\n\n  if(version === 2) {\n    request.jsonrpc = '2.0';\n  }\n\n  if(params) {\n    // params given, but invalid?\n    if(typeof params !== 'object' && !Array.isArray(params)) {\n      throw new TypeError(params + ' must be an object, array or omitted');\n    }\n    request.params = params;\n  }\n\n  // if id was left out, generate one (null means explicit notification)\n  if(typeof(id) === 'undefined') {\n    const generator = typeof options.generator === 'function' ? options.generator : function() { return uuid(); };\n    request.id = generator(request, options);\n  } else if (version === 2 && id === null) {\n    // we have a version 2 notification\n    if (options.notificationIdNull) {\n      request.id = null; // id will not be set at all unless option provided\n    }\n  } else {\n    request.id = id;\n  }\n\n  return request;\n};\n\nmodule.exports = generateRequest;\n","/**\n * \"Client\" wraps \"ws\" or a browser-implemented \"WebSocket\" library\n * according to the environment providing JSON RPC 2.0 support on top.\n * @module Client\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\nvar _eventemitter = require(\"eventemitter3\");\nvar _utils = require(\"./utils\");\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nvar __rest = void 0 && (void 0).__rest || function (s, e) {\n  var t = {};\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n// @ts-ignore\nvar CommonClient = /*#__PURE__*/function (_EventEmitter) {\n  (0, _inherits2[\"default\"])(CommonClient, _EventEmitter);\n  var _super = _createSuper(CommonClient);\n  /**\n   * Instantiate a Client class.\n   * @constructor\n   * @param {webSocketFactory} webSocketFactory - factory method for WebSocket\n   * @param {String} address - url to a websocket server\n   * @param {Object} options - ws options object with reconnect parameters\n   * @param {Function} generate_request_id - custom generation request Id\n   * @param {DataPack} dataPack - data pack contains encoder and decoder\n   * @return {CommonClient}\n   */\n  function CommonClient(webSocketFactory) {\n    var _this;\n    var address = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"ws://localhost:8080\";\n    var _a = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var generate_request_id = arguments.length > 3 ? arguments[3] : undefined;\n    var dataPack = arguments.length > 4 ? arguments[4] : undefined;\n    (0, _classCallCheck2[\"default\"])(this, CommonClient);\n    var _a$autoconnect = _a.autoconnect,\n      autoconnect = _a$autoconnect === void 0 ? true : _a$autoconnect,\n      _a$reconnect = _a.reconnect,\n      reconnect = _a$reconnect === void 0 ? true : _a$reconnect,\n      _a$reconnect_interval = _a.reconnect_interval,\n      reconnect_interval = _a$reconnect_interval === void 0 ? 1000 : _a$reconnect_interval,\n      _a$max_reconnects = _a.max_reconnects,\n      max_reconnects = _a$max_reconnects === void 0 ? 5 : _a$max_reconnects,\n      rest_options = __rest(_a, [\"autoconnect\", \"reconnect\", \"reconnect_interval\", \"max_reconnects\"]);\n    _this = _super.call(this);\n    _this.webSocketFactory = webSocketFactory;\n    _this.queue = {};\n    _this.rpc_id = 0;\n    _this.address = address;\n    _this.autoconnect = autoconnect;\n    _this.ready = false;\n    _this.reconnect = reconnect;\n    _this.reconnect_timer_id = undefined;\n    _this.reconnect_interval = reconnect_interval;\n    _this.max_reconnects = max_reconnects;\n    _this.rest_options = rest_options;\n    _this.current_reconnects = 0;\n    _this.generate_request_id = generate_request_id || function () {\n      return ++_this.rpc_id;\n    };\n    if (!dataPack) _this.dataPack = new _utils.DefaultDataPack();else _this.dataPack = dataPack;\n    if (_this.autoconnect) _this._connect(_this.address, Object.assign({\n      autoconnect: _this.autoconnect,\n      reconnect: _this.reconnect,\n      reconnect_interval: _this.reconnect_interval,\n      max_reconnects: _this.max_reconnects\n    }, _this.rest_options));\n    return _this;\n  }\n  /**\n   * Connects to a defined server if not connected already.\n   * @method\n   * @return {Undefined}\n   */\n  (0, _createClass2[\"default\"])(CommonClient, [{\n    key: \"connect\",\n    value: function connect() {\n      if (this.socket) return;\n      this._connect(this.address, Object.assign({\n        autoconnect: this.autoconnect,\n        reconnect: this.reconnect,\n        reconnect_interval: this.reconnect_interval,\n        max_reconnects: this.max_reconnects\n      }, this.rest_options));\n    }\n    /**\n     * Calls a registered RPC method on server.\n     * @method\n     * @param {String} method - RPC method name\n     * @param {Object|Array} params - optional method parameters\n     * @param {Number} timeout - RPC reply timeout value\n     * @param {Object} ws_opts - options passed to ws\n     * @return {Promise}\n     */\n  }, {\n    key: \"call\",\n    value: function call(method, params, timeout, ws_opts) {\n      var _this2 = this;\n      if (!ws_opts && \"object\" === (0, _typeof2[\"default\"])(timeout)) {\n        ws_opts = timeout;\n        timeout = null;\n      }\n      return new Promise(function (resolve, reject) {\n        if (!_this2.ready) return reject(new Error(\"socket not ready\"));\n        var rpc_id = _this2.generate_request_id(method, params);\n        var message = {\n          jsonrpc: \"2.0\",\n          method: method,\n          params: params || null,\n          id: rpc_id\n        };\n        _this2.socket.send(_this2.dataPack.encode(message), ws_opts, function (error) {\n          if (error) return reject(error);\n          _this2.queue[rpc_id] = {\n            promise: [resolve, reject]\n          };\n          if (timeout) {\n            _this2.queue[rpc_id].timeout = setTimeout(function () {\n              delete _this2.queue[rpc_id];\n              reject(new Error(\"reply timeout\"));\n            }, timeout);\n          }\n        });\n      });\n    }\n    /**\n     * Logins with the other side of the connection.\n     * @method\n     * @param {Object} params - Login credentials object\n     * @return {Promise}\n     */\n  }, {\n    key: \"login\",\n    value: function () {\n      var _login = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee(params) {\n        var resp;\n        return _regenerator[\"default\"].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.call(\"rpc.login\", params);\n              case 2:\n                resp = _context.sent;\n                if (resp) {\n                  _context.next = 5;\n                  break;\n                }\n                throw new Error(\"authentication failed\");\n              case 5:\n                return _context.abrupt(\"return\", resp);\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function login(_x) {\n        return _login.apply(this, arguments);\n      }\n      return login;\n    }()\n    /**\n     * Fetches a list of client's methods registered on server.\n     * @method\n     * @return {Array}\n     */\n  }, {\n    key: \"listMethods\",\n    value: function () {\n      var _listMethods = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee2() {\n        return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.call(\"__listMethods\");\n              case 2:\n                return _context2.abrupt(\"return\", _context2.sent);\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function listMethods() {\n        return _listMethods.apply(this, arguments);\n      }\n      return listMethods;\n    }()\n    /**\n     * Sends a JSON-RPC 2.0 notification to server.\n     * @method\n     * @param {String} method - RPC method name\n     * @param {Object} params - optional method parameters\n     * @return {Promise}\n     */\n  }, {\n    key: \"notify\",\n    value: function notify(method, params) {\n      var _this3 = this;\n      return new Promise(function (resolve, reject) {\n        if (!_this3.ready) return reject(new Error(\"socket not ready\"));\n        var message = {\n          jsonrpc: \"2.0\",\n          method: method,\n          params: params || null\n        };\n        _this3.socket.send(_this3.dataPack.encode(message), function (error) {\n          if (error) return reject(error);\n          resolve();\n        });\n      });\n    }\n    /**\n     * Subscribes for a defined event.\n     * @method\n     * @param {String|Array} event - event name\n     * @return {Undefined}\n     * @throws {Error}\n     */\n  }, {\n    key: \"subscribe\",\n    value: function () {\n      var _subscribe = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee3(event) {\n        var result;\n        return _regenerator[\"default\"].wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (typeof event === \"string\") event = [event];\n                _context3.next = 3;\n                return this.call(\"rpc.on\", event);\n              case 3:\n                result = _context3.sent;\n                if (!(typeof event === \"string\" && result[event] !== \"ok\")) {\n                  _context3.next = 6;\n                  break;\n                }\n                throw new Error(\"Failed subscribing to an event '\" + event + \"' with: \" + result[event]);\n              case 6:\n                return _context3.abrupt(\"return\", result);\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function subscribe(_x2) {\n        return _subscribe.apply(this, arguments);\n      }\n      return subscribe;\n    }()\n    /**\n     * Unsubscribes from a defined event.\n     * @method\n     * @param {String|Array} event - event name\n     * @return {Undefined}\n     * @throws {Error}\n     */\n  }, {\n    key: \"unsubscribe\",\n    value: function () {\n      var _unsubscribe = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee4(event) {\n        var result;\n        return _regenerator[\"default\"].wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (typeof event === \"string\") event = [event];\n                _context4.next = 3;\n                return this.call(\"rpc.off\", event);\n              case 3:\n                result = _context4.sent;\n                if (!(typeof event === \"string\" && result[event] !== \"ok\")) {\n                  _context4.next = 6;\n                  break;\n                }\n                throw new Error(\"Failed unsubscribing from an event with: \" + result);\n              case 6:\n                return _context4.abrupt(\"return\", result);\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n      function unsubscribe(_x3) {\n        return _unsubscribe.apply(this, arguments);\n      }\n      return unsubscribe;\n    }()\n    /**\n     * Closes a WebSocket connection gracefully.\n     * @method\n     * @param {Number} code - socket close code\n     * @param {String} data - optional data to be sent before closing\n     * @return {Undefined}\n     */\n  }, {\n    key: \"close\",\n    value: function close(code, data) {\n      this.socket.close(code || 1000, data);\n    }\n    /**\n     * Connection/Message handler.\n     * @method\n     * @private\n     * @param {String} address - WebSocket API address\n     * @param {Object} options - ws options object\n     * @return {Undefined}\n     */\n  }, {\n    key: \"_connect\",\n    value: function _connect(address, options) {\n      var _this4 = this;\n      clearTimeout(this.reconnect_timer_id);\n      this.socket = this.webSocketFactory(address, options);\n      this.socket.addEventListener(\"open\", function () {\n        _this4.ready = true;\n        _this4.emit(\"open\");\n        _this4.current_reconnects = 0;\n      });\n      this.socket.addEventListener(\"message\", function (_ref) {\n        var message = _ref.data;\n        if (message instanceof ArrayBuffer) message = Buffer.from(message).toString();\n        try {\n          message = _this4.dataPack.decode(message);\n        } catch (error) {\n          return;\n        }\n        // check if any listeners are attached and forward event\n        if (message.notification && _this4.listeners(message.notification).length) {\n          if (!Object.keys(message.params).length) return _this4.emit(message.notification);\n          var args = [message.notification];\n          if (message.params.constructor === Object) args.push(message.params);else\n            // using for-loop instead of unshift/spread because performance is better\n            for (var i = 0; i < message.params.length; i++) {\n              args.push(message.params[i]);\n            }\n          // run as microtask so that pending queue messages are resolved first\n          // eslint-disable-next-line prefer-spread\n          return Promise.resolve().then(function () {\n            _this4.emit.apply(_this4, args);\n          });\n        }\n        if (!_this4.queue[message.id]) {\n          // general JSON RPC 2.0 events\n          if (message.method && message.params) {\n            // run as microtask so that pending queue messages are resolved first\n            return Promise.resolve().then(function () {\n              _this4.emit(message.method, message.params);\n            });\n          }\n          return;\n        }\n        // reject early since server's response is invalid\n        if (\"error\" in message === \"result\" in message) _this4.queue[message.id].promise[1](new Error(\"Server response malformed. Response must include either \\\"result\\\"\" + \" or \\\"error\\\", but not both.\"));\n        if (_this4.queue[message.id].timeout) clearTimeout(_this4.queue[message.id].timeout);\n        if (message.error) _this4.queue[message.id].promise[1](message.error);else _this4.queue[message.id].promise[0](message.result);\n        delete _this4.queue[message.id];\n      });\n      this.socket.addEventListener(\"error\", function (error) {\n        return _this4.emit(\"error\", error);\n      });\n      this.socket.addEventListener(\"close\", function (_ref2) {\n        var code = _ref2.code,\n          reason = _ref2.reason;\n        if (_this4.ready)\n          // Delay close event until internal state is updated\n          setTimeout(function () {\n            return _this4.emit(\"close\", code, reason);\n          }, 0);\n        _this4.ready = false;\n        _this4.socket = undefined;\n        if (code === 1000) return;\n        _this4.current_reconnects++;\n        if (_this4.reconnect && (_this4.max_reconnects > _this4.current_reconnects || _this4.max_reconnects === 0)) _this4.reconnect_timer_id = setTimeout(function () {\n          return _this4._connect(address, options);\n        }, _this4.reconnect_interval);\n      });\n    }\n  }]);\n  return CommonClient;\n}(_eventemitter.EventEmitter);\nexports[\"default\"] = CommonClient;","/**\n * WebSocket implements a browser-side WebSocket specification.\n * @module Client\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = _default;\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\nvar _eventemitter = require(\"eventemitter3\");\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nvar WebSocketBrowserImpl = /*#__PURE__*/function (_EventEmitter) {\n  (0, _inherits2[\"default\"])(WebSocketBrowserImpl, _EventEmitter);\n  var _super = _createSuper(WebSocketBrowserImpl);\n  /** Instantiate a WebSocket class\n   * @constructor\n   * @param {String} address - url to a websocket server\n   * @param {(Object)} options - websocket options\n   * @param {(String|Array)} protocols - a list of protocols\n   * @return {WebSocketBrowserImpl} - returns a WebSocket instance\n   */\n  function WebSocketBrowserImpl(address, options, protocols) {\n    var _this;\n    (0, _classCallCheck2[\"default\"])(this, WebSocketBrowserImpl);\n    _this = _super.call(this);\n    _this.socket = new window.WebSocket(address, protocols);\n    _this.socket.onopen = function () {\n      return _this.emit(\"open\");\n    };\n    _this.socket.onmessage = function (event) {\n      return _this.emit(\"message\", event.data);\n    };\n    _this.socket.onerror = function (error) {\n      return _this.emit(\"error\", error);\n    };\n    _this.socket.onclose = function (event) {\n      _this.emit(\"close\", event.code, event.reason);\n    };\n    return _this;\n  }\n  /**\n   * Sends data through a websocket connection\n   * @method\n   * @param {(String|Object)} data - data to be sent via websocket\n   * @param {Object} optionsOrCallback - ws options\n   * @param {Function} callback - a callback called once the data is sent\n   * @return {Undefined}\n   */\n  (0, _createClass2[\"default\"])(WebSocketBrowserImpl, [{\n    key: \"send\",\n    value: function send(data, optionsOrCallback, callback) {\n      var cb = callback || optionsOrCallback;\n      try {\n        this.socket.send(data);\n        cb();\n      } catch (error) {\n        cb(error);\n      }\n    }\n    /**\n     * Closes an underlying socket\n     * @method\n     * @param {Number} code - status code explaining why the connection is being closed\n     * @param {String} reason - a description why the connection is closing\n     * @return {Undefined}\n     * @throws {Error}\n     */\n  }, {\n    key: \"close\",\n    value: function close(code, reason) {\n      this.socket.close(code, reason);\n    }\n  }, {\n    key: \"addEventListener\",\n    value: function addEventListener(type, listener, options) {\n      this.socket.addEventListener(type, listener, options);\n    }\n  }]);\n  return WebSocketBrowserImpl;\n}(_eventemitter.EventEmitter);\n/**\n * factory method for common WebSocket instance\n * @method\n * @param {String} address - url to a websocket server\n * @param {(Object)} options - websocket options\n * @return {Undefined}\n */\nfunction _default(address, options) {\n  return new WebSocketBrowserImpl(address, options);\n}","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DefaultDataPack = void 0;\nexports.createError = createError;\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar errors = new Map([[-32000, \"Event not provided\"], [-32600, \"Invalid Request\"], [-32601, \"Method not found\"], [-32602, \"Invalid params\"], [-32603, \"Internal error\"], [-32604, \"Params not found\"], [-32605, \"Method forbidden\"], [-32606, \"Event forbidden\"], [-32700, \"Parse error\"]]);\nvar DefaultDataPack = /*#__PURE__*/function () {\n  function DefaultDataPack() {\n    (0, _classCallCheck2[\"default\"])(this, DefaultDataPack);\n  }\n  (0, _createClass2[\"default\"])(DefaultDataPack, [{\n    key: \"encode\",\n    value: function encode(value) {\n      return JSON.stringify(value);\n    }\n  }, {\n    key: \"decode\",\n    value: function decode(value) {\n      return JSON.parse(value);\n    }\n  }]);\n  return DefaultDataPack;\n}();\n/**\n * Creates a JSON-RPC 2.0-compliant error.\n * @param {Number} code - error code\n * @param {String} details - error details\n * @return {Object}\n */\nexports.DefaultDataPack = DefaultDataPack;\nfunction createError(code, details) {\n  var error = {\n    code: code,\n    message: errors.get(code) || \"Internal Server Error\"\n  };\n  if (details) error[\"data\"] = details;\n  return error;\n}","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;","function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nmodule.exports = _assertThisInitialized, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n      args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n      _next(undefined);\n    });\n  };\n}\nmodule.exports = _asyncToGenerator, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nmodule.exports = _classCallCheck, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var toPropertyKey = require(\"./toPropertyKey.js\");\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, toPropertyKey(descriptor.key), descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nmodule.exports = _createClass, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _getPrototypeOf(o) {\n  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _getPrototypeOf(o);\n}\nmodule.exports = _getPrototypeOf, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var setPrototypeOf = require(\"./setPrototypeOf.js\");\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}\nmodule.exports = _inherits, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nmodule.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nvar assertThisInitialized = require(\"./assertThisInitialized.js\");\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n  return assertThisInitialized(self);\n}\nmodule.exports = _possibleConstructorReturn, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _setPrototypeOf(o, p) {\n  module.exports = _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _setPrototypeOf(o, p);\n}\nmodule.exports = _setPrototypeOf, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nmodule.exports = _toPrimitive, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nvar toPrimitive = require(\"./toPrimitive.js\");\nfunction _toPropertyKey(arg) {\n  var key = toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\nmodule.exports = _toPropertyKey, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","'use strict';\n\n// This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n\n//\n// Utilities\n//\n\n/**\n * @param {number} a The number to test.\n * @param {number} min The minimum value in the range, inclusive.\n * @param {number} max The maximum value in the range, inclusive.\n * @return {boolean} True if a >= min and a <= max.\n */\nfunction inRange(a, min, max) {\n  return min <= a && a <= max;\n}\n\n/**\n * @param {*} o\n * @return {Object}\n */\nfunction ToDictionary(o) {\n  if (o === undefined) return {};\n  if (o === Object(o)) return o;\n  throw TypeError('Could not convert argument to dictionary');\n}\n\n/**\n * @param {string} string Input string of UTF-16 code units.\n * @return {!Array.<number>} Code points.\n */\nfunction stringToCodePoints(string) {\n  // https://heycam.github.io/webidl/#dfn-obtain-unicode\n\n  // 1. Let S be the DOMString value.\n  var s = String(string);\n\n  // 2. Let n be the length of S.\n  var n = s.length;\n\n  // 3. Initialize i to 0.\n  var i = 0;\n\n  // 4. Initialize U to be an empty sequence of Unicode characters.\n  var u = [];\n\n  // 5. While i < n:\n  while (i < n) {\n\n    // 1. Let c be the code unit in S at index i.\n    var c = s.charCodeAt(i);\n\n    // 2. Depending on the value of c:\n\n    // c < 0xD800 or c > 0xDFFF\n    if (c < 0xD800 || c > 0xDFFF) {\n      // Append to U the Unicode character with code point c.\n      u.push(c);\n    }\n\n    // 0xDC00 ≤ c ≤ 0xDFFF\n    else if (0xDC00 <= c && c <= 0xDFFF) {\n      // Append to U a U+FFFD REPLACEMENT CHARACTER.\n      u.push(0xFFFD);\n    }\n\n    // 0xD800 ≤ c ≤ 0xDBFF\n    else if (0xD800 <= c && c <= 0xDBFF) {\n      // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT\n      // CHARACTER.\n      if (i === n - 1) {\n        u.push(0xFFFD);\n      }\n      // 2. Otherwise, i < n−1:\n      else {\n        // 1. Let d be the code unit in S at index i+1.\n        var d = string.charCodeAt(i + 1);\n\n        // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:\n        if (0xDC00 <= d && d <= 0xDFFF) {\n          // 1. Let a be c & 0x3FF.\n          var a = c & 0x3FF;\n\n          // 2. Let b be d & 0x3FF.\n          var b = d & 0x3FF;\n\n          // 3. Append to U the Unicode character with code point\n          // 2^16+2^10*a+b.\n          u.push(0x10000 + (a << 10) + b);\n\n          // 4. Set i to i+1.\n          i += 1;\n        }\n\n        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n        // U+FFFD REPLACEMENT CHARACTER.\n        else  {\n          u.push(0xFFFD);\n        }\n      }\n    }\n\n    // 3. Set i to i+1.\n    i += 1;\n  }\n\n  // 6. Return U.\n  return u;\n}\n\n/**\n * @param {!Array.<number>} code_points Array of code points.\n * @return {string} string String of UTF-16 code units.\n */\nfunction codePointsToString(code_points) {\n  var s = '';\n  for (var i = 0; i < code_points.length; ++i) {\n    var cp = code_points[i];\n    if (cp <= 0xFFFF) {\n      s += String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      s += String.fromCharCode((cp >> 10) + 0xD800,\n                               (cp & 0x3FF) + 0xDC00);\n    }\n  }\n  return s;\n}\n\n\n//\n// Implementation of Encoding specification\n// https://encoding.spec.whatwg.org/\n//\n\n//\n// 3. Terminology\n//\n\n/**\n * End-of-stream is a special token that signifies no more tokens\n * are in the stream.\n * @const\n */ var end_of_stream = -1;\n\n/**\n * A stream represents an ordered sequence of tokens.\n *\n * @constructor\n * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the\n * stream.\n */\nfunction Stream(tokens) {\n  /** @type {!Array.<number>} */\n  this.tokens = [].slice.call(tokens);\n}\n\nStream.prototype = {\n  /**\n   * @return {boolean} True if end-of-stream has been hit.\n   */\n  endOfStream: function() {\n    return !this.tokens.length;\n  },\n\n  /**\n   * When a token is read from a stream, the first token in the\n   * stream must be returned and subsequently removed, and\n   * end-of-stream must be returned otherwise.\n   *\n   * @return {number} Get the next token from the stream, or\n   * end_of_stream.\n   */\n   read: function() {\n    if (!this.tokens.length)\n      return end_of_stream;\n     return this.tokens.shift();\n   },\n\n  /**\n   * When one or more tokens are prepended to a stream, those tokens\n   * must be inserted, in given order, before the first token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\n   */\n  prepend: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.unshift(tokens.pop());\n    } else {\n      this.tokens.unshift(token);\n    }\n  },\n\n  /**\n   * When one or more tokens are pushed to a stream, those tokens\n   * must be inserted, in given order, after the last token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\n   */\n  push: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.push(tokens.shift());\n    } else {\n      this.tokens.push(token);\n    }\n  }\n};\n\n//\n// 4. Encodings\n//\n\n// 4.1 Encoders and decoders\n\n/** @const */\nvar finished = -1;\n\n/**\n * @param {boolean} fatal If true, decoding errors raise an exception.\n * @param {number=} opt_code_point Override the standard fallback code point.\n * @return {number} The code point to insert on a decoding error.\n */\nfunction decoderError(fatal, opt_code_point) {\n  if (fatal)\n    throw TypeError('Decoder error');\n  return opt_code_point || 0xFFFD;\n}\n\n/** @interface */\nfunction Decoder() {}\nDecoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point, or |finished|.\n   */\n  handler: function(stream, bite) {}\n};\n\n/** @interface */\nfunction Encoder() {}\nEncoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of code points being encoded.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit, or |finished|.\n   */\n  handler: function(stream, code_point) {}\n};\n\n//\n// 7. API\n//\n\n/** @const */ var DEFAULT_ENCODING = 'utf-8';\n\n// 7.1 Interface TextDecoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextDecoder(encoding, options) {\n  if (!(this instanceof TextDecoder)) {\n    return new TextDecoder(encoding, options);\n  }\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {boolean} */\n  this._BOMseen = false;\n  /** @private @type {?Decoder} */\n  this._decoder = null;\n  /** @private @type {boolean} */\n  this._fatal = Boolean(options['fatal']);\n  /** @private @type {boolean} */\n  this._ignoreBOM = Boolean(options['ignoreBOM']);\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n  Object.defineProperty(this, 'fatal', {value: this._fatal});\n  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});\n}\n\nTextDecoder.prototype = {\n  /**\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\n   * @param {Object=} options\n   * @return {string} The decoded string.\n   */\n  decode: function decode(input, options) {\n    var bytes;\n    if (typeof input === 'object' && input instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input);\n    } else if (typeof input === 'object' && 'buffer' in input &&\n               input.buffer instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input.buffer,\n                             input.byteOffset,\n                             input.byteLength);\n    } else {\n      bytes = new Uint8Array(0);\n    }\n\n    options = ToDictionary(options);\n\n    if (!this._streaming) {\n      this._decoder = new UTF8Decoder({fatal: this._fatal});\n      this._BOMseen = false;\n    }\n    this._streaming = Boolean(options['stream']);\n\n    var input_stream = new Stream(bytes);\n\n    var code_points = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n\n    while (!input_stream.endOfStream()) {\n      result = this._decoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (result === null)\n        continue;\n      if (Array.isArray(result))\n        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n      else\n        code_points.push(result);\n    }\n    if (!this._streaming) {\n      do {\n        result = this._decoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (result === null)\n          continue;\n        if (Array.isArray(result))\n          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n        else\n          code_points.push(result);\n      } while (!input_stream.endOfStream());\n      this._decoder = null;\n    }\n\n    if (code_points.length) {\n      // If encoding is one of utf-8, utf-16be, and utf-16le, and\n      // ignore BOM flag and BOM seen flag are unset, run these\n      // subsubsteps:\n      if (['utf-8'].indexOf(this.encoding) !== -1 &&\n          !this._ignoreBOM && !this._BOMseen) {\n        // If token is U+FEFF, set BOM seen flag.\n        if (code_points[0] === 0xFEFF) {\n          this._BOMseen = true;\n          code_points.shift();\n        } else {\n          // Otherwise, if token is not end-of-stream, set BOM seen\n          // flag and append token to output.\n          this._BOMseen = true;\n        }\n      }\n    }\n\n    return codePointsToString(code_points);\n  }\n};\n\n// 7.2 Interface TextEncoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextEncoder(encoding, options) {\n  if (!(this instanceof TextEncoder))\n    return new TextEncoder(encoding, options);\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {?Encoder} */\n  this._encoder = null;\n  /** @private @type {{fatal: boolean}} */\n  this._options = {fatal: Boolean(options['fatal'])};\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n}\n\nTextEncoder.prototype = {\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\n   */\n  encode: function encode(opt_string, options) {\n    opt_string = opt_string ? String(opt_string) : '';\n    options = ToDictionary(options);\n\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,\n    // so streaming is not necessary.\n    if (!this._streaming)\n      this._encoder = new UTF8Encoder(this._options);\n    this._streaming = Boolean(options['stream']);\n\n    var bytes = [];\n    var input_stream = new Stream(stringToCodePoints(opt_string));\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    while (!input_stream.endOfStream()) {\n      result = this._encoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (Array.isArray(result))\n        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n      else\n        bytes.push(result);\n    }\n    if (!this._streaming) {\n      while (true) {\n        result = this._encoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (Array.isArray(result))\n          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n        else\n          bytes.push(result);\n      }\n      this._encoder = null;\n    }\n    return new Uint8Array(bytes);\n  }\n};\n\n//\n// 8. The encoding\n//\n\n// 8.1 utf-8\n\n/**\n * @constructor\n * @implements {Decoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Decoder(options) {\n  var fatal = options.fatal;\n\n  // utf-8's decoder's has an associated utf-8 code point, utf-8\n  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n  // lower boundary (initially 0x80), and a utf-8 upper boundary\n  // (initially 0xBF).\n  var /** @type {number} */ utf8_code_point = 0,\n      /** @type {number} */ utf8_bytes_seen = 0,\n      /** @type {number} */ utf8_bytes_needed = 0,\n      /** @type {number} */ utf8_lower_boundary = 0x80,\n      /** @type {number} */ utf8_upper_boundary = 0xBF;\n\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point.\n   */\n  this.handler = function(stream, bite) {\n    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n    // set utf-8 bytes needed to 0 and return error.\n    if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n      utf8_bytes_needed = 0;\n      return decoderError(fatal);\n    }\n\n    // 2. If byte is end-of-stream, return finished.\n    if (bite === end_of_stream)\n      return finished;\n\n    // 3. If utf-8 bytes needed is 0, based on byte:\n    if (utf8_bytes_needed === 0) {\n\n      // 0x00 to 0x7F\n      if (inRange(bite, 0x00, 0x7F)) {\n        // Return a code point whose value is byte.\n        return bite;\n      }\n\n      // 0xC2 to 0xDF\n      if (inRange(bite, 0xC2, 0xDF)) {\n        // Set utf-8 bytes needed to 1 and utf-8 code point to byte\n        // − 0xC0.\n        utf8_bytes_needed = 1;\n        utf8_code_point = bite - 0xC0;\n      }\n\n      // 0xE0 to 0xEF\n      else if (inRange(bite, 0xE0, 0xEF)) {\n        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n        if (bite === 0xE0)\n          utf8_lower_boundary = 0xA0;\n        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n        if (bite === 0xED)\n          utf8_upper_boundary = 0x9F;\n        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to\n        // byte − 0xE0.\n        utf8_bytes_needed = 2;\n        utf8_code_point = bite - 0xE0;\n      }\n\n      // 0xF0 to 0xF4\n      else if (inRange(bite, 0xF0, 0xF4)) {\n        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n        if (bite === 0xF0)\n          utf8_lower_boundary = 0x90;\n        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n        if (bite === 0xF4)\n          utf8_upper_boundary = 0x8F;\n        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to\n        // byte − 0xF0.\n        utf8_bytes_needed = 3;\n        utf8_code_point = bite - 0xF0;\n      }\n\n      // Otherwise\n      else {\n        // Return error.\n        return decoderError(fatal);\n      }\n\n      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code\n      // point to utf-8 code point << (6 × utf-8 bytes needed) and\n      // return continue.\n      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);\n      return null;\n    }\n\n    // 4. If byte is not in the range utf-8 lower boundary to utf-8\n    // upper boundary, run these substeps:\n    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n\n      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n      // utf-8 upper boundary to 0xBF.\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n      utf8_lower_boundary = 0x80;\n      utf8_upper_boundary = 0xBF;\n\n      // 2. Prepend byte to stream.\n      stream.prepend(bite);\n\n      // 3. Return error.\n      return decoderError(fatal);\n    }\n\n    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n    // to 0xBF.\n    utf8_lower_boundary = 0x80;\n    utf8_upper_boundary = 0xBF;\n\n    // 6. Increase utf-8 bytes seen by one and set utf-8 code point\n    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes\n    // needed − utf-8 bytes seen)).\n    utf8_bytes_seen += 1;\n    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));\n\n    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n    // continue.\n    if (utf8_bytes_seen !== utf8_bytes_needed)\n      return null;\n\n    // 8. Let code point be utf-8 code point.\n    var code_point = utf8_code_point;\n\n    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n    // seen to 0.\n    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\n    // 10. Return a code point whose value is code point.\n    return code_point;\n  };\n}\n\n/**\n * @constructor\n * @implements {Encoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Encoder(options) {\n  var fatal = options.fatal;\n  /**\n   * @param {Stream} stream Input stream.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit.\n   */\n  this.handler = function(stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream)\n      return finished;\n\n    // 2. If code point is in the range U+0000 to U+007F, return a\n    // byte whose value is code point.\n    if (inRange(code_point, 0x0000, 0x007f))\n      return code_point;\n\n    // 3. Set count and offset based on the range code point is in:\n    var count, offset;\n    // U+0080 to U+07FF:    1 and 0xC0\n    if (inRange(code_point, 0x0080, 0x07FF)) {\n      count = 1;\n      offset = 0xC0;\n    }\n    // U+0800 to U+FFFF:    2 and 0xE0\n    else if (inRange(code_point, 0x0800, 0xFFFF)) {\n      count = 2;\n      offset = 0xE0;\n    }\n    // U+10000 to U+10FFFF: 3 and 0xF0\n    else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n      count = 3;\n      offset = 0xF0;\n    }\n\n    // 4.Let bytes be a byte sequence whose first byte is (code\n    // point >> (6 × count)) + offset.\n    var bytes = [(code_point >> (6 * count)) + offset];\n\n    // 5. Run these substeps while count is greater than 0:\n    while (count > 0) {\n\n      // 1. Set temp to code point >> (6 × (count − 1)).\n      var temp = code_point >> (6 * (count - 1));\n\n      // 2. Append to bytes 0x80 | (temp & 0x3F).\n      bytes.push(0x80 | (temp & 0x3F));\n\n      // 3. Decrease count by one.\n      count -= 1;\n    }\n\n    // 6. Return bytes bytes, in order.\n    return bytes;\n  };\n}\n\nexport {TextEncoder, TextDecoder};\n"],"names":["buffer_1","require","checkUint8Array","b","Uint8Array","TypeError","uint8ArrayToBuffer","Buffer","from","buffer","byteOffset","length","Layout","constructor","span","property","Number","isInteger","makeDestinationObject","getSpan","offset","RangeError","replicate","rv","Object","create","prototype","assign","fromArray","values","nameWithProperty","name","lo","ExternalLayout","isCount","Error","GreedyCount","elementSpan","arguments","undefined","decode","rem","Math","floor","encode","src","OffsetLayout","layout","UInt","UIntBE","readUIntLE","writeUIntLE","readUIntBE","writeUIntBE","Int","readIntLE","writeIntLE","IntBE","readIntBE","writeIntBE","V2E32","pow","divmodInt64","hi32","lo32","roundedInt64","NearUInt64","readUInt32LE","split","writeUInt32LE","NearUInt64BE","readUInt32BE","writeUInt32BE","NearInt64","readInt32LE","writeInt32LE","NearInt64BE","readInt32BE","writeInt32BE","Float","readFloatLE","writeFloatLE","FloatBE","readFloatBE","writeFloatBE","Double","readDoubleLE","writeDoubleLE","DoubleBE","readDoubleBE","writeDoubleBE","Sequence","elementLayout","count","idx","i","push","elo","reduce","v","Structure","fields","decodePrefixes","Array","isArray","acc","fd","e","fsp","dest","firstOffset","lastOffset","lastWrote","fv","shift","layoutFor","offsetOf","UnionDiscriminator","UnionLayoutDiscriminator","Union","discr","defaultLayout","discriminator","usesPrefixDiscriminator","registry","boundGetSourceVariant","defaultGetSourceVariant","bind","getSourceVariant","configGetSourceVariant","gsv","vlo","getVariant","hasOwnProperty","call","tag","dlo","clo","contentOffset","addVariant","variant","VariantLayout","vb","union","fixBitwiseResult","BitStructure","word","msb","value","_packedSetValue","_packedGetValue","addField","bits","bf","BitField","addBoolean","Boolean","fieldFor","container","totalBits","usedBits","sum","valueMask","start","wordMask","wordValue","Blob","slice","srcBuffer","write","toString","CString","String","srcb","copy","UTF8","maxSpan","Constant","exports","base64","ieee754","customInspectSymbol","Symbol","SlowBuffer","alloc","INSPECT_MAX_BYTES","K_MAX_LENGTH","createBuffer","buf","setPrototypeOf","arg","encodingOrOffset","allocUnsafe","string","encoding","isEncoding","byteLength","actual","fromString","ArrayBuffer","isView","arrayView","isInstance","fromArrayBuffer","fromArrayLike","fromArrayView","SharedArrayBuffer","valueOf","obj","isBuffer","len","checked","numberIsNaN","type","data","fromObject","toPrimitive","assertSize","size","array","mustMatch","loweredCase","utf8ToBytes","base64ToBytes","toLowerCase","slowToString","end","this","hexSlice","utf8Slice","asciiSlice","latin1Slice","base64Slice","utf16leSlice","swap","n","m","bidirectionalIndexOf","val","dir","arrayIndexOf","indexOf","lastIndexOf","arr","indexSize","arrLength","valLength","read","readUInt16BE","foundIndex","found","j","hexWrite","remaining","strLen","parsed","parseInt","substr","utf8Write","blitBuffer","asciiWrite","str","byteArray","charCodeAt","asciiToBytes","base64Write","ucs2Write","units","c","hi","utf16leToBytes","fromByteArray","min","res","firstByte","codePoint","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","codePoints","MAX_ARGUMENTS_LENGTH","fromCharCode","apply","decodeCodePointsArray","kMaxLength","TYPED_ARRAY_SUPPORT","proto","foo","typedArraySupport","console","error","defineProperty","enumerable","get","poolSize","fill","allocUnsafeSlow","_isBuffer","compare","a","x","y","concat","list","pos","set","swap16","swap32","swap64","toLocaleString","equals","inspect","max","replace","trim","target","thisStart","thisEnd","thisCopy","targetCopy","includes","isFinite","toJSON","_arr","ret","out","hexSliceLookupTable","bytes","checkOffset","ext","checkInt","wrtBigUInt64LE","checkIntBI","BigInt","wrtBigUInt64BE","checkIEEE754","writeFloat","littleEndian","noAssert","writeDouble","newBuf","subarray","readUintLE","mul","readUintBE","readUint8","readUInt8","readUint16LE","readUInt16LE","readUint16BE","readUint32LE","readUint32BE","readBigUInt64LE","defineBigIntMethod","validateNumber","first","last","boundsError","readBigUInt64BE","readInt8","readInt16LE","readInt16BE","readBigInt64LE","readBigInt64BE","writeUintLE","writeUintBE","writeUint8","writeUInt8","writeUint16LE","writeUInt16LE","writeUint16BE","writeUInt16BE","writeUint32LE","writeUint32BE","writeBigUInt64LE","writeBigUInt64BE","limit","sub","writeInt8","writeInt16LE","writeInt16BE","writeBigInt64LE","writeBigInt64BE","targetStart","copyWithin","code","errors","E","sym","getMessage","Base","super","writable","configurable","stack","message","addNumericalSeparator","range","ERR_OUT_OF_RANGE","checkBounds","ERR_INVALID_ARG_TYPE","ERR_BUFFER_OUT_OF_BOUNDS","input","msg","received","abs","INVALID_BASE64_RE","Infinity","leadSurrogate","toByteArray","base64clean","dst","alphabet","table","i16","fn","BufferBigIntNotDefined","SHA2","Hash","blockLen","outputLen","padOffset","isLE","finished","destroyed","view","createView","update","exists","toBytes","take","process","dataView","roundClean","digestInto","output","setBigUint64","_32n","_u32_max","wh","wl","h","l","setUint32","oview","outLen","state","digest","destroy","_cloneInto","to","SHA512_Kh","SHA512_Kl","u64","map","SHA512_W_H","Uint32Array","SHA512_W_L","SHA512","Ah","Al","Bh","Bl","Ch","Cl","Dh","Dl","Eh","El","Fh","Fl","Gh","Gl","Hh","Hl","getUint32","W15h","W15l","s0h","s0l","W2h","W2l","s1h","s1l","SUMl","SUMh","sigma1h","sigma1l","CHIh","CHIl","T1ll","T1h","T1l","sigma0h","sigma0l","MAJh","MAJl","All","sha512","wrapConstructor","_0n","_1n","_2n","_3n","_4n","_5n","_8n","mod","result","num","power","modulo","pow2","invert","number","u","q","r","FpSqrt","P","p1div4","Fp","root","eql","sqr","c1","n2","nv","ONE","legendreC","Q","S","Z","Q1div2","neg","g","ZERO","t2","ge","tonelliShanks","isNegativeLE","FIELD_FIELDS","nLength","nBitLength","_nBitLength","nByteLength","ceil","Field","ORDER","bitLen","redef","BITS","BYTES","sqrtP","f","freeze","MASK","bitMask","isValid","is0","isOdd","lhs","rhs","add","p","d","FpPow","div","sqrN","addN","subN","mulN","inv","sqrt","invertBatch","lst","nums","tmp","lastMultiplied","inverted","reduceRight","FpInvertBatch","cmov","numberToBytesLE","numberToBytesBE","fromBytes","bytesToNumberLE","bytesToNumberBE","getFieldBytesLength","fieldOrder","bitLength","getMinHashLength","wNAF","constTimeNegate","condition","item","negate","opts","W","windows","windowSize","unsafeLadder","elm","double","precomputeWindow","points","base","window","precomputes","BASE","mask","maxNumber","shiftBy","wbits","offset1","offset2","cond1","cond2","wNAFCached","precomputesMap","transform","_WINDOW_SIZE","comp","validateBasic","curve","field","validateObject","validateField","Gx","Gy","VERIFY_DEFAULT","zip215","twistedEdwards","curveDef","CURVE","ut","hash","randomBytes","adjustScalarBytes","domain","uvRatio","mapToCurve","validateOpts","CURVE_ORDER","prehash","cHash","cofactor","modP","ctx","phflag","inBig","inRange","in0MaskRange","assertInRange","assertGE0","pointPrecomputes","Map","isPoint","other","Point","ex","ey","ez","et","toAffine","fromAffine","normalizeZ","toInv","_setWindowSize","delete","assertValidity","X","Y","T","X2","Y2","Z2","Z4","aX2","X1","Y1","Z1","X1Z2","X2Z1","Y1Z2","Y2Z1","A","B","C","D","x1y1","G","F","H","X3","Y3","T3","Z3","T1","T2","subtract","wnaf","multiply","scalar","multiplyUnsafe","I","isSmallOrder","isTorsionFree","iz","z","ax","ay","zz","clearCofactor","fromHex","hex","normed","ensureBytes","lastByte","y2","isXOdd","isLastByteOdd","fromPrivateKey","privKey","getExtendedPublicKey","point","toRawBytes","toHex","modN","modN_LE","key","hashed","head","prefix","pointBytes","hashDomainToScalar","context","_len","msgs","_key","verifyOpts","utils","randomPrivateKey","precompute","getPublicKey","sign","options","R","s","verify","sig","publicKey","SB","k","ExtendedPoint","ED25519_P","ED25519_SQRT_M1","_10n","_20n","_40n","_80n","ed25519_pow_2_252_3","b2","b4","b5","b10","b20","b40","b80","b160","b240","b250","pow_p_5_8","v3","v7","vx2","root1","root2","useRoot1","useRoot2","noRoot","ed25519Defaults","ed25519","ed25519_domain","concatBytes","ELL2_C1","FpSqrtEven","Maj","SHA256_K","IV","SHA256_W","SHA256","W15","W2","s0","rotr","s1","Chi","sha256","StructError","failure","failures","cached","rest","path","join","_cached","isObject","print","JSON","stringify","toFailure","struct","branch","refinement","toFailures","iterator","run","coerce","coercer","schema","valid","validator","entries","ts","t","Set","refiner","Struct","props","assert","validate","is","tuples","tuple","done","next","shiftIterator","define","Element","boolean","instance","Class","literal","constant","description","never","nullable","isNaN","optional","record","Key","Value","Elements","Never","keys","Structs","unknown","HMAC","assertHash","iHash","pad","oHash","assertExists","assertBytes","getPrototypeOf","hmac","b2n","hexToBytes","h2b","DER","Err","_parseInt","toSig","sBytes","rBytesLeft","hexFromSig","shl","rhl","sl","rl","weierstrassPoints","allowedPrivateKeyLengths","wrapPrivateKey","allowInfinityPoint","endo","beta","splitScalar","validatePointOpts","_c","_isCompressed","tail","weierstrassEquation","x2","x3","isWithinCurveOrder","assertGE","normPrivateKeyToScalar","lengths","padStart","assertPrjPoint","px","py","pz","privateKey","left","right","hasEvenY","U1","U2","b3","t0","t1","t3","t4","t5","k1neg","k1","k2neg","k2","k1p","k2p","fake","f1p","f2p","multiplyAndAddUnsafe","isCompressed","_bits","ProjectivePoint","weierstrass","bits2int","bits2int_modN","lowS","compressedLen","uncompressedLen","invN","cat","numToNByteStr","isBiggerThanHalfOrder","slcNum","Signature","recovery","fromCompact","fromDER","addRecoveryBit","recoverPublicKey","msgHash","rec","radj","ir","u1","u2","hasHighS","normalizeS","toDERRawBytes","toDERHex","toCompactRawBytes","toCompactHex","isValidPrivateKey","fieldLen","minLen","reduced","isProbPub","delta","ORDER_MASK","int2octets","prepSig","defaultSigOpts","some","extraEntropy","ent","h1int","seedArgs","seed","k2sig","kBytes","ik","normS","defaultVerOpts","getSharedSecret","privateA","publicB","drbg","signature","_Point$BASE$multiplyA","sg","_sig","derError","getHash","secp256k1P","secp256k1N","divNearest","sqrtMod","_6n","_11n","_22n","_23n","_44n","_88n","b6","b9","b11","b22","b44","b88","b176","b220","b223","secp256k1","defHash","createCurve","a1","b1","a2","POW_2_128","c2","generateKeypair","privateScalar","secretKey","isOnCurve","toBuffer","properties","serialize","SOLANA_SCHEMA","deserialize","decodeUnchecked","deserializeUnchecked","PUBLIC_KEY_LENGTH","uniquePublicKeyCounter","_Symbol$toStringTag","toStringTag","PublicKey","_bn","isPublicKeyData","decoded","bs58","BN","unique","eq","toBase58","toArrayLike","zeroPad","createWithSeed","fromPublicKey","programId","publicKeyBytes","createProgramAddressSync","seeds","forEach","createProgramAddress","findProgramAddressSync","address","nonce","seedsWithNonce","err","findProgramAddress","pubkeyData","_class","default","kind","PACKET_DATA_SIZE","TransactionExpiredBlockheightExceededError","TransactionExpiredTimeoutError","timeoutSeconds","toFixed","TransactionExpiredNonceInvalidError","MessageAccountKeys","staticAccountKeys","accountKeysFromLookups","keySegments","readonly","index","keySegment","flat","compileInstructions","instructions","U8_MAX","keyIndexMap","findKeyIndex","keyIndex","instruction","programIdIndex","accountKeyIndexes","meta","pubkey","BufferLayout","rustString","rsl","_decode","_encode","rslShim","chars","getAlloc","getItemAlloc","decodeLength","elem","encodeLength","rem_len","CompiledKeys","payer","keyMetaMap","compile","getOrInsertDefault","keyMeta","isSigner","isWritable","isInvoked","payerKeyMeta","ix","accountMeta","getMessageComponents","mapEntries","writableSigners","filter","_ref","readonlySigners","_ref2","writableNonSigners","_ref3","readonlyNonSigners","_ref4","header","numRequiredSignatures","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","payerAddress","_ref5","_ref6","_ref7","_ref8","extractTableLookup","lookupTable","writableIndexes","drainedWritableKeys","drainKeysFoundInLookupTable","addresses","readonlyIndexes","drainedReadonlyKeys","accountKey","lookupTableEntries","keyMetaFilter","lookupTableIndexes","drainedKeys","lookupTableIndex","findIndex","entry","Message","args","accountKeys","recentBlockhash","indexToProgramIds","account","version","compiledInstructions","accounts","addressTableLookups","getAccountKeys","compiledKeys","payerKey","isAccountSigner","isAccountWritable","numSignedAccounts","isProgramId","has","programIds","nonProgramIds","_","numKeys","keyCount","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","signDataLayout","transaction","signData","accountCount","dataSlice","messageArgs","MessageV0","numAccountKeysFromLookups","lookup","addressLookupTableAccounts","resolveAddressTableLookups","numStaticAccountKeys","tableLookup","tableAccount","find","lookupTableAccounts","extractResult","addressTableLookup","encodedStaticAccountKeysLength","serializedInstructions","serializeInstructions","encodedInstructionsLength","serializedAddressTableLookups","serializeAddressTableLookups","encodedAddressTableLookupsLength","messageLayout","serializedMessage","serializedMessageLength","staticAccountKeysLength","instructionsLength","addressTableLookupsLength","serializedLength","encodedAccountKeyIndexesLength","encodedDataLength","encodedWritableIndexesLength","encodedReadonlyIndexesLength","maskedPrefix","splice","accountKeyIndexesLength","addressTableLookupsCount","writableIndexesLength","readonlyIndexesLength","VersionedMessage","deserializeMessageVersion","TransactionStatus","DEFAULT_SIGNATURE","TransactionInstruction","_ref9","Transaction","signatures","feePayer","lastValidBlockHeight","nonceInfo","minNonceContextSlot","_message","_json","minContextSlot","blockhash","nonceInstruction","signers","_ref10","items","compileMessage","warn","accountMetas","uniqueMetas","pubkeyString","uniqueIndex","sort","localeCompare","localeMatcher","usage","sensitivity","ignorePunctuation","numeric","caseFirst","feePayerIndex","payerMeta","unshift","signedKeys","unsignedKeys","_ref11","_compile","every","pair","serializeMessage","getEstimatedFee","connection","getFeeForMessage","setSigners","_len2","_key2","seen","_len3","_key3","uniqueSigners","signer","_partialSign","partialSign","_len4","_key4","_len5","_key5","_addSignature","addSignature","sigpair","verifySignatures","requireAllSignatures","_verifySignatures","config","_serialize","signatureCount","transactionLength","wireTransaction","_ref12","keyObj","populate","sigPubkeyPair","VersionedTransaction","defaultSignatures","encodedSignaturesLength","transactionLayout","serializedTransaction","serializedTransactionLength","signaturesLength","messageData","signerPubkeys","signerIndex","SYSVAR_CLOCK_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","async","sendAndConfirmTransaction","sendOptions","skipPreflight","preflightCommitment","commitment","maxRetries","sendTransaction","status","confirmTransaction","abortSignal","nonceAccountPubkey","nonceValue","sleep","ms","Promise","resolve","setTimeout","encodeData","allocLength","layoutFields","FeeCalculatorLayout","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","authorizedPubkey","feeCalculator","fromAccountData","nonceAccount","blob","encodeDecode","bigIntLayout","toBigIntLE","bigInt","toBufferLE","SYSTEM_INSTRUCTION_LAYOUTS","Create","Assign","Transfer","CreateWithSeed","AdvanceNonceAccount","WithdrawNonceAccount","InitializeNonceAccount","AuthorizeNonceAccount","Allocate","AllocateWithSeed","AssignWithSeed","TransferWithSeed","UpgradeNonceAccount","SystemProgram","createAccount","params","lamports","space","fromPubkey","newAccountPubkey","transfer","basePubkey","toPubkey","accountPubkey","createAccountWithSeed","createNonceAccount","noncePubkey","initParams","nonceInitialize","authorized","instructionData","nonceAdvance","nonceWithdraw","nonceAuthorize","newAuthorizedPubkey","allocate","Loader","getMinNumSignatures","chunkSize","load","program","balanceNeeded","getMinimumBalanceForRentExemption","programInfo","getAccountInfo","executable","owner","dataLayout","transactions","bytesLength","bytesLengthPadding","_rpcEndpoint","REQUESTS_PER_SECOND","all","deployCommitment","finalizeSignature","getSlot","slot","round","MS_PER_SLOT","objToString","objKeys","isArrayProp","propVal","toStr","returnVal","trailingZeros","EpochSchedule","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpoch","getEpochAndSlotIndex","epoch","getSlotsInEpoch","normalSlotIndex","normalEpochIndex","getFirstSlotInEpoch","getLastSlotInEpoch","SendTransactionError","logs","SolanaJSONRPCError","_ref13","customMessage","fetchImpl","globalThis","fetch","RpcWebSocketClient","RpcWebSocketCommonClient","generate_request_id","url","rpc","createRpc","autoconnect","max_reconnects","reconnect","reconnect_interval","underlyingSocket","socket","_this$underlyingSocke","readyState","reject","notify","_this$underlyingSocke2","AddressLookupTableAccount","isActive","U64_MAX","deactivationSlot","accountData","typeIndex","decodeData","LookupTableMetaLayout","serializedAddressesLen","numSerializedAddresses","lastExtendedSlot","lastExtendedSlotStartIndex","lastExtendedStartIndex","authority","URL_RE","PublicKeyFromString","RawAccountDataResult","BufferFromRawAccountData","extractCommitmentFromConfig","commitmentOrConfig","specifiedCommitment","specifiedConfig","createRpcResult","jsonrpc","id","UnknownRpcResult","jsonRpcResult","jsonRpcResultAndContext","notificationResultAndContext","versionedMessageFromResponse","response","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","effectiveSlot","amount","postBalance","commission","GetRecentPrioritizationFeesResult","prioritizationFee","GetInflationRateResult","total","GetEpochInfoResult","slotIndex","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","GetLeaderScheduleResult","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","rentEpoch","unitsConsumed","returnData","BlockProductionResponseStruct","byIdentity","firstSlot","lastSlot","GetInflationGovernorRpcResult","GetInflationRateRpcResult","GetRecentPrioritizationFeesRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","AddressTableLookupStruct","ConfirmedTransactionResult","AnnotatedAccountKey","source","ConfirmedTransactionAccountsModeResult","ParsedInstructionResult","RawInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","LoadedAddressesResult","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","loadedAddresses","computeUnitsConsumed","ParsedConfirmedTransactionMetaResult","TransactionVersionStruct","RewardsResult","rewardType","GetBlockRpcResult","previousBlockhash","parentSlot","rewards","GetNoneModeBlockRpcResult","GetAccountsModeBlockRpcResult","GetParsedBlockRpcResult","GetParsedAccountsModeBlockRpcResult","GetParsedNoneModeBlockRpcResult","GetConfirmedBlockRpcResult","GetBlockSignaturesRpcResult","GetTransactionRpcResult","GetParsedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","GetLatestBlockhashRpcResult","IsBlockhashValidRpcResult","GetRecentPerformanceSamplesRpcResult","numTransactions","numSlots","samplePeriodSecs","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","COMMON_HTTP_HEADERS","Connection","endpoint","_commitmentOrConfig","wsEndpoint","httpHeaders","fetchMiddleware","disableRetryOnRateLimit","httpAgent","_commitment","_confirmTransactionInitialTimeout","_rpcWsEndpoint","_rpcClient","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","_rpcWebSocketIdleTimeout","_rpcWebSocketGeneration","_disableBlockhashCaching","_pollingBlockhash","_blockhashInfo","latestBlockhash","lastFetch","transactionSignatures","simulatedSignatures","_nextClientSubscriptionId","_subscriptionDisposeFunctionsByClientSubscriptionId","_subscriptionHashByClientSubscriptionId","_subscriptionStateChangeCallbacksByHash","_subscriptionCallbacksByServerSubscriptionId","_subscriptionsByHash","_subscriptionsAutoDisposedByRpc","getBlockHeight","requestPromises","_requestPromises$requ","_buildArgs","requestHash","fastStableStringify$1","confirmTransactionInitialTimeout","putativeUrl","test","assertEndpointUrl","matches","match","hostish","portWithColon","protocol","startsWith","startPort","websocketPort","makeWebsocketUrl","customFetch","fetchWithMiddleware","info","init","modifiedFetchArgs","modifiedInfo","modifiedInit","RpcClient","request","callback","method","body","agent","headers","too_many_requests_retries","waitTime","log","statusText","text","ok","createRpcClient","client","createRpcRequest","requests","batch","methodName","createRpcBatchRequest","on","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","rpcEndpoint","getBalanceAndContext","getBalance","then","catch","getBlockTime","getMinimumLedgerSlot","getFirstAvailableBlock","getSupply","configArg","getTokenSupply","tokenMintAddress","getTokenAccountBalance","tokenAddress","getTokenAccountsByOwner","ownerAddress","_args","getParsedTokenAccountsByOwner","getLargestAccounts","getTokenLargestAccounts","mintAddress","getAccountInfoAndContext","getParsedAccountInfo","getMultipleParsedAccounts","publicKeys","rawConfig","getMultipleAccountsInfoAndContext","getMultipleAccountsInfo","getStakeActivation","getProgramAccounts","configOrCommitment","configWithoutEncoding","unsafeRes","baseSchema","withContext","getParsedProgramAccounts","strategy","rawSignature","decodedSignature","_config$abortSignal","aborted","reason","confirmTransactionUsingLegacyTimeoutStrategy","confirmTransactionUsingBlockHeightExceedanceStrategy","confirmTransactionUsingDurableNonceStrategy","getCancellationPromise","signal","addEventListener","getTransactionConfirmationPromise","_ref14","signatureSubscriptionId","disposeSignatureSubscriptionStateChangeObserver","abortConfirmation","removeSignatureListener","confirmationPromise","onSignature","__type","PROCESSED","subscriptionSetupPromise","resolveSubscriptionSetup","_onSubscriptionStateChange","nextState","getSignatureStatus","_ref15","expiryPromise","checkBlockHeight","_e","currentBlockHeight","BLOCKHEIGHT_EXCEEDED","cancellationPromise","outcome","race","_ref16","currentNonceValue","lastCheckedSlot","getCurrentNonceValue","getNonceAndContext","NONCE_INVALID","slotInWhichNonceDidAdvance","_signatureStatus","signatureStatus","_outcome$slotInWhichN","commitmentForStatus","_ref17","timeoutId","timeoutMs","TIMED_OUT","clearTimeout","getClusterNodes","getVoteAccounts","getSlotLeader","getSlotLeaders","startSlot","getSignatureStatuses","getTransactionCount","getTotalSupply","excludeNonCirculatingAccountsList","getInflationGovernor","getInflationReward","getInflationRate","getEpochInfo","getEpochSchedule","epochSchedule","getLeaderSchedule","getRecentBlockhashAndContext","getRecentPerformanceSamples","getFeeCalculatorForBlockhash","wireMessage","getRecentPrioritizationFees","_config$lockedWritabl","lockedWritableAccounts","getRecentBlockhash","getLatestBlockhash","getLatestBlockhashAndContext","isBlockhashValid","getVersion","getGenesisHash","getBlock","_buildArgsAtLeastConfirmed","transactionDetails","_ref18","getParsedBlock","getBlockProduction","extra","getTransaction","getParsedTransaction","getParsedTransactions","getTransactions","getConfirmedBlock","block","_ref19","_ref20","getBlocks","endSlot","getBlockSignatures","getConfirmedBlockSignatures","getConfirmedTransaction","getParsedConfirmedTransaction","getParsedConfirmedTransactions","getConfirmedSignaturesForAddress","firstAvailableBlock","until","highestConfirmedRoot","before","getConfirmedSignaturesForAddress2","getSignaturesForAddress","getAddressLookupTable","accountInfo","getNonce","requestAirdrop","_blockhashWithExpiryBlockHeight","disableCache","expired","Date","now","_pollNewBlockhash","startTime","cachedLatestBlockhash","cachedBlockhash","getStakeMinimumDelegation","simulateTransaction","transactionOrMessage","configOrSigners","includeAccounts","encodedTransaction","originalTx","sigVerify","traceIndent","logTrace","signersOrOptions","sendRawTransaction","rawTransaction","sendEncodedTransaction","setInterval","_updateSubscriptions","MAX_SAFE_INTEGER","clearInterval","_ref21","_setSubscription","nextSubscription","_this$_subscriptionsB","prevState","stateChangeCallbacks","cb","clientSubscriptionId","_this$_subscriptionSt","close","connect","activeWebSocketGeneration","isCurrentConnectionStillActive","callbacks","serverSubscriptionId","unsubscribeMethod","_handleServerNotification","callbackArgs","notification","_makeSubscription","subscriptionConfig","existingSubscription","onAccountChange","removeAccountChangeListener","_unsubscribeClientSubscription","accountId","onProgramAccountChange","filters","removeProgramAccountChangeListener","onLogs","mentions","removeOnLogsListener","onSlotChange","removeSlotChangeListener","onSlotUpdate","removeSlotUpdateListener","subscriptionName","dispose","override","_err","onSignatureWithOptions","onRootChange","removeRootChangeListener","Keypair","keypair","_keypair","generate","fromSecretKey","skipValidation","computedPublicKey","ii","fromSeed","LOOKUP_TABLE_INSTRUCTION_LAYOUTS","CreateLookupTable","FreezeLookupTable","ExtendLookupTable","DeactivateLookupTable","CloseLookupTable","AddressLookupTableProgram","createLookupTable","lookupTableAddress","bumpSeed","recentSlot","freezeLookupTable","extendLookupTable","addr","deactivateLookupTable","closeLookupTable","recipient","COMPUTE_BUDGET_INSTRUCTION_LAYOUTS","RequestUnits","RequestHeapFrame","SetComputeUnitLimit","SetComputeUnitPrice","ComputeBudgetProgram","requestUnits","requestHeapFrame","setComputeUnitLimit","setComputeUnitPrice","microLamports","ED25519_INSTRUCTION_LAYOUT","Ed25519Program","createInstructionWithPublicKey","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","createInstructionWithPrivateKey","publicKeyCreate","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","publicKeyToEthAddress","keccak_256","recoveryId","createInstructionWithEthAddress","ethAddress","rawAddress","ethAddressOffset","ethAddressInstructionIndex","pkey","messageHash","ecdsaSign","STAKE_CONFIG_ID","Lockup","unixTimestamp","custodian","_class2","STAKE_INSTRUCTION_LAYOUTS","Initialize","lockup","Authorize","Delegate","Split","Withdraw","Deactivate","Merge","AuthorizeWithSeed","Staker","Withdrawer","StakeProgram","initialize","stakePubkey","maybeLockup","staker","withdrawer","delegate","authorize","stakeAuthorizationType","custodianPubkey","newAuthorized","authorizeWithSeed","authorityBase","authoritySeed","authorityOwner","splitInstruction","splitStakePubkey","splitWithSeed","merge","sourceStakePubKey","withdraw","deactivate","VOTE_INSTRUCTION_LAYOUTS","InitializeAccount","voteInit","voteAuthorizeWithSeedArgs","Voter","VoteProgram","initializeAccount","authorizedVoter","authorizedWithdrawer","voteAuthorizationType","currentAuthorityDerivedKeyBasePubkey","currentAuthorityDerivedKeyOwnerPubkey","currentAuthorityDerivedKeySeed","authorizedWithdrawerPubkey","safeWithdraw","currentVoteAccountBalance","rentExemptMinimum","website","details","keybaseUsername","CHAIN_NAMESPACES","Web3AuthError","CustomError","_defineProperty","WalletInitializationError","fromCode","extraMessage","messages","notFound","notInstalled","notReady","windowBlocked","windowClosed","incompatibleChainNameSpace","duplicateAdapterError","invalidProviderConfigError","providerNotReadyError","rpcConnectionError","invalidParams","invalidNetwork","WalletLoginError","connectionError","disconnectionError","notConnectedError","popupClosed","mfaEnabled","MULTI_CHAIN_ADAPTERS","OPENLOGIN","WALLET_CONNECT_V1","WALLET_CONNECT_V2","SOLANA_ADAPTERS","_objectSpread$1","TORUS_SOLANA","PHANTOM","SOLFLARE","SLOPE","EVM_ADAPTERS","TORUS_EVM","METAMASK","COINBASE","ADAPTER_STATUS","NOT_READY","READY","CONNECTING","CONNECTED","DISCONNECTED","ERRORED","_objectSpread","ADAPTER_DATA_UPDATED","loglevel","isHexStrict","createChainIdMiddleware","chainId","req","createProviderConfigMiddleware","providerConfig","createConfigMiddleware","mergeMiddleware","createGetAccountsMiddleware","getAccounts","createAsyncMiddleware","createRequestAccountsMiddleware","requestAccounts","createGenericJRPCMiddleware","targetMethod","handler","createSolanaMiddleware","providerHandlers","signTransaction","signAndSendTransaction","signAllTransactions","signMessage","getPrivateKey","getSecretKey","BaseInjectedProvider","BaseProvider","chainConfig","_objectSpread$3","chainNamespace","switchChain","setupProvider","injectedProvider","engine","JRPCEngine","solanaMiddleware","getProviderHandlers","configMiddleware","injectedProviderProxy","getInjectedProviderProxy","provider","providerFromEngine","updateProviderEngineProxy","lookupNetwork","getBaseProviderHandlers","ethErrors","methodNotSupported","display","_req$params","_req$params2","createInjectedProviderProxyMiddleware","_next","_objectSpread$2","PhantomInjectedProvider","isVersionTransction","SlopeInjectedProxyProvider","getSlopeHandlers","getProviderEngineProxy","txMessage","invalidRequest","custom","conn","rpcTarget","_data$signatures","allTxns","unsignedTx","SolflareInjectedProvider","getSolflareHandlers","solflareProviderHandlers","TorusInjectedProvider","handleInjectedProviderUpdate","setupEngine","connectedChainId","connectedHexChainId","emit","_req$params3","_req$params4","_req$params5","getTorusHandlers","configure","SolanaPrivateKeyProvider","enable","_providerEngineProxy","keyPair","nacl","detached","_req$params6","txns","tx","networkMiddleware","createFetchMiddleware","createJsonRpcClient","getChainSwitchMiddleware","getAccountMiddleware","updateAccount","getChainConfig","health","addNewChainConfig","switchSolanaChain","createChainSwitchMiddleware","chainName","rpcUrls","blockExplorerUrls","nativeCurrency","addChain","ticker","symbol","tickerName","displayName","blockExplorer","updatePrivatekey","createAccountMiddleware","providerFactory","SolanaWallet","_Buffer","module","ALPHABET","BASE_MAP","charAt","xc","LEADER","FACTOR","iFACTOR","decodeUnsafe","psz","zeroes","b256","carry","it3","it4","vch","pbegin","pend","b58","it1","it2","repeat","reversed","reverse","width","__createBinding","o","__setModuleDefault","__decorate","decorators","desc","getOwnPropertyDescriptor","Reflect","decorate","__importStar","__esModule","__importDefault","BinaryReader","BinaryWriter","BorshError","baseDecode","baseEncode","bn_js_1","bs58_1","textDecoder","TextDecoder","fatal","INITIAL_LENGTH","fieldPath","originalMessage","addToFieldPath","fieldName","maybeResize","writeU8","writeU16","writeU32","writeU64","writeBuffer","toArray","writeU128","writeU256","writeU512","writeString","writeFixedArray","writeArray","handlingRangeError","propertyKey","propertyDescriptor","originalMethod","readU8","readU16","readU32","readU64","readBuffer","readU128","readU256","readU512","readString","readFixedArray","readArray","capitalizeFirstLetter","toUpperCase","serializeField","fieldType","writer","serializeStruct","borshSerialize","structSchema","deserializeField","reader","deserializeStruct","classType","borshDeserialize","basex","uuid","generateRequest","ClientBrowser","callServer","reviver","replacer","generator","notificationIdNull","self","isBatch","hasCallback","_parseResponse","responseText","parse","isError","isNotError","_interopRequireDefault","_regenerator","_asyncToGenerator2","_typeof2","_classCallCheck2","_createClass2","_inherits2","_possibleConstructorReturn2","_getPrototypeOf2","_eventemitter","_utils","_createSuper","Derived","hasNativeReflectConstruct","construct","sham","Proxy","_isNativeReflectConstruct","Super","NewTarget","__rest","getOwnPropertySymbols","propertyIsEnumerable","CommonClient","_EventEmitter","_super","webSocketFactory","_this","_a","dataPack","_a$autoconnect","_a$reconnect","_a$reconnect_interval","_a$max_reconnects","rest_options","queue","rpc_id","ready","reconnect_timer_id","current_reconnects","DefaultDataPack","_connect","timeout","ws_opts","_this2","send","promise","_login","mark","_callee","resp","wrap","_context","prev","sent","abrupt","stop","_x","_listMethods","_callee2","_context2","_this3","_subscribe","_callee3","event","_context3","_x2","_unsubscribe","_callee4","_context4","_x3","_this4","listeners","EventEmitter","WebSocketBrowserImpl","protocols","WebSocket","onopen","onmessage","onerror","onclose","optionsOrCallback","listener","createError","getRandomValues","rnds8","rng","crypto","msCrypto","REGEX","byteToHex","rnds","random","ReferenceError","asyncGeneratorStep","gen","_throw","Constructor","toPropertyKey","_defineProperties","descriptor","protoProps","staticProps","_getPrototypeOf","__proto__","subClass","superClass","_typeof","assertThisInitialized","_setPrototypeOf","hint","prim","ToDictionary","Stream","tokens","endOfStream","prepend","token","pop","decoderError","opt_code_point","DEFAULT_ENCODING","_streaming","_BOMseen","_decoder","_fatal","_ignoreBOM","TextEncoder","_encoder","_options","UTF8Decoder","utf8_code_point","utf8_bytes_seen","utf8_bytes_needed","utf8_lower_boundary","utf8_upper_boundary","stream","bite","code_point","UTF8Encoder","temp","input_stream","code_points","cp","codePointsToString","opt_string","stringToCodePoints"],"sourceRoot":""}