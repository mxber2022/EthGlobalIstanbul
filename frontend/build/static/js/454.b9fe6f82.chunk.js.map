{"version":3,"file":"static/js/454.b9fe6f82.chunk.js","mappings":"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","sources":["../node_modules/@ethereumjs/tx/src/baseTransaction.ts","../node_modules/@ethereumjs/tx/src/eip1559Transaction.ts","../node_modules/@ethereumjs/tx/src/eip2930Transaction.ts","../node_modules/@ethereumjs/tx/src/fromRpc.ts","../node_modules/@ethereumjs/tx/src/index.ts","../node_modules/@ethereumjs/tx/src/legacyTransaction.ts","../node_modules/@ethereumjs/tx/src/transactionFactory.ts","../node_modules/@ethereumjs/tx/src/types.ts","../node_modules/@ethereumjs/tx/src/util.ts","../node_modules/@ethereumjs/tx/node_modules/@ethereumjs/common/src/common.ts","../node_modules/@ethereumjs/tx/node_modules/@ethereumjs/common/src/eips/index.ts","../node_modules/@ethereumjs/tx/node_modules/@ethereumjs/common/src/enums.ts","../node_modules/@ethereumjs/tx/node_modules/@ethereumjs/common/src/hardforks/index.ts","../node_modules/@ethereumjs/tx/node_modules/@ethereumjs/common/src/index.ts","../node_modules/@ethereumjs/tx/node_modules/@ethereumjs/common/src/utils.ts","../node_modules/@web3auth/ethereum-provider/node_modules/@web3auth/base/src/chain/IChainInterface.ts","../node_modules/@web3auth/ethereum-provider/node_modules/@web3auth/base/src/chain/config.ts","../node_modules/@web3auth/ethereum-provider/node_modules/@web3auth/base/src/errors/index.ts","../node_modules/@web3auth/ethereum-provider/node_modules/@web3auth/base/src/wallet/index.ts","../node_modules/@web3auth/ethereum-provider/node_modules/@web3auth/base/src/adapter/IAdapter.ts","../node_modules/@web3auth/ethereum-provider/node_modules/@web3auth/base/src/loglevel.ts","../node_modules/@web3auth/ethereum-provider/node_modules/@web3auth/base/src/utils.ts","../node_modules/@web3auth/ethereum-provider/src/rpc/walletMidddleware.ts","../node_modules/@web3auth/ethereum-provider/src/rpc/ethRpcMiddlewares.ts","../node_modules/@web3auth/ethereum-provider/src/rpc/jrpcClient.ts","../node_modules/@web3auth/ethereum-provider/src/providers/injectedProviders/WalletConnectProvider.ts","../node_modules/@web3auth/ethereum-provider/src/providers/injectedProviders/walletConnectUtils.ts","../node_modules/@web3auth/ethereum-provider/src/providers/converter.ts","../node_modules/@web3auth/ethereum-provider/src/providers/privateKeyProviders/TransactionFormatter/utils.ts","../node_modules/@web3auth/ethereum-provider/src/providers/privateKeyProviders/ethPrivatekeyUtils.ts","../node_modules/@web3auth/ethereum-provider/src/providers/utils.ts","../node_modules/@web3auth/ethereum-provider/src/providers/privateKeyProviders/TransactionFormatter/constants.ts","../node_modules/@web3auth/ethereum-provider/src/providers/privateKeyProviders/TransactionFormatter/index.ts","../node_modules/@web3auth/ethereum-provider/src/providers/privateKeyProviders/EthereumPrivateKeyProvider.ts","../node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/src/common.ts","../node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/src/eips/index.ts","../node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/src/enums.ts","../node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/src/hardforks/index.ts","../node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/src/index.ts","../node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/src/utils.ts","../node_modules/crc-32/crc32.js","../node_modules/jsonschema/lib/attribute.js","../node_modules/jsonschema/lib/helpers.js","../node_modules/jsonschema/lib/index.js","../node_modules/jsonschema/lib/scan.js","../node_modules/jsonschema/lib/validator.js"],"sourcesContent":["import { Chain, Common, Hardfork } from '@ethereumjs/common'\nimport {\n  Address,\n  MAX_INTEGER,\n  MAX_UINT64,\n  SECP256K1_ORDER_DIV_2,\n  bufferToBigInt,\n  bufferToHex,\n  ecsign,\n  publicToAddress,\n  toBuffer,\n  unpadBuffer,\n} from '@ethereumjs/util'\n\nimport { Capability } from './types'\nimport { checkMaxInitCodeSize } from './util'\n\nimport type {\n  AccessListEIP2930TxData,\n  AccessListEIP2930ValuesArray,\n  FeeMarketEIP1559TxData,\n  FeeMarketEIP1559ValuesArray,\n  JsonTx,\n  TxData,\n  TxOptions,\n  TxValuesArray,\n} from './types'\nimport type { BigIntLike } from '@ethereumjs/util'\n\ninterface TransactionCache {\n  hash: Buffer | undefined\n  dataFee?: {\n    value: bigint\n    hardfork: string | Hardfork\n  }\n}\n\n/**\n * This base class will likely be subject to further\n * refactoring along the introduction of additional tx types\n * on the Ethereum network.\n *\n * It is therefore not recommended to use directly.\n */\nexport abstract class BaseTransaction<TransactionObject> {\n  private readonly _type: number\n\n  public readonly nonce: bigint\n  public readonly gasLimit: bigint\n  public readonly to?: Address\n  public readonly value: bigint\n  public readonly data: Buffer\n\n  public readonly v?: bigint\n  public readonly r?: bigint\n  public readonly s?: bigint\n\n  public readonly common!: Common\n\n  protected cache: TransactionCache = {\n    hash: undefined,\n    dataFee: undefined,\n  }\n\n  protected readonly txOptions: TxOptions\n\n  /**\n   * List of tx type defining EIPs,\n   * e.g. 1559 (fee market) and 2930 (access lists)\n   * for FeeMarketEIP1559Transaction objects\n   */\n  protected activeCapabilities: number[] = []\n\n  /**\n   * The default chain the tx falls back to if no Common\n   * is provided and if the chain can't be derived from\n   * a passed in chainId (only EIP-2718 typed txs) or\n   * EIP-155 signature (legacy txs).\n   *\n   * @hidden\n   */\n  protected DEFAULT_CHAIN = Chain.Mainnet\n\n  /**\n   * The default HF if the tx type is active on that HF\n   * or the first greater HF where the tx is active.\n   *\n   * @hidden\n   */\n  protected DEFAULT_HARDFORK: string | Hardfork = Hardfork.Merge\n\n  constructor(txData: TxData | AccessListEIP2930TxData | FeeMarketEIP1559TxData, opts: TxOptions) {\n    const { nonce, gasLimit, to, value, data, v, r, s, type } = txData\n    this._type = Number(bufferToBigInt(toBuffer(type)))\n\n    this.txOptions = opts\n\n    const toB = toBuffer(to === '' ? '0x' : to)\n    const vB = toBuffer(v === '' ? '0x' : v)\n    const rB = toBuffer(r === '' ? '0x' : r)\n    const sB = toBuffer(s === '' ? '0x' : s)\n\n    this.nonce = bufferToBigInt(toBuffer(nonce === '' ? '0x' : nonce))\n    this.gasLimit = bufferToBigInt(toBuffer(gasLimit === '' ? '0x' : gasLimit))\n    this.to = toB.length > 0 ? new Address(toB) : undefined\n    this.value = bufferToBigInt(toBuffer(value === '' ? '0x' : value))\n    this.data = toBuffer(data === '' ? '0x' : data)\n\n    this.v = vB.length > 0 ? bufferToBigInt(vB) : undefined\n    this.r = rB.length > 0 ? bufferToBigInt(rB) : undefined\n    this.s = sB.length > 0 ? bufferToBigInt(sB) : undefined\n\n    this._validateCannotExceedMaxInteger({ value: this.value, r: this.r, s: this.s })\n\n    // geth limits gasLimit to 2^64-1\n    this._validateCannotExceedMaxInteger({ gasLimit: this.gasLimit }, 64)\n\n    // EIP-2681 limits nonce to 2^64-1 (cannot equal 2^64-1)\n    this._validateCannotExceedMaxInteger({ nonce: this.nonce }, 64, true)\n\n    const createContract = this.to === undefined || this.to === null\n    const allowUnlimitedInitCodeSize = opts.allowUnlimitedInitCodeSize ?? false\n    const common = opts.common ?? this._getCommon()\n    if (createContract && common.isActivatedEIP(3860) && allowUnlimitedInitCodeSize === false) {\n      checkMaxInitCodeSize(common, this.data.length)\n    }\n  }\n\n  /**\n   * Returns the transaction type.\n   *\n   * Note: legacy txs will return tx type `0`.\n   */\n  get type() {\n    return this._type\n  }\n\n  /**\n   * Checks if a tx type defining capability is active\n   * on a tx, for example the EIP-1559 fee market mechanism\n   * or the EIP-2930 access list feature.\n   *\n   * Note that this is different from the tx type itself,\n   * so EIP-2930 access lists can very well be active\n   * on an EIP-1559 tx for example.\n   *\n   * This method can be useful for feature checks if the\n   * tx type is unknown (e.g. when instantiated with\n   * the tx factory).\n   *\n   * See `Capabilites` in the `types` module for a reference\n   * on all supported capabilities.\n   */\n  supports(capability: Capability) {\n    return this.activeCapabilities.includes(capability)\n  }\n\n  /**\n   * Checks if the transaction has the minimum amount of gas required\n   * (DataFee + TxFee + Creation Fee).\n   */\n  validate(): boolean\n  validate(stringError: false): boolean\n  validate(stringError: true): string[]\n  validate(stringError: boolean = false): boolean | string[] {\n    const errors = []\n\n    if (this.getBaseFee() > this.gasLimit) {\n      errors.push(`gasLimit is too low. given ${this.gasLimit}, need at least ${this.getBaseFee()}`)\n    }\n\n    if (this.isSigned() && !this.verifySignature()) {\n      errors.push('Invalid Signature')\n    }\n\n    return stringError ? errors : errors.length === 0\n  }\n\n  protected _validateYParity() {\n    const { v } = this\n    if (v !== undefined && v !== BigInt(0) && v !== BigInt(1)) {\n      const msg = this._errorMsg('The y-parity of the transaction should either be 0 or 1')\n      throw new Error(msg)\n    }\n  }\n\n  /**\n   * EIP-2: All transaction signatures whose s-value is greater than secp256k1n/2are considered invalid.\n   * Reasoning: https://ethereum.stackexchange.com/a/55728\n   */\n  protected _validateHighS() {\n    const { s } = this\n    if (this.common.gteHardfork('homestead') && s !== undefined && s > SECP256K1_ORDER_DIV_2) {\n      const msg = this._errorMsg(\n        'Invalid Signature: s-values greater than secp256k1n/2 are considered invalid'\n      )\n      throw new Error(msg)\n    }\n  }\n\n  /**\n   * The minimum amount of gas the tx must have (DataFee + TxFee + Creation Fee)\n   */\n  getBaseFee(): bigint {\n    const txFee = this.common.param('gasPrices', 'tx')\n    let fee = this.getDataFee()\n    if (txFee) fee += txFee\n    if (this.common.gteHardfork('homestead') && this.toCreationAddress()) {\n      const txCreationFee = this.common.param('gasPrices', 'txCreation')\n      if (txCreationFee) fee += txCreationFee\n    }\n    return fee\n  }\n\n  /**\n   * The amount of gas paid for the data in this tx\n   */\n  getDataFee(): bigint {\n    const txDataZero = this.common.param('gasPrices', 'txDataZero')\n    const txDataNonZero = this.common.param('gasPrices', 'txDataNonZero')\n\n    let cost = BigInt(0)\n    for (let i = 0; i < this.data.length; i++) {\n      this.data[i] === 0 ? (cost += txDataZero) : (cost += txDataNonZero)\n    }\n\n    if ((this.to === undefined || this.to === null) && this.common.isActivatedEIP(3860)) {\n      const dataLength = BigInt(Math.ceil(this.data.length / 32))\n      const initCodeCost = this.common.param('gasPrices', 'initCodeWordCost') * dataLength\n      cost += initCodeCost\n    }\n\n    return cost\n  }\n\n  /**\n   * The up front amount that an account must have for this transaction to be valid\n   */\n  abstract getUpfrontCost(): bigint\n\n  /**\n   * If the tx's `to` is to the creation address\n   */\n  toCreationAddress(): boolean {\n    return this.to === undefined || this.to.buf.length === 0\n  }\n\n  /**\n   * Returns a Buffer Array of the raw Buffers of this transaction, in order.\n   *\n   * Use {@link BaseTransaction.serialize} to add a transaction to a block\n   * with {@link Block.fromValuesArray}.\n   *\n   * For an unsigned tx this method uses the empty Buffer values for the\n   * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n   * representation for external signing use {@link BaseTransaction.getMessageToSign}.\n   */\n  abstract raw(): TxValuesArray | AccessListEIP2930ValuesArray | FeeMarketEIP1559ValuesArray\n\n  /**\n   * Returns the encoding of the transaction.\n   */\n  abstract serialize(): Buffer\n\n  // Returns the unsigned tx (hashed or raw), which is used to sign the transaction.\n  //\n  // Note: do not use code docs here since VS Studio is then not able to detect the\n  // comments from the inherited methods\n  abstract getMessageToSign(hashMessage: false): Buffer | Buffer[]\n  abstract getMessageToSign(hashMessage?: true): Buffer\n\n  abstract hash(): Buffer\n\n  abstract getMessageToVerifySignature(): Buffer\n\n  public isSigned(): boolean {\n    const { v, r, s } = this\n    if (v === undefined || r === undefined || s === undefined) {\n      return false\n    } else {\n      return true\n    }\n  }\n\n  /**\n   * Determines if the signature is valid\n   */\n  verifySignature(): boolean {\n    try {\n      // Main signature verification is done in `getSenderPublicKey()`\n      const publicKey = this.getSenderPublicKey()\n      return unpadBuffer(publicKey).length !== 0\n    } catch (e: any) {\n      return false\n    }\n  }\n\n  /**\n   * Returns the sender's address\n   */\n  getSenderAddress(): Address {\n    return new Address(publicToAddress(this.getSenderPublicKey()))\n  }\n\n  /**\n   * Returns the public key of the sender\n   */\n  abstract getSenderPublicKey(): Buffer\n\n  /**\n   * Signs a transaction.\n   *\n   * Note that the signed tx is returned as a new object,\n   * use as follows:\n   * ```javascript\n   * const signedTx = tx.sign(privateKey)\n   * ```\n   */\n  sign(privateKey: Buffer): TransactionObject {\n    if (privateKey.length !== 32) {\n      const msg = this._errorMsg('Private key must be 32 bytes in length.')\n      throw new Error(msg)\n    }\n\n    // Hack for the constellation that we have got a legacy tx after spuriousDragon with a non-EIP155 conforming signature\n    // and want to recreate a signature (where EIP155 should be applied)\n    // Leaving this hack lets the legacy.spec.ts -> sign(), verifySignature() test fail\n    // 2021-06-23\n    let hackApplied = false\n    if (\n      this.type === 0 &&\n      this.common.gteHardfork('spuriousDragon') &&\n      !this.supports(Capability.EIP155ReplayProtection)\n    ) {\n      this.activeCapabilities.push(Capability.EIP155ReplayProtection)\n      hackApplied = true\n    }\n\n    const msgHash = this.getMessageToSign(true)\n    const { v, r, s } = ecsign(msgHash, privateKey)\n    const tx = this._processSignature(v, r, s)\n\n    // Hack part 2\n    if (hackApplied) {\n      const index = this.activeCapabilities.indexOf(Capability.EIP155ReplayProtection)\n      if (index > -1) {\n        this.activeCapabilities.splice(index, 1)\n      }\n    }\n\n    return tx\n  }\n\n  /**\n   * Returns an object with the JSON representation of the transaction\n   */\n  abstract toJSON(): JsonTx\n\n  // Accept the v,r,s values from the `sign` method, and convert this into a TransactionObject\n  protected abstract _processSignature(v: bigint, r: Buffer, s: Buffer): TransactionObject\n\n  /**\n   * Does chain ID checks on common and returns a common\n   * to be used on instantiation\n   * @hidden\n   *\n   * @param common - {@link Common} instance from tx options\n   * @param chainId - Chain ID from tx options (typed txs) or signature (legacy tx)\n   */\n  protected _getCommon(common?: Common, chainId?: BigIntLike) {\n    // Chain ID provided\n    if (chainId !== undefined) {\n      const chainIdBigInt = bufferToBigInt(toBuffer(chainId))\n      if (common) {\n        if (common.chainId() !== chainIdBigInt) {\n          const msg = this._errorMsg('The chain ID does not match the chain ID of Common')\n          throw new Error(msg)\n        }\n        // Common provided, chain ID does match\n        // -> Return provided Common\n        return common.copy()\n      } else {\n        if (Common.isSupportedChainId(chainIdBigInt)) {\n          // No Common, chain ID supported by Common\n          // -> Instantiate Common with chain ID\n          return new Common({ chain: chainIdBigInt, hardfork: this.DEFAULT_HARDFORK })\n        } else {\n          // No Common, chain ID not supported by Common\n          // -> Instantiate custom Common derived from DEFAULT_CHAIN\n          return Common.custom(\n            {\n              name: 'custom-chain',\n              networkId: chainIdBigInt,\n              chainId: chainIdBigInt,\n            },\n            { baseChain: this.DEFAULT_CHAIN, hardfork: this.DEFAULT_HARDFORK }\n          )\n        }\n      }\n    } else {\n      // No chain ID provided\n      // -> return Common provided or create new default Common\n      return (\n        common?.copy() ?? new Common({ chain: this.DEFAULT_CHAIN, hardfork: this.DEFAULT_HARDFORK })\n      )\n    }\n  }\n\n  /**\n   * Validates that an object with BigInt values cannot exceed the specified bit limit.\n   * @param values Object containing string keys and BigInt values\n   * @param bits Number of bits to check (64 or 256)\n   * @param cannotEqual Pass true if the number also cannot equal one less the maximum value\n   */\n  protected _validateCannotExceedMaxInteger(\n    values: { [key: string]: bigint | undefined },\n    bits = 256,\n    cannotEqual = false\n  ) {\n    for (const [key, value] of Object.entries(values)) {\n      switch (bits) {\n        case 64:\n          if (cannotEqual) {\n            if (value !== undefined && value >= MAX_UINT64) {\n              const msg = this._errorMsg(\n                `${key} cannot equal or exceed MAX_UINT64 (2^64-1), given ${value}`\n              )\n              throw new Error(msg)\n            }\n          } else {\n            if (value !== undefined && value > MAX_UINT64) {\n              const msg = this._errorMsg(`${key} cannot exceed MAX_UINT64 (2^64-1), given ${value}`)\n              throw new Error(msg)\n            }\n          }\n          break\n        case 256:\n          if (cannotEqual) {\n            if (value !== undefined && value >= MAX_INTEGER) {\n              const msg = this._errorMsg(\n                `${key} cannot equal or exceed MAX_INTEGER (2^256-1), given ${value}`\n              )\n              throw new Error(msg)\n            }\n          } else {\n            if (value !== undefined && value > MAX_INTEGER) {\n              const msg = this._errorMsg(\n                `${key} cannot exceed MAX_INTEGER (2^256-1), given ${value}`\n              )\n              throw new Error(msg)\n            }\n          }\n          break\n        default: {\n          const msg = this._errorMsg('unimplemented bits value')\n          throw new Error(msg)\n        }\n      }\n    }\n  }\n\n  protected static _validateNotArray(values: { [key: string]: any }) {\n    const txDataKeys = [\n      'nonce',\n      'gasPrice',\n      'gasLimit',\n      'to',\n      'value',\n      'data',\n      'v',\n      'r',\n      's',\n      'type',\n      'baseFee',\n      'maxFeePerGas',\n      'chainId',\n    ]\n    for (const [key, value] of Object.entries(values)) {\n      if (txDataKeys.includes(key)) {\n        if (Array.isArray(value)) {\n          throw new Error(`${key} cannot be an array`)\n        }\n      }\n    }\n  }\n\n  /**\n   * Return a compact error string representation of the object\n   */\n  public abstract errorStr(): string\n\n  /**\n   * Internal helper function to create an annotated error message\n   *\n   * @param msg Base error message\n   * @hidden\n   */\n  protected abstract _errorMsg(msg: string): string\n\n  /**\n   * Returns the shared error postfix part for _error() method\n   * tx type implementations.\n   */\n  protected _getSharedErrorPostfix() {\n    let hash = ''\n    try {\n      hash = this.isSigned() ? bufferToHex(this.hash()) : 'not available (unsigned)'\n    } catch (e: any) {\n      hash = 'error'\n    }\n    let isSigned = ''\n    try {\n      isSigned = this.isSigned().toString()\n    } catch (e: any) {\n      hash = 'error'\n    }\n    let hf = ''\n    try {\n      hf = this.common.hardfork()\n    } catch (e: any) {\n      hf = 'error'\n    }\n\n    let postfix = `tx type=${this.type} hash=${hash} nonce=${this.nonce} value=${this.value} `\n    postfix += `signed=${isSigned} hf=${hf}`\n\n    return postfix\n  }\n}\n","import { RLP } from '@ethereumjs/rlp'\nimport {\n  MAX_INTEGER,\n  arrToBufArr,\n  bigIntToHex,\n  bigIntToUnpaddedBuffer,\n  bufArrToArr,\n  bufferToBigInt,\n  ecrecover,\n  toBuffer,\n  validateNoLeadingZeroes,\n} from '@ethereumjs/util'\nimport { keccak256 } from 'ethereum-cryptography/keccak'\n\nimport { BaseTransaction } from './baseTransaction'\nimport { AccessLists } from './util'\n\nimport type {\n  AccessList,\n  AccessListBuffer,\n  FeeMarketEIP1559TxData,\n  FeeMarketEIP1559ValuesArray,\n  JsonTx,\n  TxOptions,\n} from './types'\nimport type { Common } from '@ethereumjs/common'\n\nconst TRANSACTION_TYPE = 2\nconst TRANSACTION_TYPE_BUFFER = Buffer.from(TRANSACTION_TYPE.toString(16).padStart(2, '0'), 'hex')\n\n/**\n * Typed transaction with a new gas fee market mechanism\n *\n * - TransactionType: 2\n * - EIP: [EIP-1559](https://eips.ethereum.org/EIPS/eip-1559)\n */\nexport class FeeMarketEIP1559Transaction extends BaseTransaction<FeeMarketEIP1559Transaction> {\n  public readonly chainId: bigint\n  public readonly accessList: AccessListBuffer\n  public readonly AccessListJSON: AccessList\n  public readonly maxPriorityFeePerGas: bigint\n  public readonly maxFeePerGas: bigint\n\n  public readonly common: Common\n\n  /**\n   * The default HF if the tx type is active on that HF\n   * or the first greater HF where the tx is active.\n   *\n   * @hidden\n   */\n  protected DEFAULT_HARDFORK = 'london'\n\n  /**\n   * Instantiate a transaction from a data dictionary.\n   *\n   * Format: { chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n   * accessList, v, r, s }\n   *\n   * Notes:\n   * - `chainId` will be set automatically if not provided\n   * - All parameters are optional and have some basic default values\n   */\n  public static fromTxData(txData: FeeMarketEIP1559TxData, opts: TxOptions = {}) {\n    return new FeeMarketEIP1559Transaction(txData, opts)\n  }\n\n  /**\n   * Instantiate a transaction from the serialized tx.\n   *\n   * Format: `0x02 || rlp([chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n   * accessList, signatureYParity, signatureR, signatureS])`\n   */\n  public static fromSerializedTx(serialized: Buffer, opts: TxOptions = {}) {\n    if (!serialized.slice(0, 1).equals(TRANSACTION_TYPE_BUFFER)) {\n      throw new Error(\n        `Invalid serialized tx input: not an EIP-1559 transaction (wrong tx type, expected: ${TRANSACTION_TYPE}, received: ${serialized\n          .slice(0, 1)\n          .toString('hex')}`\n      )\n    }\n\n    const values = arrToBufArr(RLP.decode(serialized.slice(1)))\n\n    if (!Array.isArray(values)) {\n      throw new Error('Invalid serialized tx input: must be array')\n    }\n\n    return FeeMarketEIP1559Transaction.fromValuesArray(values as any, opts)\n  }\n\n  /**\n   * Create a transaction from a values array.\n   *\n   * Format: `[chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n   * accessList, signatureYParity, signatureR, signatureS]`\n   */\n  public static fromValuesArray(values: FeeMarketEIP1559ValuesArray, opts: TxOptions = {}) {\n    if (values.length !== 9 && values.length !== 12) {\n      throw new Error(\n        'Invalid EIP-1559 transaction. Only expecting 9 values (for unsigned tx) or 12 values (for signed tx).'\n      )\n    }\n\n    const [\n      chainId,\n      nonce,\n      maxPriorityFeePerGas,\n      maxFeePerGas,\n      gasLimit,\n      to,\n      value,\n      data,\n      accessList,\n      v,\n      r,\n      s,\n    ] = values\n\n    this._validateNotArray({ chainId, v })\n    validateNoLeadingZeroes({ nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, value, v, r, s })\n\n    return new FeeMarketEIP1559Transaction(\n      {\n        chainId: bufferToBigInt(chainId),\n        nonce,\n        maxPriorityFeePerGas,\n        maxFeePerGas,\n        gasLimit,\n        to,\n        value,\n        data,\n        accessList: accessList ?? [],\n        v: v !== undefined ? bufferToBigInt(v) : undefined, // EIP2930 supports v's with value 0 (empty Buffer)\n        r,\n        s,\n      },\n      opts\n    )\n  }\n\n  /**\n   * This constructor takes the values, validates them, assigns them and freezes the object.\n   *\n   * It is not recommended to use this constructor directly. Instead use\n   * the static factory methods to assist in creating a Transaction object from\n   * varying data types.\n   */\n  public constructor(txData: FeeMarketEIP1559TxData, opts: TxOptions = {}) {\n    super({ ...txData, type: TRANSACTION_TYPE }, opts)\n    const { chainId, accessList, maxFeePerGas, maxPriorityFeePerGas } = txData\n\n    this.common = this._getCommon(opts.common, chainId)\n    this.chainId = this.common.chainId()\n\n    if (this.common.isActivatedEIP(1559) === false) {\n      throw new Error('EIP-1559 not enabled on Common')\n    }\n    this.activeCapabilities = this.activeCapabilities.concat([1559, 2718, 2930])\n\n    // Populate the access list fields\n    const accessListData = AccessLists.getAccessListData(accessList ?? [])\n    this.accessList = accessListData.accessList\n    this.AccessListJSON = accessListData.AccessListJSON\n    // Verify the access list format.\n    AccessLists.verifyAccessList(this.accessList)\n\n    this.maxFeePerGas = bufferToBigInt(toBuffer(maxFeePerGas === '' ? '0x' : maxFeePerGas))\n    this.maxPriorityFeePerGas = bufferToBigInt(\n      toBuffer(maxPriorityFeePerGas === '' ? '0x' : maxPriorityFeePerGas)\n    )\n\n    this._validateCannotExceedMaxInteger({\n      maxFeePerGas: this.maxFeePerGas,\n      maxPriorityFeePerGas: this.maxPriorityFeePerGas,\n    })\n\n    BaseTransaction._validateNotArray(txData)\n\n    if (this.gasLimit * this.maxFeePerGas > MAX_INTEGER) {\n      const msg = this._errorMsg('gasLimit * maxFeePerGas cannot exceed MAX_INTEGER (2^256-1)')\n      throw new Error(msg)\n    }\n\n    if (this.maxFeePerGas < this.maxPriorityFeePerGas) {\n      const msg = this._errorMsg(\n        'maxFeePerGas cannot be less than maxPriorityFeePerGas (The total must be the larger of the two)'\n      )\n      throw new Error(msg)\n    }\n\n    this._validateYParity()\n    this._validateHighS()\n\n    const freeze = opts?.freeze ?? true\n    if (freeze) {\n      Object.freeze(this)\n    }\n  }\n\n  /**\n   * The amount of gas paid for the data in this tx\n   */\n  getDataFee(): bigint {\n    if (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {\n      return this.cache.dataFee.value\n    }\n\n    let cost = super.getDataFee()\n    cost += BigInt(AccessLists.getDataFeeEIP2930(this.accessList, this.common))\n\n    if (Object.isFrozen(this)) {\n      this.cache.dataFee = {\n        value: cost,\n        hardfork: this.common.hardfork(),\n      }\n    }\n\n    return cost\n  }\n\n  /**\n   * The up front amount that an account must have for this transaction to be valid\n   * @param baseFee The base fee of the block (will be set to 0 if not provided)\n   */\n  getUpfrontCost(baseFee: bigint = BigInt(0)): bigint {\n    const prio = this.maxPriorityFeePerGas\n    const maxBase = this.maxFeePerGas - baseFee\n    const inclusionFeePerGas = prio < maxBase ? prio : maxBase\n    const gasPrice = inclusionFeePerGas + baseFee\n    return this.gasLimit * gasPrice + this.value\n  }\n\n  /**\n   * Returns a Buffer Array of the raw Buffers of the EIP-1559 transaction, in order.\n   *\n   * Format: `[chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n   * accessList, signatureYParity, signatureR, signatureS]`\n   *\n   * Use {@link FeeMarketEIP1559Transaction.serialize} to add a transaction to a block\n   * with {@link Block.fromValuesArray}.\n   *\n   * For an unsigned tx this method uses the empty Buffer values for the\n   * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n   * representation for external signing use {@link FeeMarketEIP1559Transaction.getMessageToSign}.\n   */\n  raw(): FeeMarketEIP1559ValuesArray {\n    return [\n      bigIntToUnpaddedBuffer(this.chainId),\n      bigIntToUnpaddedBuffer(this.nonce),\n      bigIntToUnpaddedBuffer(this.maxPriorityFeePerGas),\n      bigIntToUnpaddedBuffer(this.maxFeePerGas),\n      bigIntToUnpaddedBuffer(this.gasLimit),\n      this.to !== undefined ? this.to.buf : Buffer.from([]),\n      bigIntToUnpaddedBuffer(this.value),\n      this.data,\n      this.accessList,\n      this.v !== undefined ? bigIntToUnpaddedBuffer(this.v) : Buffer.from([]),\n      this.r !== undefined ? bigIntToUnpaddedBuffer(this.r) : Buffer.from([]),\n      this.s !== undefined ? bigIntToUnpaddedBuffer(this.s) : Buffer.from([]),\n    ]\n  }\n\n  /**\n   * Returns the serialized encoding of the EIP-1559 transaction.\n   *\n   * Format: `0x02 || rlp([chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n   * accessList, signatureYParity, signatureR, signatureS])`\n   *\n   * Note that in contrast to the legacy tx serialization format this is not\n   * valid RLP any more due to the raw tx type preceding and concatenated to\n   * the RLP encoding of the values.\n   */\n  serialize(): Buffer {\n    const base = this.raw()\n    return Buffer.concat([\n      TRANSACTION_TYPE_BUFFER,\n      Buffer.from(RLP.encode(bufArrToArr(base as Buffer[]))),\n    ])\n  }\n\n  /**\n   * Returns the serialized unsigned tx (hashed or raw), which can be used\n   * to sign the transaction (e.g. for sending to a hardware wallet).\n   *\n   * Note: in contrast to the legacy tx the raw message format is already\n   * serialized and doesn't need to be RLP encoded any more.\n   *\n   * ```javascript\n   * const serializedMessage = tx.getMessageToSign(false) // use this for the HW wallet input\n   * ```\n   *\n   * @param hashMessage - Return hashed message if set to true (default: true)\n   */\n  getMessageToSign(hashMessage = true): Buffer {\n    const base = this.raw().slice(0, 9)\n    const message = Buffer.concat([\n      TRANSACTION_TYPE_BUFFER,\n      Buffer.from(RLP.encode(bufArrToArr(base as Buffer[]))),\n    ])\n    if (hashMessage) {\n      return Buffer.from(keccak256(message))\n    } else {\n      return message\n    }\n  }\n\n  /**\n   * Computes a sha3-256 hash of the serialized tx.\n   *\n   * This method can only be used for signed txs (it throws otherwise).\n   * Use {@link FeeMarketEIP1559Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n   */\n  public hash(): Buffer {\n    if (!this.isSigned()) {\n      const msg = this._errorMsg('Cannot call hash method if transaction is not signed')\n      throw new Error(msg)\n    }\n\n    if (Object.isFrozen(this)) {\n      if (!this.cache.hash) {\n        this.cache.hash = Buffer.from(keccak256(this.serialize()))\n      }\n      return this.cache.hash\n    }\n\n    return Buffer.from(keccak256(this.serialize()))\n  }\n\n  /**\n   * Computes a sha3-256 hash which can be used to verify the signature\n   */\n  public getMessageToVerifySignature(): Buffer {\n    return this.getMessageToSign()\n  }\n\n  /**\n   * Returns the public key of the sender\n   */\n  public getSenderPublicKey(): Buffer {\n    if (!this.isSigned()) {\n      const msg = this._errorMsg('Cannot call this method if transaction is not signed')\n      throw new Error(msg)\n    }\n\n    const msgHash = this.getMessageToVerifySignature()\n    const { v, r, s } = this\n\n    this._validateHighS()\n\n    try {\n      return ecrecover(\n        msgHash,\n        v! + BigInt(27), // Recover the 27 which was stripped from ecsign\n        bigIntToUnpaddedBuffer(r!),\n        bigIntToUnpaddedBuffer(s!)\n      )\n    } catch (e: any) {\n      const msg = this._errorMsg('Invalid Signature')\n      throw new Error(msg)\n    }\n  }\n\n  _processSignature(v: bigint, r: Buffer, s: Buffer) {\n    const opts = { ...this.txOptions, common: this.common }\n\n    return FeeMarketEIP1559Transaction.fromTxData(\n      {\n        chainId: this.chainId,\n        nonce: this.nonce,\n        maxPriorityFeePerGas: this.maxPriorityFeePerGas,\n        maxFeePerGas: this.maxFeePerGas,\n        gasLimit: this.gasLimit,\n        to: this.to,\n        value: this.value,\n        data: this.data,\n        accessList: this.accessList,\n        v: v - BigInt(27), // This looks extremely hacky: @ethereumjs/util actually adds 27 to the value, the recovery bit is either 0 or 1.\n        r: bufferToBigInt(r),\n        s: bufferToBigInt(s),\n      },\n      opts\n    )\n  }\n\n  /**\n   * Returns an object with the JSON representation of the transaction\n   */\n  toJSON(): JsonTx {\n    const accessListJSON = AccessLists.getAccessListJSON(this.accessList)\n\n    return {\n      chainId: bigIntToHex(this.chainId),\n      nonce: bigIntToHex(this.nonce),\n      maxPriorityFeePerGas: bigIntToHex(this.maxPriorityFeePerGas),\n      maxFeePerGas: bigIntToHex(this.maxFeePerGas),\n      gasLimit: bigIntToHex(this.gasLimit),\n      to: this.to !== undefined ? this.to.toString() : undefined,\n      value: bigIntToHex(this.value),\n      data: '0x' + this.data.toString('hex'),\n      accessList: accessListJSON,\n      v: this.v !== undefined ? bigIntToHex(this.v) : undefined,\n      r: this.r !== undefined ? bigIntToHex(this.r) : undefined,\n      s: this.s !== undefined ? bigIntToHex(this.s) : undefined,\n    }\n  }\n\n  /**\n   * Return a compact error string representation of the object\n   */\n  public errorStr() {\n    let errorStr = this._getSharedErrorPostfix()\n    errorStr += ` maxFeePerGas=${this.maxFeePerGas} maxPriorityFeePerGas=${this.maxPriorityFeePerGas}`\n    return errorStr\n  }\n\n  /**\n   * Internal helper function to create an annotated error message\n   *\n   * @param msg Base error message\n   * @hidden\n   */\n  protected _errorMsg(msg: string) {\n    return `${msg} (${this.errorStr()})`\n  }\n}\n","import { RLP } from '@ethereumjs/rlp'\nimport {\n  MAX_INTEGER,\n  arrToBufArr,\n  bigIntToHex,\n  bigIntToUnpaddedBuffer,\n  bufArrToArr,\n  bufferToBigInt,\n  ecrecover,\n  toBuffer,\n  validateNoLeadingZeroes,\n} from '@ethereumjs/util'\nimport { keccak256 } from 'ethereum-cryptography/keccak'\n\nimport { BaseTransaction } from './baseTransaction'\nimport { AccessLists } from './util'\n\nimport type {\n  AccessList,\n  AccessListBuffer,\n  AccessListEIP2930TxData,\n  AccessListEIP2930ValuesArray,\n  JsonTx,\n  TxOptions,\n} from './types'\nimport type { Common } from '@ethereumjs/common'\n\nconst TRANSACTION_TYPE = 1\nconst TRANSACTION_TYPE_BUFFER = Buffer.from(TRANSACTION_TYPE.toString(16).padStart(2, '0'), 'hex')\n\n/**\n * Typed transaction with optional access lists\n *\n * - TransactionType: 1\n * - EIP: [EIP-2930](https://eips.ethereum.org/EIPS/eip-2930)\n */\nexport class AccessListEIP2930Transaction extends BaseTransaction<AccessListEIP2930Transaction> {\n  public readonly chainId: bigint\n  public readonly accessList: AccessListBuffer\n  public readonly AccessListJSON: AccessList\n  public readonly gasPrice: bigint\n\n  public readonly common: Common\n\n  /**\n   * The default HF if the tx type is active on that HF\n   * or the first greater HF where the tx is active.\n   *\n   * @hidden\n   */\n  protected DEFAULT_HARDFORK = 'berlin'\n\n  /**\n   * Instantiate a transaction from a data dictionary.\n   *\n   * Format: { chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n   * v, r, s }\n   *\n   * Notes:\n   * - `chainId` will be set automatically if not provided\n   * - All parameters are optional and have some basic default values\n   */\n  public static fromTxData(txData: AccessListEIP2930TxData, opts: TxOptions = {}) {\n    return new AccessListEIP2930Transaction(txData, opts)\n  }\n\n  /**\n   * Instantiate a transaction from the serialized tx.\n   *\n   * Format: `0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n   * signatureYParity (v), signatureR (r), signatureS (s)])`\n   */\n  public static fromSerializedTx(serialized: Buffer, opts: TxOptions = {}) {\n    if (!serialized.slice(0, 1).equals(TRANSACTION_TYPE_BUFFER)) {\n      throw new Error(\n        `Invalid serialized tx input: not an EIP-2930 transaction (wrong tx type, expected: ${TRANSACTION_TYPE}, received: ${serialized\n          .slice(0, 1)\n          .toString('hex')}`\n      )\n    }\n\n    const values = arrToBufArr(RLP.decode(Uint8Array.from(serialized.slice(1))))\n\n    if (!Array.isArray(values)) {\n      throw new Error('Invalid serialized tx input: must be array')\n    }\n\n    return AccessListEIP2930Transaction.fromValuesArray(values as any, opts)\n  }\n\n  /**\n   * Create a transaction from a values array.\n   *\n   * Format: `[chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n   * signatureYParity (v), signatureR (r), signatureS (s)]`\n   */\n  public static fromValuesArray(values: AccessListEIP2930ValuesArray, opts: TxOptions = {}) {\n    if (values.length !== 8 && values.length !== 11) {\n      throw new Error(\n        'Invalid EIP-2930 transaction. Only expecting 8 values (for unsigned tx) or 11 values (for signed tx).'\n      )\n    }\n\n    const [chainId, nonce, gasPrice, gasLimit, to, value, data, accessList, v, r, s] = values\n\n    this._validateNotArray({ chainId, v })\n    validateNoLeadingZeroes({ nonce, gasPrice, gasLimit, value, v, r, s })\n\n    const emptyAccessList: AccessList = []\n\n    return new AccessListEIP2930Transaction(\n      {\n        chainId: bufferToBigInt(chainId),\n        nonce,\n        gasPrice,\n        gasLimit,\n        to,\n        value,\n        data,\n        accessList: accessList ?? emptyAccessList,\n        v: v !== undefined ? bufferToBigInt(v) : undefined, // EIP2930 supports v's with value 0 (empty Buffer)\n        r,\n        s,\n      },\n      opts\n    )\n  }\n\n  /**\n   * This constructor takes the values, validates them, assigns them and freezes the object.\n   *\n   * It is not recommended to use this constructor directly. Instead use\n   * the static factory methods to assist in creating a Transaction object from\n   * varying data types.\n   */\n  public constructor(txData: AccessListEIP2930TxData, opts: TxOptions = {}) {\n    super({ ...txData, type: TRANSACTION_TYPE }, opts)\n    const { chainId, accessList, gasPrice } = txData\n\n    this.common = this._getCommon(opts.common, chainId)\n    this.chainId = this.common.chainId()\n\n    // EIP-2718 check is done in Common\n    if (!this.common.isActivatedEIP(2930)) {\n      throw new Error('EIP-2930 not enabled on Common')\n    }\n    this.activeCapabilities = this.activeCapabilities.concat([2718, 2930])\n\n    // Populate the access list fields\n    const accessListData = AccessLists.getAccessListData(accessList ?? [])\n    this.accessList = accessListData.accessList\n    this.AccessListJSON = accessListData.AccessListJSON\n    // Verify the access list format.\n    AccessLists.verifyAccessList(this.accessList)\n\n    this.gasPrice = bufferToBigInt(toBuffer(gasPrice === '' ? '0x' : gasPrice))\n\n    this._validateCannotExceedMaxInteger({\n      gasPrice: this.gasPrice,\n    })\n\n    BaseTransaction._validateNotArray(txData)\n\n    if (this.gasPrice * this.gasLimit > MAX_INTEGER) {\n      const msg = this._errorMsg('gasLimit * gasPrice cannot exceed MAX_INTEGER')\n      throw new Error(msg)\n    }\n\n    this._validateYParity()\n    this._validateHighS()\n\n    const freeze = opts?.freeze ?? true\n    if (freeze) {\n      Object.freeze(this)\n    }\n  }\n\n  /**\n   * The amount of gas paid for the data in this tx\n   */\n  getDataFee(): bigint {\n    if (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {\n      return this.cache.dataFee.value\n    }\n\n    let cost = super.getDataFee()\n    cost += BigInt(AccessLists.getDataFeeEIP2930(this.accessList, this.common))\n\n    if (Object.isFrozen(this)) {\n      this.cache.dataFee = {\n        value: cost,\n        hardfork: this.common.hardfork(),\n      }\n    }\n\n    return cost\n  }\n\n  /**\n   * The up front amount that an account must have for this transaction to be valid\n   */\n  getUpfrontCost(): bigint {\n    return this.gasLimit * this.gasPrice + this.value\n  }\n\n  /**\n   * Returns a Buffer Array of the raw Buffers of the EIP-2930 transaction, in order.\n   *\n   * Format: `[chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n   * signatureYParity (v), signatureR (r), signatureS (s)]`\n   *\n   * Use {@link AccessListEIP2930Transaction.serialize} to add a transaction to a block\n   * with {@link Block.fromValuesArray}.\n   *\n   * For an unsigned tx this method uses the empty Buffer values for the\n   * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n   * representation for external signing use {@link AccessListEIP2930Transaction.getMessageToSign}.\n   */\n  raw(): AccessListEIP2930ValuesArray {\n    return [\n      bigIntToUnpaddedBuffer(this.chainId),\n      bigIntToUnpaddedBuffer(this.nonce),\n      bigIntToUnpaddedBuffer(this.gasPrice),\n      bigIntToUnpaddedBuffer(this.gasLimit),\n      this.to !== undefined ? this.to.buf : Buffer.from([]),\n      bigIntToUnpaddedBuffer(this.value),\n      this.data,\n      this.accessList,\n      this.v !== undefined ? bigIntToUnpaddedBuffer(this.v) : Buffer.from([]),\n      this.r !== undefined ? bigIntToUnpaddedBuffer(this.r) : Buffer.from([]),\n      this.s !== undefined ? bigIntToUnpaddedBuffer(this.s) : Buffer.from([]),\n    ]\n  }\n\n  /**\n   * Returns the serialized encoding of the EIP-2930 transaction.\n   *\n   * Format: `0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n   * signatureYParity (v), signatureR (r), signatureS (s)])`\n   *\n   * Note that in contrast to the legacy tx serialization format this is not\n   * valid RLP any more due to the raw tx type preceding and concatenated to\n   * the RLP encoding of the values.\n   */\n  serialize(): Buffer {\n    const base = this.raw()\n    return Buffer.concat([\n      TRANSACTION_TYPE_BUFFER,\n      Buffer.from(RLP.encode(bufArrToArr(base as Buffer[]))),\n    ])\n  }\n\n  /**\n   * Returns the serialized unsigned tx (hashed or raw), which can be used\n   * to sign the transaction (e.g. for sending to a hardware wallet).\n   *\n   * Note: in contrast to the legacy tx the raw message format is already\n   * serialized and doesn't need to be RLP encoded any more.\n   *\n   * ```javascript\n   * const serializedMessage = tx.getMessageToSign(false) // use this for the HW wallet input\n   * ```\n   *\n   * @param hashMessage - Return hashed message if set to true (default: true)\n   */\n  getMessageToSign(hashMessage = true): Buffer {\n    const base = this.raw().slice(0, 8)\n    const message = Buffer.concat([\n      TRANSACTION_TYPE_BUFFER,\n      Buffer.from(RLP.encode(bufArrToArr(base as Buffer[]))),\n    ])\n    if (hashMessage) {\n      return Buffer.from(keccak256(message))\n    } else {\n      return message\n    }\n  }\n\n  /**\n   * Computes a sha3-256 hash of the serialized tx.\n   *\n   * This method can only be used for signed txs (it throws otherwise).\n   * Use {@link AccessListEIP2930Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n   */\n  public hash(): Buffer {\n    if (!this.isSigned()) {\n      const msg = this._errorMsg('Cannot call hash method if transaction is not signed')\n      throw new Error(msg)\n    }\n\n    if (Object.isFrozen(this)) {\n      if (!this.cache.hash) {\n        this.cache.hash = Buffer.from(keccak256(this.serialize()))\n      }\n      return this.cache.hash\n    }\n\n    return Buffer.from(keccak256(this.serialize()))\n  }\n\n  /**\n   * Computes a sha3-256 hash which can be used to verify the signature\n   */\n  public getMessageToVerifySignature(): Buffer {\n    return this.getMessageToSign()\n  }\n\n  /**\n   * Returns the public key of the sender\n   */\n  public getSenderPublicKey(): Buffer {\n    if (!this.isSigned()) {\n      const msg = this._errorMsg('Cannot call this method if transaction is not signed')\n      throw new Error(msg)\n    }\n\n    const msgHash = this.getMessageToVerifySignature()\n    const { v, r, s } = this\n\n    this._validateHighS()\n\n    try {\n      return ecrecover(\n        msgHash,\n        v! + BigInt(27), // Recover the 27 which was stripped from ecsign\n        bigIntToUnpaddedBuffer(r!),\n        bigIntToUnpaddedBuffer(s!)\n      )\n    } catch (e: any) {\n      const msg = this._errorMsg('Invalid Signature')\n      throw new Error(msg)\n    }\n  }\n\n  _processSignature(v: bigint, r: Buffer, s: Buffer) {\n    const opts = { ...this.txOptions, common: this.common }\n\n    return AccessListEIP2930Transaction.fromTxData(\n      {\n        chainId: this.chainId,\n        nonce: this.nonce,\n        gasPrice: this.gasPrice,\n        gasLimit: this.gasLimit,\n        to: this.to,\n        value: this.value,\n        data: this.data,\n        accessList: this.accessList,\n        v: v - BigInt(27), // This looks extremely hacky: @ethereumjs/util actually adds 27 to the value, the recovery bit is either 0 or 1.\n        r: bufferToBigInt(r),\n        s: bufferToBigInt(s),\n      },\n      opts\n    )\n  }\n\n  /**\n   * Returns an object with the JSON representation of the transaction\n   */\n  toJSON(): JsonTx {\n    const accessListJSON = AccessLists.getAccessListJSON(this.accessList)\n\n    return {\n      chainId: bigIntToHex(this.chainId),\n      nonce: bigIntToHex(this.nonce),\n      gasPrice: bigIntToHex(this.gasPrice),\n      gasLimit: bigIntToHex(this.gasLimit),\n      to: this.to !== undefined ? this.to.toString() : undefined,\n      value: bigIntToHex(this.value),\n      data: '0x' + this.data.toString('hex'),\n      accessList: accessListJSON,\n      v: this.v !== undefined ? bigIntToHex(this.v) : undefined,\n      r: this.r !== undefined ? bigIntToHex(this.r) : undefined,\n      s: this.s !== undefined ? bigIntToHex(this.s) : undefined,\n    }\n  }\n\n  /**\n   * Return a compact error string representation of the object\n   */\n  public errorStr() {\n    let errorStr = this._getSharedErrorPostfix()\n    // Keep ? for this.accessList since this otherwise causes Hardhat E2E tests to fail\n    errorStr += ` gasPrice=${this.gasPrice} accessListCount=${this.accessList?.length ?? 0}`\n    return errorStr\n  }\n\n  /**\n   * Internal helper function to create an annotated error message\n   *\n   * @param msg Base error message\n   * @hidden\n   */\n  protected _errorMsg(msg: string) {\n    return `${msg} (${this.errorStr()})`\n  }\n}\n","import { TypeOutput, setLengthLeft, toBuffer, toType } from '@ethereumjs/util'\n\nimport type { TxData } from './types'\n\nexport const normalizeTxParams = (_txParams: any): TxData => {\n  const txParams = Object.assign({}, _txParams)\n\n  txParams.gasLimit = toType(txParams.gasLimit ?? txParams.gas, TypeOutput.BigInt)\n  txParams.data = txParams.data === undefined ? txParams.input : txParams.data\n\n  // check and convert gasPrice and value params\n  txParams.gasPrice = txParams.gasPrice !== undefined ? BigInt(txParams.gasPrice) : undefined\n  txParams.value = txParams.value !== undefined ? BigInt(txParams.value) : undefined\n\n  // strict byte length checking\n  txParams.to =\n    txParams.to !== null && txParams.to !== undefined\n      ? setLengthLeft(toBuffer(txParams.to), 20)\n      : null\n\n  // Normalize the v/r/s values. If RPC returns '0x0', ensure v/r/s are set to `undefined` in the tx.\n  // If this is not done, then the transaction creation will throw, because `v` is `0`.\n  // Note: this still means that `isSigned` will return `false`.\n  // v/r/s values are `0x0` on networks like Optimism, where the tx is a system tx.\n  // For instance: https://optimistic.etherscan.io/tx/0xf4304cb09b3f58a8e5d20fec5f393c96ccffe0269aaf632cb2be7a8a0f0c91cc\n\n  txParams.v = txParams.v === '0x0' ? '0x' : txParams.v\n  txParams.r = txParams.r === '0x0' ? '0x' : txParams.r\n  txParams.s = txParams.s === '0x0' ? '0x' : txParams.s\n\n  if (txParams.v !== '0x') {\n    txParams.v = toType(txParams.v, TypeOutput.BigInt)\n  }\n\n  return txParams\n}\n","export { FeeMarketEIP1559Transaction } from './eip1559Transaction'\nexport { AccessListEIP2930Transaction } from './eip2930Transaction'\nexport { Transaction } from './legacyTransaction'\nexport { TransactionFactory } from './transactionFactory'\nexport * from './types'\n","import { RLP } from '@ethereumjs/rlp'\nimport {\n  MAX_INTEGER,\n  arrToBufArr,\n  bigIntToHex,\n  bigIntToUnpaddedBuffer,\n  bufArrToArr,\n  bufferToBigInt,\n  ecrecover,\n  toBuffer,\n  unpadBuffer,\n  validateNoLeadingZeroes,\n} from '@ethereumjs/util'\nimport { keccak256 } from 'ethereum-cryptography/keccak'\n\nimport { BaseTransaction } from './baseTransaction'\nimport { Capability } from './types'\n\nimport type { JsonTx, TxData, TxOptions, TxValuesArray } from './types'\nimport type { Common } from '@ethereumjs/common'\n\nconst TRANSACTION_TYPE = 0\n\nfunction meetsEIP155(_v: bigint, chainId: bigint) {\n  const v = Number(_v)\n  const chainIdDoubled = Number(chainId) * 2\n  return v === chainIdDoubled + 35 || v === chainIdDoubled + 36\n}\n\n/**\n * An Ethereum non-typed (legacy) transaction\n */\nexport class Transaction extends BaseTransaction<Transaction> {\n  public readonly gasPrice: bigint\n\n  public readonly common: Common\n\n  /**\n   * Instantiate a transaction from a data dictionary.\n   *\n   * Format: { nonce, gasPrice, gasLimit, to, value, data, v, r, s }\n   *\n   * Notes:\n   * - All parameters are optional and have some basic default values\n   */\n  public static fromTxData(txData: TxData, opts: TxOptions = {}) {\n    return new Transaction(txData, opts)\n  }\n\n  /**\n   * Instantiate a transaction from the serialized tx.\n   *\n   * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`\n   */\n  public static fromSerializedTx(serialized: Buffer, opts: TxOptions = {}) {\n    const values = arrToBufArr(RLP.decode(Uint8Array.from(serialized))) as Buffer[]\n\n    if (!Array.isArray(values)) {\n      throw new Error('Invalid serialized tx input. Must be array')\n    }\n\n    return this.fromValuesArray(values, opts)\n  }\n\n  /**\n   * Create a transaction from a values array.\n   *\n   * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`\n   */\n  public static fromValuesArray(values: TxValuesArray, opts: TxOptions = {}) {\n    // If length is not 6, it has length 9. If v/r/s are empty Buffers, it is still an unsigned transaction\n    // This happens if you get the RLP data from `raw()`\n    if (values.length !== 6 && values.length !== 9) {\n      throw new Error(\n        'Invalid transaction. Only expecting 6 values (for unsigned tx) or 9 values (for signed tx).'\n      )\n    }\n\n    const [nonce, gasPrice, gasLimit, to, value, data, v, r, s] = values\n\n    validateNoLeadingZeroes({ nonce, gasPrice, gasLimit, value, v, r, s })\n\n    return new Transaction(\n      {\n        nonce,\n        gasPrice,\n        gasLimit,\n        to,\n        value,\n        data,\n        v,\n        r,\n        s,\n      },\n      opts\n    )\n  }\n\n  /**\n   * This constructor takes the values, validates them, assigns them and freezes the object.\n   *\n   * It is not recommended to use this constructor directly. Instead use\n   * the static factory methods to assist in creating a Transaction object from\n   * varying data types.\n   */\n  public constructor(txData: TxData, opts: TxOptions = {}) {\n    super({ ...txData, type: TRANSACTION_TYPE }, opts)\n\n    this.common = this._validateTxV(this.v, opts.common)\n\n    this.gasPrice = bufferToBigInt(toBuffer(txData.gasPrice === '' ? '0x' : txData.gasPrice))\n\n    if (this.gasPrice * this.gasLimit > MAX_INTEGER) {\n      const msg = this._errorMsg('gas limit * gasPrice cannot exceed MAX_INTEGER (2^256-1)')\n      throw new Error(msg)\n    }\n    this._validateCannotExceedMaxInteger({ gasPrice: this.gasPrice })\n    BaseTransaction._validateNotArray(txData)\n\n    if (this.common.gteHardfork('spuriousDragon')) {\n      if (!this.isSigned()) {\n        this.activeCapabilities.push(Capability.EIP155ReplayProtection)\n      } else {\n        // EIP155 spec:\n        // If block.number >= 2,675,000 and v = CHAIN_ID * 2 + 35 or v = CHAIN_ID * 2 + 36\n        // then when computing the hash of a transaction for purposes of signing or recovering\n        // instead of hashing only the first six elements (i.e. nonce, gasprice, startgas, to, value, data)\n        // hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0.\n        // v and chain ID meet EIP-155 conditions\n        if (meetsEIP155(this.v!, this.common.chainId())) {\n          this.activeCapabilities.push(Capability.EIP155ReplayProtection)\n        }\n      }\n    }\n\n    const freeze = opts?.freeze ?? true\n    if (freeze) {\n      Object.freeze(this)\n    }\n  }\n\n  /**\n   * Returns a Buffer Array of the raw Buffers of the legacy transaction, in order.\n   *\n   * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`\n   *\n   * For legacy txs this is also the correct format to add transactions\n   * to a block with {@link Block.fromValuesArray} (use the `serialize()` method\n   * for typed txs).\n   *\n   * For an unsigned tx this method returns the empty Buffer values\n   * for the signature parameters `v`, `r` and `s`. For an EIP-155 compliant\n   * representation have a look at {@link Transaction.getMessageToSign}.\n   */\n  raw(): TxValuesArray {\n    return [\n      bigIntToUnpaddedBuffer(this.nonce),\n      bigIntToUnpaddedBuffer(this.gasPrice),\n      bigIntToUnpaddedBuffer(this.gasLimit),\n      this.to !== undefined ? this.to.buf : Buffer.from([]),\n      bigIntToUnpaddedBuffer(this.value),\n      this.data,\n      this.v !== undefined ? bigIntToUnpaddedBuffer(this.v) : Buffer.from([]),\n      this.r !== undefined ? bigIntToUnpaddedBuffer(this.r) : Buffer.from([]),\n      this.s !== undefined ? bigIntToUnpaddedBuffer(this.s) : Buffer.from([]),\n    ]\n  }\n\n  /**\n   * Returns the serialized encoding of the legacy transaction.\n   *\n   * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`\n   *\n   * For an unsigned tx this method uses the empty Buffer values for the\n   * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n   * representation for external signing use {@link Transaction.getMessageToSign}.\n   */\n  serialize(): Buffer {\n    return Buffer.from(RLP.encode(bufArrToArr(this.raw())))\n  }\n\n  private _getMessageToSign() {\n    const values = [\n      bigIntToUnpaddedBuffer(this.nonce),\n      bigIntToUnpaddedBuffer(this.gasPrice),\n      bigIntToUnpaddedBuffer(this.gasLimit),\n      this.to !== undefined ? this.to.buf : Buffer.from([]),\n      bigIntToUnpaddedBuffer(this.value),\n      this.data,\n    ]\n\n    if (this.supports(Capability.EIP155ReplayProtection)) {\n      values.push(bigIntToUnpaddedBuffer(this.common.chainId()))\n      values.push(unpadBuffer(toBuffer(0)))\n      values.push(unpadBuffer(toBuffer(0)))\n    }\n\n    return values\n  }\n\n  /**\n   * Returns the unsigned tx (hashed or raw), which can be used\n   * to sign the transaction (e.g. for sending to a hardware wallet).\n   *\n   * Note: the raw message message format for the legacy tx is not RLP encoded\n   * and you might need to do yourself with:\n   *\n   * ```javascript\n   * import { bufArrToArr } from '@ethereumjs/util'\n   * import { RLP } from '@ethereumjs/rlp'\n   * const message = tx.getMessageToSign(false)\n   * const serializedMessage = Buffer.from(RLP.encode(bufArrToArr(message))) // use this for the HW wallet input\n   * ```\n   *\n   * @param hashMessage - Return hashed message if set to true (default: true)\n   */\n  getMessageToSign(hashMessage: false): Buffer[]\n  getMessageToSign(hashMessage?: true): Buffer\n  getMessageToSign(hashMessage = true) {\n    const message = this._getMessageToSign()\n    if (hashMessage) {\n      return Buffer.from(keccak256(RLP.encode(bufArrToArr(message))))\n    } else {\n      return message\n    }\n  }\n\n  /**\n   * The amount of gas paid for the data in this tx\n   */\n  getDataFee(): bigint {\n    if (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {\n      return this.cache.dataFee.value\n    }\n\n    if (Object.isFrozen(this)) {\n      this.cache.dataFee = {\n        value: super.getDataFee(),\n        hardfork: this.common.hardfork(),\n      }\n    }\n\n    return super.getDataFee()\n  }\n\n  /**\n   * The up front amount that an account must have for this transaction to be valid\n   */\n  getUpfrontCost(): bigint {\n    return this.gasLimit * this.gasPrice + this.value\n  }\n\n  /**\n   * Computes a sha3-256 hash of the serialized tx.\n   *\n   * This method can only be used for signed txs (it throws otherwise).\n   * Use {@link Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n   */\n  hash(): Buffer {\n    if (!this.isSigned()) {\n      const msg = this._errorMsg('Cannot call hash method if transaction is not signed')\n      throw new Error(msg)\n    }\n\n    if (Object.isFrozen(this)) {\n      if (!this.cache.hash) {\n        this.cache.hash = Buffer.from(keccak256(RLP.encode(bufArrToArr(this.raw()))))\n      }\n      return this.cache.hash\n    }\n\n    return Buffer.from(keccak256(RLP.encode(bufArrToArr(this.raw()))))\n  }\n\n  /**\n   * Computes a sha3-256 hash which can be used to verify the signature\n   */\n  getMessageToVerifySignature() {\n    if (!this.isSigned()) {\n      const msg = this._errorMsg('This transaction is not signed')\n      throw new Error(msg)\n    }\n    const message = this._getMessageToSign()\n    return Buffer.from(keccak256(RLP.encode(bufArrToArr(message))))\n  }\n\n  /**\n   * Returns the public key of the sender\n   */\n  getSenderPublicKey(): Buffer {\n    const msgHash = this.getMessageToVerifySignature()\n\n    const { v, r, s } = this\n\n    this._validateHighS()\n\n    try {\n      return ecrecover(\n        msgHash,\n        v!,\n        bigIntToUnpaddedBuffer(r!),\n        bigIntToUnpaddedBuffer(s!),\n        this.supports(Capability.EIP155ReplayProtection) ? this.common.chainId() : undefined\n      )\n    } catch (e: any) {\n      const msg = this._errorMsg('Invalid Signature')\n      throw new Error(msg)\n    }\n  }\n\n  /**\n   * Process the v, r, s values from the `sign` method of the base transaction.\n   */\n  protected _processSignature(v: bigint, r: Buffer, s: Buffer) {\n    if (this.supports(Capability.EIP155ReplayProtection)) {\n      v += this.common.chainId() * BigInt(2) + BigInt(8)\n    }\n\n    const opts = { ...this.txOptions, common: this.common }\n\n    return Transaction.fromTxData(\n      {\n        nonce: this.nonce,\n        gasPrice: this.gasPrice,\n        gasLimit: this.gasLimit,\n        to: this.to,\n        value: this.value,\n        data: this.data,\n        v,\n        r: bufferToBigInt(r),\n        s: bufferToBigInt(s),\n      },\n      opts\n    )\n  }\n\n  /**\n   * Returns an object with the JSON representation of the transaction.\n   */\n  toJSON(): JsonTx {\n    return {\n      nonce: bigIntToHex(this.nonce),\n      gasPrice: bigIntToHex(this.gasPrice),\n      gasLimit: bigIntToHex(this.gasLimit),\n      to: this.to !== undefined ? this.to.toString() : undefined,\n      value: bigIntToHex(this.value),\n      data: '0x' + this.data.toString('hex'),\n      v: this.v !== undefined ? bigIntToHex(this.v) : undefined,\n      r: this.r !== undefined ? bigIntToHex(this.r) : undefined,\n      s: this.s !== undefined ? bigIntToHex(this.s) : undefined,\n    }\n  }\n\n  /**\n   * Validates tx's `v` value\n   */\n  private _validateTxV(_v?: bigint, common?: Common): Common {\n    let chainIdBigInt\n    const v = _v !== undefined ? Number(_v) : undefined\n    // Check for valid v values in the scope of a signed legacy tx\n    if (v !== undefined) {\n      // v is 1. not matching the EIP-155 chainId included case and...\n      // v is 2. not matching the classic v=27 or v=28 case\n      if (v < 37 && v !== 27 && v !== 28) {\n        throw new Error(\n          `Legacy txs need either v = 27/28 or v >= 37 (EIP-155 replay protection), got v = ${v}`\n        )\n      }\n    }\n\n    // No unsigned tx and EIP-155 activated and chain ID included\n    if (\n      v !== undefined &&\n      v !== 0 &&\n      (!common || common.gteHardfork('spuriousDragon')) &&\n      v !== 27 &&\n      v !== 28\n    ) {\n      if (common) {\n        if (!meetsEIP155(BigInt(v), common.chainId())) {\n          throw new Error(\n            `Incompatible EIP155-based V ${v} and chain id ${common.chainId()}. See the Common parameter of the Transaction constructor to set the chain id.`\n          )\n        }\n      } else {\n        // Derive the original chain ID\n        let numSub\n        if ((v - 35) % 2 === 0) {\n          numSub = 35\n        } else {\n          numSub = 36\n        }\n        // Use derived chain ID to create a proper Common\n        chainIdBigInt = BigInt(v - numSub) / BigInt(2)\n      }\n    }\n    return this._getCommon(common, chainIdBigInt)\n  }\n\n  /**\n   * Return a compact error string representation of the object\n   */\n  public errorStr() {\n    let errorStr = this._getSharedErrorPostfix()\n    errorStr += ` gasPrice=${this.gasPrice}`\n    return errorStr\n  }\n\n  /**\n   * Internal helper function to create an annotated error message\n   *\n   * @param msg Base error message\n   * @hidden\n   */\n  protected _errorMsg(msg: string) {\n    return `${msg} (${this.errorStr()})`\n  }\n}\n","import { bufferToBigInt, fetchFromProvider, getProvider, toBuffer } from '@ethereumjs/util'\n\nimport { FeeMarketEIP1559Transaction } from './eip1559Transaction'\nimport { AccessListEIP2930Transaction } from './eip2930Transaction'\nimport { normalizeTxParams } from './fromRpc'\nimport { Transaction } from './legacyTransaction'\n\nimport type {\n  AccessListEIP2930TxData,\n  FeeMarketEIP1559TxData,\n  TxData,\n  TxOptions,\n  TypedTransaction,\n} from './types'\n\nexport class TransactionFactory {\n  // It is not possible to instantiate a TransactionFactory object.\n  private constructor() {}\n\n  /**\n   * Create a transaction from a `txData` object\n   *\n   * @param txData - The transaction data. The `type` field will determine which transaction type is returned (if undefined, creates a legacy transaction)\n   * @param txOptions - Options to pass on to the constructor of the transaction\n   */\n  public static fromTxData(\n    txData: TxData | AccessListEIP2930TxData | FeeMarketEIP1559TxData,\n    txOptions: TxOptions = {}\n  ): TypedTransaction {\n    if (!('type' in txData) || txData.type === undefined) {\n      // Assume legacy transaction\n      return Transaction.fromTxData(<TxData>txData, txOptions)\n    } else {\n      const txType = Number(bufferToBigInt(toBuffer(txData.type)))\n      if (txType === 0) {\n        return Transaction.fromTxData(<TxData>txData, txOptions)\n      } else if (txType === 1) {\n        return AccessListEIP2930Transaction.fromTxData(<AccessListEIP2930TxData>txData, txOptions)\n      } else if (txType === 2) {\n        return FeeMarketEIP1559Transaction.fromTxData(<FeeMarketEIP1559TxData>txData, txOptions)\n      } else {\n        throw new Error(`Tx instantiation with type ${txType} not supported`)\n      }\n    }\n  }\n\n  /**\n   * This method tries to decode serialized data.\n   *\n   * @param data - The data Buffer\n   * @param txOptions - The transaction options\n   */\n  public static fromSerializedData(data: Buffer, txOptions: TxOptions = {}): TypedTransaction {\n    if (data[0] <= 0x7f) {\n      // Determine the type.\n      switch (data[0]) {\n        case 1:\n          return AccessListEIP2930Transaction.fromSerializedTx(data, txOptions)\n        case 2:\n          return FeeMarketEIP1559Transaction.fromSerializedTx(data, txOptions)\n        default:\n          throw new Error(`TypedTransaction with ID ${data[0]} unknown`)\n      }\n    } else {\n      return Transaction.fromSerializedTx(data, txOptions)\n    }\n  }\n\n  /**\n   * When decoding a BlockBody, in the transactions field, a field is either:\n   * A Buffer (a TypedTransaction - encoded as TransactionType || rlp(TransactionPayload))\n   * A Buffer[] (Legacy Transaction)\n   * This method returns the right transaction.\n   *\n   * @param data - A Buffer or Buffer[]\n   * @param txOptions - The transaction options\n   */\n  public static fromBlockBodyData(data: Buffer | Buffer[], txOptions: TxOptions = {}) {\n    if (Buffer.isBuffer(data)) {\n      return this.fromSerializedData(data, txOptions)\n    } else if (Array.isArray(data)) {\n      // It is a legacy transaction\n      return Transaction.fromValuesArray(data, txOptions)\n    } else {\n      throw new Error('Cannot decode transaction: unknown type input')\n    }\n  }\n\n  /**\n   *  Method to retrieve a transaction from the provider\n   * @param provider - An Ethers JsonRPCProvider\n   * @param txHash - Transaction hash\n   * @param txOptions - The transaction options\n   * @returns the transaction specified by `txHash`\n   */\n  public static async fromEthersProvider(\n    provider: string | any,\n    txHash: string,\n    txOptions?: TxOptions\n  ) {\n    const prov = getProvider(provider)\n    const txData = await fetchFromProvider(prov, {\n      method: 'eth_getTransactionByHash',\n      params: [txHash],\n    })\n    if (txData === null) {\n      throw new Error('No data returned from provider')\n    }\n    return TransactionFactory.fromRPCTx(txData, txOptions)\n  }\n\n  /**\n   * Method to decode data retrieved from RPC, such as `eth_getTransactionByHash`\n   * Note that this normalizes some of the parameters\n   * @param txData The RPC-encoded data\n   * @param txOptions The transaction options\n   * @returns\n   */\n  public static async fromRPCTx(\n    txData: TxData | AccessListEIP2930TxData | FeeMarketEIP1559TxData,\n    txOptions: TxOptions = {}\n  ) {\n    return TransactionFactory.fromTxData(normalizeTxParams(txData), txOptions)\n  }\n}\n","import type { FeeMarketEIP1559Transaction } from './eip1559Transaction'\nimport type { AccessListEIP2930Transaction } from './eip2930Transaction'\nimport type { Transaction } from './legacyTransaction'\nimport type { Common } from '@ethereumjs/common'\nimport type { AddressLike, BigIntLike, BufferLike, PrefixedHexString } from '@ethereumjs/util'\n\n/**\n * Can be used in conjunction with {@link Transaction.supports}\n * to query on tx capabilities\n */\nexport enum Capability {\n  /**\n   * Tx supports EIP-155 replay protection\n   * See: [155](https://eips.ethereum.org/EIPS/eip-155) Replay Attack Protection EIP\n   */\n  EIP155ReplayProtection = 155,\n\n  /**\n   * Tx supports EIP-1559 gas fee market mechanism\n   * See: [1559](https://eips.ethereum.org/EIPS/eip-1559) Fee Market EIP\n   */\n  EIP1559FeeMarket = 1559,\n\n  /**\n   * Tx is a typed transaction as defined in EIP-2718\n   * See: [2718](https://eips.ethereum.org/EIPS/eip-2718) Transaction Type EIP\n   */\n  EIP2718TypedTransaction = 2718,\n\n  /**\n   * Tx supports access list generation as defined in EIP-2930\n   * See: [2930](https://eips.ethereum.org/EIPS/eip-2930) Access Lists EIP\n   */\n  EIP2930AccessLists = 2930,\n}\n\n/**\n * The options for initializing a {@link Transaction}.\n */\nexport interface TxOptions {\n  /**\n   * A {@link Common} object defining the chain and hardfork for the transaction.\n   *\n   * Object will be internally copied so that tx behavior don't incidentally\n   * change on future HF changes.\n   *\n   * Default: {@link Common} object set to `mainnet` and the default hardfork as defined in the {@link Common} class.\n   *\n   * Current default hardfork: `istanbul`\n   */\n  common?: Common\n  /**\n   * A transaction object by default gets frozen along initialization. This gives you\n   * strong additional security guarantees on the consistency of the tx parameters.\n   * It also enables tx hash caching when the `hash()` method is called multiple times.\n   *\n   * If you need to deactivate the tx freeze - e.g. because you want to subclass tx and\n   * add additional properties - it is strongly encouraged that you do the freeze yourself\n   * within your code instead.\n   *\n   * Default: true\n   */\n  freeze?: boolean\n\n  /**\n   * Allows unlimited contract code-size init while debugging. This (partially) disables EIP-3860.\n   * Gas cost for initcode size analysis will still be charged. Use with caution.\n   */\n  allowUnlimitedInitCodeSize?: boolean\n}\n\n/*\n * Access List types\n */\n\nexport type AccessListItem = {\n  address: PrefixedHexString\n  storageKeys: PrefixedHexString[]\n}\n\n/*\n * An Access List as a tuple of [address: Buffer, storageKeys: Buffer[]]\n */\nexport type AccessListBufferItem = [Buffer, Buffer[]]\nexport type AccessListBuffer = AccessListBufferItem[]\nexport type AccessList = AccessListItem[]\n\nexport function isAccessListBuffer(\n  input: AccessListBuffer | AccessList\n): input is AccessListBuffer {\n  if (input.length === 0) {\n    return true\n  }\n  const firstItem = input[0]\n  if (Array.isArray(firstItem)) {\n    return true\n  }\n  return false\n}\n\nexport function isAccessList(input: AccessListBuffer | AccessList): input is AccessList {\n  return !isAccessListBuffer(input) // This is exactly the same method, except the output is negated.\n}\n\n/**\n * Encompassing type for all transaction types.\n *\n * Note that this also includes legacy txs which are\n * referenced as {@link Transaction} for compatibility reasons.\n */\nexport type TypedTransaction =\n  | Transaction\n  | AccessListEIP2930Transaction\n  | FeeMarketEIP1559Transaction\n\n/**\n * Legacy {@link Transaction} Data\n */\nexport type TxData = {\n  /**\n   * The transaction's nonce.\n   */\n  nonce?: BigIntLike\n\n  /**\n   * The transaction's gas price.\n   */\n  gasPrice?: BigIntLike | null\n\n  /**\n   * The transaction's gas limit.\n   */\n  gasLimit?: BigIntLike\n\n  /**\n   * The transaction's the address is sent to.\n   */\n  to?: AddressLike\n\n  /**\n   * The amount of Ether sent.\n   */\n  value?: BigIntLike\n\n  /**\n   * This will contain the data of the message or the init of a contract.\n   */\n  data?: BufferLike\n\n  /**\n   * EC recovery ID.\n   */\n  v?: BigIntLike\n\n  /**\n   * EC signature parameter.\n   */\n  r?: BigIntLike\n\n  /**\n   * EC signature parameter.\n   */\n  s?: BigIntLike\n\n  /**\n   * The transaction type\n   */\n\n  type?: BigIntLike\n}\n\n/**\n * {@link AccessListEIP2930Transaction} data.\n */\nexport interface AccessListEIP2930TxData extends TxData {\n  /**\n   * The transaction's chain ID\n   */\n  chainId?: BigIntLike\n\n  /**\n   * The access list which contains the addresses/storage slots which the transaction wishes to access\n   */\n  accessList?: AccessListBuffer | AccessList | null\n}\n\n/**\n * {@link FeeMarketEIP1559Transaction} data.\n */\nexport interface FeeMarketEIP1559TxData extends AccessListEIP2930TxData {\n  /**\n   * The transaction's gas price, inherited from {@link Transaction}.  This property is not used for EIP1559\n   * transactions and should always be undefined for this specific transaction type.\n   */\n  gasPrice?: never | null\n  /**\n   * The maximum inclusion fee per gas (this fee is given to the miner)\n   */\n  maxPriorityFeePerGas?: BigIntLike\n  /**\n   * The maximum total fee\n   */\n  maxFeePerGas?: BigIntLike\n}\n\n/**\n * Buffer values array for a legacy {@link Transaction}\n */\nexport type TxValuesArray = Buffer[]\n\n/**\n * Buffer values array for an {@link AccessListEIP2930Transaction}\n */\nexport type AccessListEIP2930ValuesArray = [\n  Buffer,\n  Buffer,\n  Buffer,\n  Buffer,\n  Buffer,\n  Buffer,\n  Buffer,\n  AccessListBuffer,\n  Buffer?,\n  Buffer?,\n  Buffer?\n]\n\n/**\n * Buffer values array for a {@link FeeMarketEIP1559Transaction}\n */\nexport type FeeMarketEIP1559ValuesArray = [\n  Buffer,\n  Buffer,\n  Buffer,\n  Buffer,\n  Buffer,\n  Buffer,\n  Buffer,\n  Buffer,\n  AccessListBuffer,\n  Buffer?,\n  Buffer?,\n  Buffer?\n]\n\ntype JsonAccessListItem = { address: string; storageKeys: string[] }\n\n/**\n * Generic interface for all tx types with a\n * JSON representation of a transaction.\n *\n * Note that all values are marked as optional\n * and not all the values are present on all tx types\n * (an EIP1559 tx e.g. lacks a `gasPrice`).\n */\nexport interface JsonTx {\n  nonce?: string\n  gasPrice?: string\n  gasLimit?: string\n  to?: string\n  data?: string\n  v?: string\n  r?: string\n  s?: string\n  value?: string\n  chainId?: string\n  accessList?: JsonAccessListItem[]\n  type?: string\n  maxPriorityFeePerGas?: string\n  maxFeePerGas?: string\n  maxFeePerDataGas?: string\n  versionedHashes?: string[]\n}\n\n/*\n * Based on https://ethereum.org/en/developers/docs/apis/json-rpc/\n */\nexport interface JsonRpcTx {\n  blockHash: string | null // DATA, 32 Bytes - hash of the block where this transaction was in. null when it's pending.\n  blockNumber: string | null // QUANTITY - block number where this transaction was in. null when it's pending.\n  from: string // DATA, 20 Bytes - address of the sender.\n  gas: string // QUANTITY - gas provided by the sender.\n  gasPrice: string // QUANTITY - gas price provided by the sender in wei. If EIP-1559 tx, defaults to maxFeePerGas.\n  maxFeePerGas?: string // QUANTITY - max total fee per gas provided by the sender in wei.\n  maxPriorityFeePerGas?: string // QUANTITY - max priority fee per gas provided by the sender in wei.\n  type: string // QUANTITY - EIP-2718 Typed Transaction type\n  accessList?: JsonTx['accessList'] // EIP-2930 access list\n  chainId?: string // Chain ID that this transaction is valid on.\n  hash: string // DATA, 32 Bytes - hash of the transaction.\n  input: string // DATA - the data send along with the transaction.\n  nonce: string // QUANTITY - the number of transactions made by the sender prior to this one.\n  to: string | null /// DATA, 20 Bytes - address of the receiver. null when it's a contract creation transaction.\n  transactionIndex: string | null // QUANTITY - integer of the transactions index position in the block. null when it's pending.\n  value: string // QUANTITY - value transferred in Wei.\n  v: string // QUANTITY - ECDSA recovery id\n  r: string // DATA, 32 Bytes - ECDSA signature r\n  s: string // DATA, 32 Bytes - ECDSA signature s\n  maxFeePerDataGas?: string // QUANTITY - max data fee for blob transactions\n  versionedHashes?: string[] // DATA - array of 32 byte versioned hashes for blob transactions\n}\n","import { bufferToHex, setLengthLeft, toBuffer } from '@ethereumjs/util'\n\nimport { isAccessList } from './types'\n\nimport type { AccessList, AccessListBuffer, AccessListItem } from './types'\nimport type { Common } from '@ethereumjs/common'\n\nexport function checkMaxInitCodeSize(common: Common, length: number) {\n  const maxInitCodeSize = common.param('vm', 'maxInitCodeSize')\n  if (maxInitCodeSize && BigInt(length) > maxInitCodeSize) {\n    throw new Error(\n      `the initcode size of this transaction is too large: it is ${length} while the max is ${common.param(\n        'vm',\n        'maxInitCodeSize'\n      )}`\n    )\n  }\n}\n\nexport class AccessLists {\n  public static getAccessListData(accessList: AccessListBuffer | AccessList) {\n    let AccessListJSON\n    let bufferAccessList\n    if (isAccessList(accessList)) {\n      AccessListJSON = accessList\n      const newAccessList: AccessListBuffer = []\n\n      for (let i = 0; i < accessList.length; i++) {\n        const item: AccessListItem = accessList[i]\n        const addressBuffer = toBuffer(item.address)\n        const storageItems: Buffer[] = []\n        for (let index = 0; index < item.storageKeys.length; index++) {\n          storageItems.push(toBuffer(item.storageKeys[index]))\n        }\n        newAccessList.push([addressBuffer, storageItems])\n      }\n      bufferAccessList = newAccessList\n    } else {\n      bufferAccessList = accessList ?? []\n      // build the JSON\n      const json: AccessList = []\n      for (let i = 0; i < bufferAccessList.length; i++) {\n        const data = bufferAccessList[i]\n        const address = bufferToHex(data[0])\n        const storageKeys: string[] = []\n        for (let item = 0; item < data[1].length; item++) {\n          storageKeys.push(bufferToHex(data[1][item]))\n        }\n        const jsonItem: AccessListItem = {\n          address,\n          storageKeys,\n        }\n        json.push(jsonItem)\n      }\n      AccessListJSON = json\n    }\n\n    return {\n      AccessListJSON,\n      accessList: bufferAccessList,\n    }\n  }\n\n  public static verifyAccessList(accessList: AccessListBuffer) {\n    for (let key = 0; key < accessList.length; key++) {\n      const accessListItem = accessList[key]\n      const address = <Buffer>accessListItem[0]\n      const storageSlots = <Buffer[]>accessListItem[1]\n      if ((<any>accessListItem)[2] !== undefined) {\n        throw new Error(\n          'Access list item cannot have 3 elements. It can only have an address, and an array of storage slots.'\n        )\n      }\n      if (address.length !== 20) {\n        throw new Error('Invalid EIP-2930 transaction: address length should be 20 bytes')\n      }\n      for (let storageSlot = 0; storageSlot < storageSlots.length; storageSlot++) {\n        if (storageSlots[storageSlot].length !== 32) {\n          throw new Error('Invalid EIP-2930 transaction: storage slot length should be 32 bytes')\n        }\n      }\n    }\n  }\n\n  public static getAccessListJSON(accessList: AccessListBuffer) {\n    const accessListJSON = []\n    for (let index = 0; index < accessList.length; index++) {\n      const item: any = accessList[index]\n      const JSONItem: any = {\n        address: '0x' + setLengthLeft(<Buffer>item[0], 20).toString('hex'),\n        storageKeys: [],\n      }\n      const storageSlots: Buffer[] = item[1]\n      for (let slot = 0; slot < storageSlots.length; slot++) {\n        const storageSlot = storageSlots[slot]\n        JSONItem.storageKeys.push('0x' + setLengthLeft(storageSlot, 32).toString('hex'))\n      }\n      accessListJSON.push(JSONItem)\n    }\n    return accessListJSON\n  }\n\n  public static getDataFeeEIP2930(accessList: AccessListBuffer, common: Common): number {\n    const accessListStorageKeyCost = common.param('gasPrices', 'accessListStorageKeyCost')\n    const accessListAddressCost = common.param('gasPrices', 'accessListAddressCost')\n\n    let slots = 0\n    for (let index = 0; index < accessList.length; index++) {\n      const item = accessList[index]\n      const storageSlots = item[1]\n      slots += storageSlots.length\n    }\n\n    const addresses = accessList.length\n    return addresses * Number(accessListAddressCost) + slots * Number(accessListStorageKeyCost)\n  }\n}\n","import { TypeOutput, intToBuffer, toType } from '@ethereumjs/util'\nimport { buf as crc32Buffer } from 'crc-32'\nimport { EventEmitter } from 'events'\n\nimport * as goerli from './chains/goerli.json'\nimport * as mainnet from './chains/mainnet.json'\nimport * as rinkeby from './chains/rinkeby.json'\nimport * as ropsten from './chains/ropsten.json'\nimport * as sepolia from './chains/sepolia.json'\nimport { EIPs } from './eips'\nimport { Chain, CustomChain, Hardfork } from './enums'\nimport { hardforks as HARDFORK_SPECS } from './hardforks'\nimport { parseGethGenesis } from './utils'\n\nimport type { ConsensusAlgorithm, ConsensusType } from './enums'\nimport type {\n  BootstrapNodeConfig,\n  CasperConfig,\n  ChainConfig,\n  ChainName,\n  ChainsConfig,\n  CliqueConfig,\n  CommonOpts,\n  CustomCommonOpts,\n  EthashConfig,\n  GenesisBlockConfig,\n  GethConfigOpts,\n  HardforkConfig,\n} from './types'\nimport type { BigIntLike } from '@ethereumjs/util'\n\ntype HardforkSpecKeys = keyof typeof HARDFORK_SPECS\ntype HardforkSpecValues = typeof HARDFORK_SPECS[HardforkSpecKeys]\n/**\n * Common class to access chain and hardfork parameters and to provide\n * a unified and shared view on the network and hardfork state.\n *\n * Use the {@link Common.custom} static constructor for creating simple\n * custom chain {@link Common} objects (more complete custom chain setups\n * can be created via the main constructor and the {@link CommonOpts.customChains} parameter).\n */\nexport class Common extends EventEmitter {\n  readonly DEFAULT_HARDFORK: string | Hardfork\n\n  private _chainParams: ChainConfig\n  private _hardfork: string | Hardfork\n  private _eips: number[] = []\n  private _customChains: ChainConfig[]\n\n  private HARDFORK_CHANGES: [HardforkSpecKeys, HardforkSpecValues][]\n\n  /**\n   * Creates a {@link Common} object for a custom chain, based on a standard one.\n   *\n   * It uses all the {@link Chain} parameters from the {@link baseChain} option except the ones overridden\n   * in a provided {@link chainParamsOrName} dictionary. Some usage example:\n   *\n   * ```javascript\n   * Common.custom({chainId: 123})\n   * ```\n   *\n   * There are also selected supported custom chains which can be initialized by using one of the\n   * {@link CustomChains} for {@link chainParamsOrName}, e.g.:\n   *\n   * ```javascript\n   * Common.custom(CustomChains.MaticMumbai)\n   * ```\n   *\n   * Note that these supported custom chains only provide some base parameters (usually the chain and\n   * network ID and a name) and can only be used for selected use cases (e.g. sending a tx with\n   * the `@ethereumjs/tx` library to a Layer-2 chain).\n   *\n   * @param chainParamsOrName Custom parameter dict (`name` will default to `custom-chain`) or string with name of a supported custom chain\n   * @param opts Custom chain options to set the {@link CustomCommonOpts.baseChain}, selected {@link CustomCommonOpts.hardfork} and others\n   */\n  static custom(\n    chainParamsOrName: Partial<ChainConfig> | CustomChain,\n    opts: CustomCommonOpts = {}\n  ): Common {\n    const baseChain = opts.baseChain ?? 'mainnet'\n    const standardChainParams = { ...Common._getChainParams(baseChain) }\n    standardChainParams['name'] = 'custom-chain'\n\n    if (typeof chainParamsOrName !== 'string') {\n      return new Common({\n        chain: {\n          ...standardChainParams,\n          ...chainParamsOrName,\n        },\n        ...opts,\n      })\n    } else {\n      if (chainParamsOrName === CustomChain.PolygonMainnet) {\n        return Common.custom(\n          {\n            name: CustomChain.PolygonMainnet,\n            chainId: 137,\n            networkId: 137,\n          },\n          opts\n        )\n      }\n      if (chainParamsOrName === CustomChain.PolygonMumbai) {\n        return Common.custom(\n          {\n            name: CustomChain.PolygonMumbai,\n            chainId: 80001,\n            networkId: 80001,\n          },\n          opts\n        )\n      }\n      if (chainParamsOrName === CustomChain.ArbitrumRinkebyTestnet) {\n        return Common.custom(\n          {\n            name: CustomChain.ArbitrumRinkebyTestnet,\n            chainId: 421611,\n            networkId: 421611,\n          },\n          opts\n        )\n      }\n      if (chainParamsOrName === CustomChain.ArbitrumOne) {\n        return Common.custom(\n          {\n            name: CustomChain.ArbitrumOne,\n            chainId: 42161,\n            networkId: 42161,\n          },\n          opts\n        )\n      }\n      if (chainParamsOrName === CustomChain.xDaiChain) {\n        return Common.custom(\n          {\n            name: CustomChain.xDaiChain,\n            chainId: 100,\n            networkId: 100,\n          },\n          opts\n        )\n      }\n\n      if (chainParamsOrName === CustomChain.OptimisticKovan) {\n        return Common.custom(\n          {\n            name: CustomChain.OptimisticKovan,\n            chainId: 69,\n            networkId: 69,\n          },\n          // Optimism has not implemented the London hardfork yet (targeting Q1.22)\n          { hardfork: Hardfork.Berlin, ...opts }\n        )\n      }\n\n      if (chainParamsOrName === CustomChain.OptimisticEthereum) {\n        return Common.custom(\n          {\n            name: CustomChain.OptimisticEthereum,\n            chainId: 10,\n            networkId: 10,\n          },\n          // Optimism has not implemented the London hardfork yet (targeting Q1.22)\n          { hardfork: Hardfork.Berlin, ...opts }\n        )\n      }\n      throw new Error(`Custom chain ${chainParamsOrName} not supported`)\n    }\n  }\n\n  /**\n   * Static method to load and set common from a geth genesis json\n   * @param genesisJson json of geth configuration\n   * @param { chain, eips, genesisHash, hardfork, mergeForkIdPostMerge } to further configure the common instance\n   * @returns Common\n   */\n  static fromGethGenesis(\n    genesisJson: any,\n    { chain, eips, genesisHash, hardfork, mergeForkIdPostMerge }: GethConfigOpts\n  ): Common {\n    const genesisParams = parseGethGenesis(genesisJson, chain, mergeForkIdPostMerge)\n    const common = new Common({\n      chain: genesisParams.name ?? 'custom',\n      customChains: [genesisParams],\n      eips,\n      hardfork: hardfork ?? genesisParams.hardfork,\n    })\n    if (genesisHash !== undefined) {\n      common.setForkHashes(genesisHash)\n    }\n    return common\n  }\n\n  /**\n   * Static method to determine if a {@link chainId} is supported as a standard chain\n   * @param chainId bigint id (`1`) of a standard chain\n   * @returns boolean\n   */\n  static isSupportedChainId(chainId: bigint): boolean {\n    const initializedChains = this._getInitializedChains()\n    return Boolean((initializedChains['names'] as ChainName)[chainId.toString()])\n  }\n\n  private static _getChainParams(\n    chain: string | number | Chain | bigint,\n    customChains?: ChainConfig[]\n  ): ChainConfig {\n    const initializedChains = this._getInitializedChains(customChains)\n    if (typeof chain === 'number' || typeof chain === 'bigint') {\n      chain = chain.toString()\n\n      if ((initializedChains['names'] as ChainName)[chain]) {\n        const name: string = (initializedChains['names'] as ChainName)[chain]\n        return initializedChains[name] as ChainConfig\n      }\n\n      throw new Error(`Chain with ID ${chain} not supported`)\n    }\n\n    if (initializedChains[chain] !== undefined) {\n      return initializedChains[chain] as ChainConfig\n    }\n\n    throw new Error(`Chain with name ${chain} not supported`)\n  }\n\n  constructor(opts: CommonOpts) {\n    super()\n    this._customChains = opts.customChains ?? []\n    this._chainParams = this.setChain(opts.chain)\n    this.DEFAULT_HARDFORK = this._chainParams.defaultHardfork ?? Hardfork.Merge\n    // Assign hardfork changes in the sequence of the applied hardforks\n    this.HARDFORK_CHANGES = this.hardforks().map((hf) => [\n      hf.name as HardforkSpecKeys,\n      HARDFORK_SPECS[hf.name as HardforkSpecKeys],\n    ])\n    this._hardfork = this.DEFAULT_HARDFORK\n    if (opts.hardfork !== undefined) {\n      this.setHardfork(opts.hardfork)\n    }\n    if (opts.eips) {\n      this.setEIPs(opts.eips)\n    }\n  }\n\n  /**\n   * Sets the chain\n   * @param chain String ('mainnet') or Number (1) chain representation.\n   *              Or, a Dictionary of chain parameters for a private network.\n   * @returns The dictionary with parameters set as chain\n   */\n  setChain(chain: string | number | Chain | bigint | object): ChainConfig {\n    if (typeof chain === 'number' || typeof chain === 'bigint' || typeof chain === 'string') {\n      this._chainParams = Common._getChainParams(chain, this._customChains)\n    } else if (typeof chain === 'object') {\n      if (this._customChains.length > 0) {\n        throw new Error(\n          'Chain must be a string, number, or bigint when initialized with customChains passed in'\n        )\n      }\n      const required = ['networkId', 'genesis', 'hardforks', 'bootstrapNodes']\n      for (const param of required) {\n        if (!(param in chain)) {\n          throw new Error(`Missing required chain parameter: ${param}`)\n        }\n      }\n      this._chainParams = chain as ChainConfig\n    } else {\n      throw new Error('Wrong input format')\n    }\n    for (const hf of this.hardforks()) {\n      if (hf.block === undefined) {\n        throw new Error(`Hardfork cannot have undefined block number`)\n      }\n    }\n    return this._chainParams\n  }\n\n  /**\n   * Sets the hardfork to get params for\n   * @param hardfork String identifier (e.g. 'byzantium') or {@link Hardfork} enum\n   */\n  setHardfork(hardfork: string | Hardfork): void {\n    let existing = false\n    for (const hfChanges of this.HARDFORK_CHANGES) {\n      if (hfChanges[0] === hardfork) {\n        if (this._hardfork !== hardfork) {\n          this._hardfork = hardfork\n          this.emit('hardforkChanged', hardfork)\n        }\n        existing = true\n      }\n    }\n    if (!existing) {\n      throw new Error(`Hardfork with name ${hardfork} not supported`)\n    }\n  }\n\n  /**\n   * Returns the hardfork based on the block number or an optional\n   * total difficulty (Merge HF) provided.\n   *\n   * An optional TD takes precedence in case the corresponding HF block\n   * is set to `null` or otherwise needs to match (if not an error\n   * will be thrown).\n   *\n   * @param blockNumber\n   * @param td : total difficulty of the parent block (for block hf) OR of the chain latest (for chain hf)\n   * @param timestamp: timestamp in seconds at which block was/is to be minted\n   * @returns The name of the HF\n   */\n  getHardforkByBlockNumber(\n    blockNumber: BigIntLike,\n    td?: BigIntLike,\n    timestamp?: BigIntLike\n  ): string {\n    blockNumber = toType(blockNumber, TypeOutput.BigInt)\n    td = toType(td, TypeOutput.BigInt)\n    timestamp = toType(timestamp, TypeOutput.Number)\n\n    // Filter out hardforks with no block number, no ttd or no timestamp (i.e. unapplied hardforks)\n    const hfs = this.hardforks().filter(\n      (hf) =>\n        hf.block !== null || (hf.ttd !== null && hf.ttd !== undefined) || hf.timestamp !== undefined\n    )\n    const mergeIndex = hfs.findIndex((hf) => hf.ttd !== null && hf.ttd !== undefined)\n    const doubleTTDHF = hfs\n      .slice(mergeIndex + 1)\n      .findIndex((hf) => hf.ttd !== null && hf.ttd !== undefined)\n    if (doubleTTDHF >= 0) {\n      throw Error(`More than one merge hardforks found with ttd specified`)\n    }\n\n    // Find the first hardfork that has a block number greater than `blockNumber`\n    // (skips the merge hardfork since it cannot have a block number specified).\n    // If timestamp is not provided, it also skips timestamps hardforks to continue\n    // discovering/checking number hardforks.\n    let hfIndex = hfs.findIndex(\n      (hf) =>\n        (hf.block !== null && hf.block > blockNumber) ||\n        (timestamp !== undefined && Number(hf.timestamp) > timestamp)\n    )\n\n    if (hfIndex === -1) {\n      // all hardforks apply, set hfIndex to the last one as that's the candidate\n      hfIndex = hfs.length\n    } else if (hfIndex === 0) {\n      // cannot have a case where a block number is before all applied hardforks\n      // since the chain has to start with a hardfork\n      throw Error('Must have at least one hardfork at block 0')\n    }\n\n    // If timestamp is not provided, we need to rollback to the last hf with block or ttd\n    if (timestamp === undefined) {\n      const stepBack = hfs\n        .slice(0, hfIndex)\n        .reverse()\n        .findIndex((hf) => hf.block !== null || hf.ttd !== undefined)\n      hfIndex = hfIndex - stepBack\n    }\n    // Move hfIndex one back to arrive at candidate hardfork\n    hfIndex = hfIndex - 1\n\n    // If the timestamp was not provided, we could have skipped timestamp hardforks to look for number\n    // hardforks. so it will now be needed to rollback\n    if (hfs[hfIndex].block === null && hfs[hfIndex].timestamp === undefined) {\n      // We're on the merge hardfork.  Let's check the TTD\n      if (td === undefined || td === null || BigInt(hfs[hfIndex].ttd!) > td) {\n        // Merge ttd greater than current td so we're on hardfork before merge\n        hfIndex -= 1\n      }\n    } else {\n      if (mergeIndex >= 0 && td !== undefined && td !== null) {\n        if (hfIndex >= mergeIndex && BigInt(hfs[mergeIndex].ttd!) > td) {\n          throw Error('Maximum HF determined by total difficulty is lower than the block number HF')\n        } else if (hfIndex < mergeIndex && BigInt(hfs[mergeIndex].ttd!) <= td) {\n          throw Error('HF determined by block number is lower than the minimum total difficulty HF')\n        }\n      }\n    }\n\n    const hfStartIndex = hfIndex\n    // Move the hfIndex to the end of the hardforks that might be scheduled on the same block/timestamp\n    // This won't anyway be the case with Merge hfs\n    for (; hfIndex < hfs.length - 1; hfIndex++) {\n      // break out if hfIndex + 1 is not scheduled at hfIndex\n      if (\n        hfs[hfIndex].block !== hfs[hfIndex + 1].block ||\n        hfs[hfIndex].timestamp !== hfs[hfIndex + 1].timestamp\n      ) {\n        break\n      }\n    }\n\n    if (timestamp) {\n      const minTimeStamp = hfs\n        .slice(0, hfStartIndex)\n        .reduce((acc: number, hf: HardforkConfig) => Math.max(Number(hf.timestamp ?? '0'), acc), 0)\n      if (minTimeStamp > timestamp) {\n        throw Error(`Maximum HF determined by timestamp is lower than the block number/ttd HF`)\n      }\n\n      const maxTimeStamp = hfs\n        .slice(hfIndex + 1)\n        .reduce(\n          (acc: number, hf: HardforkConfig) => Math.min(Number(hf.timestamp ?? timestamp), acc),\n          timestamp\n        )\n      if (maxTimeStamp < timestamp) {\n        throw Error(`Maximum HF determined by block number/ttd is lower than timestamp HF`)\n      }\n    }\n    const hardfork = hfs[hfIndex]\n    return hardfork.name\n  }\n\n  /**\n   * Sets a new hardfork based on the block number or an optional\n   * total difficulty (Merge HF) provided.\n   *\n   * An optional TD takes precedence in case the corresponding HF block\n   * is set to `null` or otherwise needs to match (if not an error\n   * will be thrown).\n   *\n   * @param blockNumber\n   * @param td\n   * @param timestamp\n   * @returns The name of the HF set\n   */\n  setHardforkByBlockNumber(\n    blockNumber: BigIntLike,\n    td?: BigIntLike,\n    timestamp?: BigIntLike\n  ): string {\n    const hardfork = this.getHardforkByBlockNumber(blockNumber, td, timestamp)\n    this.setHardfork(hardfork)\n    return hardfork\n  }\n\n  /**\n   * Internal helper function, returns the params for the given hardfork for the chain set\n   * @param hardfork Hardfork name\n   * @returns Dictionary with hardfork params or null if hardfork not on chain\n   */\n  _getHardfork(hardfork: string | Hardfork): HardforkConfig | null {\n    const hfs = this.hardforks()\n    for (const hf of hfs) {\n      if (hf['name'] === hardfork) return hf\n    }\n    return null\n  }\n\n  /**\n   * Sets the active EIPs\n   * @param eips\n   */\n  setEIPs(eips: number[] = []) {\n    for (const eip of eips) {\n      if (!(eip in EIPs)) {\n        throw new Error(`${eip} not supported`)\n      }\n      const minHF = this.gteHardfork(EIPs[eip]['minimumHardfork'])\n      if (!minHF) {\n        throw new Error(\n          `${eip} cannot be activated on hardfork ${this.hardfork()}, minimumHardfork: ${minHF}`\n        )\n      }\n      if (EIPs[eip].requiredEIPs !== undefined) {\n        for (const elem of EIPs[eip].requiredEIPs) {\n          if (!(eips.includes(elem) || this.isActivatedEIP(elem))) {\n            throw new Error(`${eip} requires EIP ${elem}, but is not included in the EIP list`)\n          }\n        }\n      }\n    }\n    this._eips = eips\n  }\n\n  /**\n   * Returns a parameter for the current chain setup\n   *\n   * If the parameter is present in an EIP, the EIP always takes precedence.\n   * Otherwise the parameter if taken from the latest applied HF with\n   * a change on the respective parameter.\n   *\n   * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')\n   * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n   * @returns The value requested or `BigInt(0)` if not found\n   */\n  param(topic: string, name: string): bigint {\n    // TODO: consider the case that different active EIPs\n    // can change the same parameter\n    let value\n    for (const eip of this._eips) {\n      value = this.paramByEIP(topic, name, eip)\n      if (value !== undefined) return value\n    }\n    return this.paramByHardfork(topic, name, this._hardfork)\n  }\n\n  /**\n   * Returns the parameter corresponding to a hardfork\n   * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')\n   * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n   * @param hardfork Hardfork name\n   * @returns The value requested or `BigInt(0)` if not found\n   */\n  paramByHardfork(topic: string, name: string, hardfork: string | Hardfork): bigint {\n    let value = null\n    for (const hfChanges of this.HARDFORK_CHANGES) {\n      // EIP-referencing HF file (e.g. berlin.json)\n      if ('eips' in hfChanges[1]) {\n        const hfEIPs = hfChanges[1]['eips']\n        for (const eip of hfEIPs) {\n          const valueEIP = this.paramByEIP(topic, name, eip)\n          value = typeof valueEIP === 'bigint' ? valueEIP : value\n        }\n        // Parameter-inlining HF file (e.g. istanbul.json)\n      } else {\n        if (hfChanges[1][topic] === undefined) {\n          throw new Error(`Topic ${topic} not defined`)\n        }\n        if (hfChanges[1][topic][name] !== undefined) {\n          value = hfChanges[1][topic][name].v\n        }\n      }\n      if (hfChanges[0] === hardfork) break\n    }\n    return BigInt(value ?? 0)\n  }\n\n  /**\n   * Returns a parameter corresponding to an EIP\n   * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')\n   * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n   * @param eip Number of the EIP\n   * @returns The value requested or `undefined` if not found\n   */\n  paramByEIP(topic: string, name: string, eip: number): bigint | undefined {\n    if (!(eip in EIPs)) {\n      throw new Error(`${eip} not supported`)\n    }\n\n    const eipParams = EIPs[eip]\n    if (!(topic in eipParams)) {\n      throw new Error(`Topic ${topic} not defined`)\n    }\n    if (eipParams[topic][name] === undefined) {\n      return undefined\n    }\n    const value = eipParams[topic][name].v\n    return BigInt(value)\n  }\n\n  /**\n   * Returns a parameter for the hardfork active on block number or\n   * optional provided total difficulty (Merge HF)\n   * @param topic Parameter topic\n   * @param name Parameter name\n   * @param blockNumber Block number\n   * @param td Total difficulty\n   *    * @returns The value requested or `BigInt(0)` if not found\n   */\n  paramByBlock(\n    topic: string,\n    name: string,\n    blockNumber: BigIntLike,\n    td?: BigIntLike,\n    timestamp?: BigIntLike\n  ): bigint {\n    const hardfork = this.getHardforkByBlockNumber(blockNumber, td, timestamp)\n    return this.paramByHardfork(topic, name, hardfork)\n  }\n\n  /**\n   * Checks if an EIP is activated by either being included in the EIPs\n   * manually passed in with the {@link CommonOpts.eips} or in a\n   * hardfork currently being active\n   *\n   * Note: this method only works for EIPs being supported\n   * by the {@link CommonOpts.eips} constructor option\n   * @param eip\n   */\n  isActivatedEIP(eip: number): boolean {\n    if (this.eips().includes(eip)) {\n      return true\n    }\n    for (const hfChanges of this.HARDFORK_CHANGES) {\n      const hf = hfChanges[1]\n      if (this.gteHardfork(hf['name']) && 'eips' in hf) {\n        if ((hf['eips'] as number[]).includes(eip)) {\n          return true\n        }\n      }\n    }\n    return false\n  }\n\n  /**\n   * Checks if set or provided hardfork is active on block number\n   * @param hardfork Hardfork name or null (for HF set)\n   * @param blockNumber\n   * @returns True if HF is active on block number\n   */\n  hardforkIsActiveOnBlock(hardfork: string | Hardfork | null, blockNumber: BigIntLike): boolean {\n    blockNumber = toType(blockNumber, TypeOutput.BigInt)\n    hardfork = hardfork ?? this._hardfork\n    const hfBlock = this.hardforkBlock(hardfork)\n    if (typeof hfBlock === 'bigint' && hfBlock !== BigInt(0) && blockNumber >= hfBlock) {\n      return true\n    }\n    return false\n  }\n\n  /**\n   * Alias to hardforkIsActiveOnBlock when hardfork is set\n   * @param blockNumber\n   * @returns True if HF is active on block number\n   */\n  activeOnBlock(blockNumber: BigIntLike): boolean {\n    return this.hardforkIsActiveOnBlock(null, blockNumber)\n  }\n\n  /**\n   * Sequence based check if given or set HF1 is greater than or equal HF2\n   * @param hardfork1 Hardfork name or null (if set)\n   * @param hardfork2 Hardfork name\n   * @param opts Hardfork options\n   * @returns True if HF1 gte HF2\n   */\n  hardforkGteHardfork(hardfork1: string | Hardfork | null, hardfork2: string | Hardfork): boolean {\n    hardfork1 = hardfork1 ?? this._hardfork\n    const hardforks = this.hardforks()\n\n    let posHf1 = -1,\n      posHf2 = -1\n    let index = 0\n    for (const hf of hardforks) {\n      if (hf['name'] === hardfork1) posHf1 = index\n      if (hf['name'] === hardfork2) posHf2 = index\n      index += 1\n    }\n    return posHf1 >= posHf2 && posHf2 !== -1\n  }\n\n  /**\n   * Alias to hardforkGteHardfork when hardfork is set\n   * @param hardfork Hardfork name\n   * @returns True if hardfork set is greater than hardfork provided\n   */\n  gteHardfork(hardfork: string | Hardfork): boolean {\n    return this.hardforkGteHardfork(null, hardfork)\n  }\n\n  /**\n   * Returns the hardfork change block for hardfork provided or set\n   * @param hardfork Hardfork name, optional if HF set\n   * @returns Block number or null if unscheduled\n   */\n  hardforkBlock(hardfork?: string | Hardfork): bigint | null {\n    hardfork = hardfork ?? this._hardfork\n    const block = this._getHardfork(hardfork)?.['block']\n    if (block === undefined || block === null) {\n      return null\n    }\n    return BigInt(block)\n  }\n\n  hardforkTimestamp(hardfork?: string | Hardfork): bigint | null {\n    hardfork = hardfork ?? this._hardfork\n    const timestamp = this._getHardfork(hardfork)?.['timestamp']\n    if (timestamp === undefined || timestamp === null) {\n      return null\n    }\n    return BigInt(timestamp)\n  }\n\n  /**\n   * Returns the hardfork change block for eip\n   * @param eip EIP number\n   * @returns Block number or null if unscheduled\n   */\n  eipBlock(eip: number): bigint | null {\n    for (const hfChanges of this.HARDFORK_CHANGES) {\n      const hf = hfChanges[1]\n      if ('eips' in hf) {\n        // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n        if (hf['eips'].includes(eip)) {\n          return this.hardforkBlock(hfChanges[0])\n        }\n      }\n    }\n    return null\n  }\n\n  /**\n   * Returns the hardfork change total difficulty (Merge HF) for hardfork provided or set\n   * @param hardfork Hardfork name, optional if HF set\n   * @returns Total difficulty or null if no set\n   */\n  hardforkTTD(hardfork?: string | Hardfork): bigint | null {\n    hardfork = hardfork ?? this._hardfork\n    const ttd = this._getHardfork(hardfork)?.['ttd']\n    if (ttd === undefined || ttd === null) {\n      return null\n    }\n    return BigInt(ttd)\n  }\n\n  /**\n   * True if block number provided is the hardfork (given or set) change block\n   * @param blockNumber Number of the block to check\n   * @param hardfork Hardfork name, optional if HF set\n   * @returns True if blockNumber is HF block\n   * @deprecated\n   */\n  isHardforkBlock(blockNumber: BigIntLike, hardfork?: string | Hardfork): boolean {\n    blockNumber = toType(blockNumber, TypeOutput.BigInt)\n    hardfork = hardfork ?? this._hardfork\n    const block = this.hardforkBlock(hardfork)\n    return typeof block === 'bigint' && block !== BigInt(0) ? block === blockNumber : false\n  }\n\n  /**\n   * Returns the change block for the next hardfork after the hardfork provided or set\n   * @param hardfork Hardfork name, optional if HF set\n   * @returns Block timestamp, number or null if not available\n   */\n  nextHardforkBlockOrTimestamp(hardfork?: string | Hardfork): bigint | null {\n    hardfork = hardfork ?? this._hardfork\n    const hfs = this.hardforks()\n    let hfIndex = hfs.findIndex((hf) => hf.name === hardfork)\n    // If the current hardfork is merge, go one behind as merge hf is not part of these\n    // calcs even if the merge hf block is set\n    if (hardfork === Hardfork.Merge) {\n      hfIndex -= 1\n    }\n    // Hardfork not found\n    if (hfIndex < 0) {\n      return null\n    }\n\n    let currHfTimeOrBlock = hfs[hfIndex].timestamp ?? hfs[hfIndex].block\n    currHfTimeOrBlock =\n      currHfTimeOrBlock !== null && currHfTimeOrBlock !== undefined\n        ? Number(currHfTimeOrBlock)\n        : null\n\n    const nextHf = hfs.slice(hfIndex + 1).find((hf) => {\n      let hfTimeOrBlock = hf.timestamp ?? hf.block\n      hfTimeOrBlock =\n        hfTimeOrBlock !== null && hfTimeOrBlock !== undefined ? Number(hfTimeOrBlock) : null\n      return (\n        hf.name !== Hardfork.Merge &&\n        hfTimeOrBlock !== null &&\n        hfTimeOrBlock !== undefined &&\n        hfTimeOrBlock !== currHfTimeOrBlock\n      )\n    })\n    // If no next hf found with valid block or timestamp return null\n    if (nextHf === undefined) {\n      return null\n    }\n\n    const nextHfBlock = nextHf.timestamp ?? nextHf.block\n    if (nextHfBlock === null || nextHfBlock === undefined) {\n      return null\n    }\n\n    return BigInt(nextHfBlock)\n  }\n\n  /**\n   * Returns the change block for the next hardfork after the hardfork provided or set\n   * @param hardfork Hardfork name, optional if HF set\n   * @returns Block number or null if not available\n   * @deprecated\n   */\n  nextHardforkBlock(hardfork?: string | Hardfork): bigint | null {\n    hardfork = hardfork ?? this._hardfork\n    let hfBlock = this.hardforkBlock(hardfork)\n    // If this is a merge hardfork with block not set, then we fallback to previous hardfork\n    // to find the nextHardforkBlock\n    if (hfBlock === null && hardfork === Hardfork.Merge) {\n      const hfs = this.hardforks()\n      const mergeIndex = hfs.findIndex((hf) => hf.ttd !== null && hf.ttd !== undefined)\n      if (mergeIndex < 0) {\n        throw Error(`Merge hardfork should have been found`)\n      }\n      hfBlock = this.hardforkBlock(hfs[mergeIndex - 1].name)\n    }\n    if (hfBlock === null) {\n      return null\n    }\n    // Next fork block number or null if none available\n    // Logic: if accumulator is still null and on the first occurrence of\n    // a block greater than the current hfBlock set the accumulator,\n    // pass on the accumulator as the final result from this time on\n    const nextHfBlock = this.hardforks().reduce((acc: bigint | null, hf: HardforkConfig) => {\n      // We need to ignore the merge block in our next hardfork calc\n      const block = BigInt(\n        hf.block === null || (hf.ttd !== undefined && hf.ttd !== null) ? 0 : hf.block\n      )\n      // Typescript can't seem to follow that the hfBlock is not null at this point\n      return block > hfBlock! && acc === null ? block : acc\n    }, null)\n    return nextHfBlock\n  }\n\n  /**\n   * True if block number provided is the hardfork change block following the hardfork given or set\n   * @param blockNumber Number of the block to check\n   * @param hardfork Hardfork name, optional if HF set\n   * @returns True if blockNumber is HF block\n   * @deprecated\n   */\n  isNextHardforkBlock(blockNumber: BigIntLike, hardfork?: string | Hardfork): boolean {\n    blockNumber = toType(blockNumber, TypeOutput.BigInt)\n    hardfork = hardfork ?? this._hardfork\n    const nextHardforkBlock = this.nextHardforkBlock(hardfork)\n\n    return nextHardforkBlock === null ? false : nextHardforkBlock === blockNumber\n  }\n\n  /**\n   * Internal helper function to calculate a fork hash\n   * @param hardfork Hardfork name\n   * @param genesisHash Genesis block hash of the chain\n   * @returns Fork hash as hex string\n   */\n  _calcForkHash(hardfork: string | Hardfork, genesisHash: Buffer) {\n    let hfBuffer = Buffer.alloc(0)\n    let prevBlockOrTime = 0\n    for (const hf of this.hardforks()) {\n      const { block, timestamp, name } = hf\n      // Timestamp to be used for timestamp based hfs even if we may bundle\n      // block number with them retrospectively\n      let blockOrTime = timestamp ?? block\n      blockOrTime = blockOrTime !== null ? Number(blockOrTime) : null\n\n      // Skip for chainstart (0), not applied HFs (null) and\n      // when already applied on same blockOrTime HFs\n      // and on the merge since forkhash doesn't change on merge hf\n      if (\n        typeof blockOrTime === 'number' &&\n        blockOrTime !== 0 &&\n        blockOrTime !== prevBlockOrTime &&\n        name !== Hardfork.Merge\n      ) {\n        const hfBlockBuffer = Buffer.from(blockOrTime.toString(16).padStart(16, '0'), 'hex')\n        hfBuffer = Buffer.concat([hfBuffer, hfBlockBuffer])\n        prevBlockOrTime = blockOrTime\n      }\n\n      if (hf.name === hardfork) break\n    }\n    const inputBuffer = Buffer.concat([genesisHash, hfBuffer])\n\n    // CRC32 delivers result as signed (negative) 32-bit integer,\n    // convert to hex string\n    const forkhash = intToBuffer(crc32Buffer(inputBuffer) >>> 0).toString('hex')\n    return `0x${forkhash}`\n  }\n\n  /**\n   * Returns an eth/64 compliant fork hash (EIP-2124)\n   * @param hardfork Hardfork name, optional if HF set\n   * @param genesisHash Genesis block hash of the chain, optional if already defined and not needed to be calculated\n   */\n  forkHash(hardfork?: string | Hardfork, genesisHash?: Buffer): string {\n    hardfork = hardfork ?? this._hardfork\n    const data = this._getHardfork(hardfork)\n    if (\n      data === null ||\n      (data?.block === null && data?.timestamp === undefined && data?.ttd === undefined)\n    ) {\n      const msg = 'No fork hash calculation possible for future hardfork'\n      throw new Error(msg)\n    }\n    if (data?.forkHash !== null && data?.forkHash !== undefined) {\n      return data.forkHash\n    }\n    if (!genesisHash) throw new Error('genesisHash required for forkHash calculation')\n    return this._calcForkHash(hardfork, genesisHash)\n  }\n\n  /**\n   *\n   * @param forkHash Fork hash as a hex string\n   * @returns Array with hardfork data (name, block, forkHash)\n   */\n  hardforkForForkHash(forkHash: string): HardforkConfig | null {\n    const resArray = this.hardforks().filter((hf: HardforkConfig) => {\n      return hf.forkHash === forkHash\n    })\n    return resArray.length >= 1 ? resArray[resArray.length - 1] : null\n  }\n\n  /**\n   * Sets any missing forkHashes on the passed-in {@link Common} instance\n   * @param common The {@link Common} to set the forkHashes for\n   * @param genesisHash The genesis block hash\n   */\n  setForkHashes(genesisHash: Buffer) {\n    for (const hf of this.hardforks()) {\n      const blockOrTime = hf.timestamp ?? hf.block\n      if (\n        (hf.forkHash === null || hf.forkHash === undefined) &&\n        ((blockOrTime !== null && blockOrTime !== undefined) || typeof hf.ttd !== 'undefined')\n      ) {\n        hf.forkHash = this.forkHash(hf.name, genesisHash)\n      }\n    }\n  }\n\n  /**\n   * Returns the Genesis parameters of the current chain\n   * @returns Genesis dictionary\n   */\n  genesis(): GenesisBlockConfig {\n    return this._chainParams.genesis\n  }\n\n  /**\n   * Returns the hardforks for current chain\n   * @returns {Array} Array with arrays of hardforks\n   */\n  hardforks(): HardforkConfig[] {\n    return this._chainParams.hardforks\n  }\n\n  /**\n   * Returns bootstrap nodes for the current chain\n   * @returns {Dictionary} Dict with bootstrap nodes\n   */\n  bootstrapNodes(): BootstrapNodeConfig[] {\n    return this._chainParams.bootstrapNodes\n  }\n\n  /**\n   * Returns DNS networks for the current chain\n   * @returns {String[]} Array of DNS ENR urls\n   */\n  dnsNetworks(): string[] {\n    return this._chainParams.dnsNetworks!\n  }\n\n  /**\n   * Returns the hardfork set\n   * @returns Hardfork name\n   */\n  hardfork(): string | Hardfork {\n    return this._hardfork\n  }\n\n  /**\n   * Returns the Id of current chain\n   * @returns chain Id\n   */\n  chainId(): bigint {\n    return BigInt(this._chainParams.chainId)\n  }\n\n  /**\n   * Returns the name of current chain\n   * @returns chain name (lower case)\n   */\n  chainName(): string {\n    return this._chainParams.name\n  }\n\n  /**\n   * Returns the Id of current network\n   * @returns network Id\n   */\n  networkId(): bigint {\n    return BigInt(this._chainParams.networkId)\n  }\n\n  /**\n   * Returns the active EIPs\n   * @returns List of EIPs\n   */\n  eips(): number[] {\n    return this._eips\n  }\n\n  /**\n   * Returns the consensus type of the network\n   * Possible values: \"pow\"|\"poa\"|\"pos\"\n   *\n   * Note: This value can update along a Hardfork.\n   */\n  consensusType(): string | ConsensusType {\n    const hardfork = this.hardfork()\n\n    let value\n    for (const hfChanges of this.HARDFORK_CHANGES) {\n      if ('consensus' in hfChanges[1]) {\n        value = hfChanges[1]['consensus']['type']\n      }\n      if (hfChanges[0] === hardfork) break\n    }\n    return value ?? this._chainParams['consensus']['type']\n  }\n\n  /**\n   * Returns the concrete consensus implementation\n   * algorithm or protocol for the network\n   * e.g. \"ethash\" for \"pow\" consensus type,\n   * \"clique\" for \"poa\" consensus type or\n   * \"casper\" for \"pos\" consensus type.\n   *\n   * Note: This value can update along a Hardfork.\n   */\n  consensusAlgorithm(): string | ConsensusAlgorithm {\n    const hardfork = this.hardfork()\n\n    let value\n    for (const hfChanges of this.HARDFORK_CHANGES) {\n      if ('consensus' in hfChanges[1]) {\n        value = hfChanges[1]['consensus']['algorithm']\n      }\n      if (hfChanges[0] === hardfork) break\n    }\n    return value ?? (this._chainParams['consensus']['algorithm'] as ConsensusAlgorithm)\n  }\n\n  /**\n   * Returns a dictionary with consensus configuration\n   * parameters based on the consensus algorithm\n   *\n   * Expected returns (parameters must be present in\n   * the respective chain json files):\n   *\n   * ethash: empty object\n   * clique: period, epoch\n   * casper: empty object\n   *\n   * Note: This value can update along a Hardfork.\n   */\n  consensusConfig(): { [key: string]: CliqueConfig | EthashConfig | CasperConfig } {\n    const hardfork = this.hardfork()\n\n    let value\n    for (const hfChanges of this.HARDFORK_CHANGES) {\n      if ('consensus' in hfChanges[1]) {\n        // The config parameter is named after the respective consensus algorithm\n        value = hfChanges[1]['consensus'][hfChanges[1]['consensus']['algorithm']]\n      }\n      if (hfChanges[0] === hardfork) break\n    }\n    return (\n      value ?? this._chainParams['consensus'][this.consensusAlgorithm() as ConsensusAlgorithm] ?? {}\n    )\n  }\n\n  /**\n   * Returns a deep copy of this {@link Common} instance.\n   */\n  copy(): Common {\n    const copy = Object.assign(Object.create(Object.getPrototypeOf(this)), this)\n    copy.removeAllListeners()\n    return copy\n  }\n\n  static _getInitializedChains(customChains?: ChainConfig[]): ChainsConfig {\n    const names: ChainName = {}\n    for (const [name, id] of Object.entries(Chain)) {\n      names[id] = name.toLowerCase()\n    }\n    const chains = { mainnet, ropsten, rinkeby, goerli, sepolia } as ChainsConfig\n    if (customChains) {\n      for (const chain of customChains) {\n        const { name } = chain\n        names[chain.chainId.toString()] = name\n        chains[name] = chain\n      }\n    }\n    chains.names = names\n    return chains\n  }\n}\n","export const EIPs: { [key: number]: any } = {\n  1153: require('./1153.json'),\n  1559: require('./1559.json'),\n  2315: require('./2315.json'),\n  2537: require('./2537.json'),\n  2565: require('./2565.json'),\n  2718: require('./2718.json'),\n  2929: require('./2929.json'),\n  2930: require('./2930.json'),\n  3074: require('./3074.json'),\n  3198: require('./3198.json'),\n  3529: require('./3529.json'),\n  3540: require('./3540.json'),\n  3541: require('./3541.json'),\n  3554: require('./3554.json'),\n  3607: require('./3607.json'),\n  3651: require('./3651.json'),\n  3670: require('./3670.json'),\n  3675: require('./3675.json'),\n  3855: require('./3855.json'),\n  3860: require('./3860.json'),\n  4345: require('./4345.json'),\n  4399: require('./4399.json'),\n  4844: require('./4844.json'),\n  4895: require('./4895.json'),\n  5133: require('./5133.json'),\n}\n","export enum Chain {\n  Mainnet = 1,\n  Ropsten = 3,\n  Rinkeby = 4,\n  Goerli = 5,\n  Sepolia = 11155111,\n}\n\nexport enum Hardfork {\n  Chainstart = 'chainstart',\n  Homestead = 'homestead',\n  Dao = 'dao',\n  TangerineWhistle = 'tangerineWhistle',\n  SpuriousDragon = 'spuriousDragon',\n  Byzantium = 'byzantium',\n  Constantinople = 'constantinople',\n  Petersburg = 'petersburg',\n  Istanbul = 'istanbul',\n  MuirGlacier = 'muirGlacier',\n  Berlin = 'berlin',\n  London = 'london',\n  ArrowGlacier = 'arrowGlacier',\n  GrayGlacier = 'grayGlacier',\n  MergeForkIdTransition = 'mergeForkIdTransition',\n  Merge = 'merge',\n  Shanghai = 'shanghai',\n  ShardingForkDev = 'shardingFork',\n}\n\nexport enum ConsensusType {\n  ProofOfStake = 'pos',\n  ProofOfWork = 'pow',\n  ProofOfAuthority = 'poa',\n}\n\nexport enum ConsensusAlgorithm {\n  Ethash = 'ethash',\n  Clique = 'clique',\n  Casper = 'casper',\n}\n\nexport enum CustomChain {\n  /**\n   * Polygon (Matic) Mainnet\n   *\n   * - [Documentation](https://docs.matic.network/docs/develop/network-details/network)\n   */\n  PolygonMainnet = 'polygon-mainnet',\n\n  /**\n   * Polygon (Matic) Mumbai Testnet\n   *\n   * - [Documentation](https://docs.matic.network/docs/develop/network-details/network)\n   */\n  PolygonMumbai = 'polygon-mumbai',\n\n  /**\n   * Arbitrum Rinkeby Testnet\n   *\n   * - [Documentation](https://developer.offchainlabs.com/docs/public_testnet)\n   */\n  ArbitrumRinkebyTestnet = 'arbitrum-rinkeby-testnet',\n\n  /**\n   * Arbitrum One - mainnet for Arbitrum roll-up\n   *\n   * - [Documentation](https://developer.offchainlabs.com/public-chains)\n   */\n  ArbitrumOne = 'arbitrum-one',\n\n  /**\n   * xDai EVM sidechain with a native stable token\n   *\n   * - [Documentation](https://www.xdaichain.com/)\n   */\n  xDaiChain = 'x-dai-chain',\n\n  /**\n   * Optimistic Kovan - testnet for Optimism roll-up\n   *\n   * - [Documentation](https://community.optimism.io/docs/developers/tutorials.html)\n   */\n  OptimisticKovan = 'optimistic-kovan',\n\n  /**\n   * Optimistic Ethereum - mainnet for Optimism roll-up\n   *\n   * - [Documentation](https://community.optimism.io/docs/developers/tutorials.html)\n   */\n  OptimisticEthereum = 'optimistic-ethereum',\n}\n","export const hardforks = {\n  chainstart: require('./chainstart.json'),\n  homestead: require('./homestead.json'),\n  dao: require('./dao.json'),\n  tangerineWhistle: require('./tangerineWhistle.json'),\n  spuriousDragon: require('./spuriousDragon.json'),\n  byzantium: require('./byzantium.json'),\n  constantinople: require('./constantinople.json'),\n  petersburg: require('./petersburg.json'),\n  istanbul: require('./istanbul.json'),\n  muirGlacier: require('./muirGlacier.json'),\n  berlin: require('./berlin.json'),\n  london: require('./london.json'),\n  shanghai: require('./shanghai.json'),\n  arrowGlacier: require('./arrowGlacier.json'),\n  grayGlacier: require('./grayGlacier.json'),\n  mergeForkIdTransition: require('./mergeForkIdTransition.json'),\n  merge: require('./merge.json'),\n  shardingFork: require('./sharding.json'),\n}\n","export * from './common'\nexport * from './enums'\nexport * from './types'\nexport * from './utils'\n","import { intToHex, isHexPrefixed, stripHexPrefix } from '@ethereumjs/util'\n\nimport { Hardfork } from './enums'\n\ntype ConfigHardfork =\n  | { name: string; block: null; timestamp: number }\n  | { name: string; block: number; timestamp?: number }\n/**\n * Transforms Geth formatted nonce (i.e. hex string) to 8 byte 0x-prefixed string used internally\n * @param nonce string parsed from the Geth genesis file\n * @returns nonce as a 0x-prefixed 8 byte string\n */\nfunction formatNonce(nonce: string): string {\n  if (!nonce || nonce === '0x0') {\n    return '0x0000000000000000'\n  }\n  if (isHexPrefixed(nonce)) {\n    return '0x' + stripHexPrefix(nonce).padStart(16, '0')\n  }\n  return '0x' + nonce.padStart(16, '0')\n}\n\n/**\n * Converts Geth genesis parameters to an EthereumJS compatible `CommonOpts` object\n * @param json object representing the Geth genesis file\n * @param optional mergeForkIdPostMerge which clarifies the placement of MergeForkIdTransition\n * hardfork, which by default is post merge as with the merged eth networks but could also come\n * before merge like in kiln genesis\n * @returns genesis parameters in a `CommonOpts` compliant object\n */\nfunction parseGethParams(json: any, mergeForkIdPostMerge: boolean = true) {\n  const {\n    name,\n    config,\n    difficulty,\n    mixHash,\n    gasLimit,\n    coinbase,\n    baseFeePerGas,\n  }: {\n    name: string\n    config: any\n    difficulty: string\n    mixHash: string\n    gasLimit: string\n    coinbase: string\n    baseFeePerGas: string\n  } = json\n  let { extraData, timestamp, nonce }: { extraData: string; timestamp: string; nonce: string } =\n    json\n  const genesisTimestamp = Number(timestamp)\n  const { chainId }: { chainId: number } = config\n\n  // geth is not strictly putting empty fields with a 0x prefix\n  if (extraData === '') {\n    extraData = '0x'\n  }\n  // geth may use number for timestamp\n  if (!isHexPrefixed(timestamp)) {\n    timestamp = intToHex(parseInt(timestamp))\n  }\n  // geth may not give us a nonce strictly formatted to an 8 byte hex string\n  if (nonce.length !== 18) {\n    nonce = formatNonce(nonce)\n  }\n\n  // EIP155 and EIP158 are both part of Spurious Dragon hardfork and must occur at the same time\n  // but have different configuration parameters in geth genesis parameters\n  if (config.eip155Block !== config.eip158Block) {\n    throw new Error(\n      'EIP155 block number must equal EIP 158 block number since both are part of SpuriousDragon hardfork and the client only supports activating the full hardfork'\n    )\n  }\n\n  const params = {\n    name,\n    chainId,\n    networkId: chainId,\n    genesis: {\n      timestamp,\n      gasLimit: parseInt(gasLimit), // geth gasLimit and difficulty are hex strings while ours are `number`s\n      difficulty: parseInt(difficulty),\n      nonce,\n      extraData,\n      mixHash,\n      coinbase,\n      baseFeePerGas,\n    },\n    hardfork: undefined as string | undefined,\n    hardforks: [] as ConfigHardfork[],\n    bootstrapNodes: [],\n    consensus:\n      config.clique !== undefined\n        ? {\n            type: 'poa',\n            algorithm: 'clique',\n            clique: {\n              // The recent geth genesis seems to be using blockperiodseconds\n              // and epochlength for clique specification\n              // see: https://hackmd.io/PqZgMpnkSWCWv5joJoFymQ\n              period: config.clique.period ?? config.clique.blockperiodseconds,\n              epoch: config.clique.epoch ?? config.clique.epochlength,\n            },\n          }\n        : {\n            type: 'pow',\n            algorithm: 'ethash',\n            ethash: {},\n          },\n  }\n\n  const forkMap: { [key: string]: { name: string; postMerge?: boolean; isTimestamp?: boolean } } = {\n    [Hardfork.Homestead]: { name: 'homesteadBlock' },\n    [Hardfork.Dao]: { name: 'daoForkBlock' },\n    [Hardfork.TangerineWhistle]: { name: 'eip150Block' },\n    [Hardfork.SpuriousDragon]: { name: 'eip155Block' },\n    [Hardfork.Byzantium]: { name: 'byzantiumBlock' },\n    [Hardfork.Constantinople]: { name: 'constantinopleBlock' },\n    [Hardfork.Petersburg]: { name: 'petersburgBlock' },\n    [Hardfork.Istanbul]: { name: 'istanbulBlock' },\n    [Hardfork.MuirGlacier]: { name: 'muirGlacierBlock' },\n    [Hardfork.Berlin]: { name: 'berlinBlock' },\n    [Hardfork.London]: { name: 'londonBlock' },\n    [Hardfork.MergeForkIdTransition]: { name: 'mergeForkBlock', postMerge: mergeForkIdPostMerge },\n    [Hardfork.Shanghai]: { name: 'shanghaiTime', postMerge: true, isTimestamp: true },\n    [Hardfork.ShardingForkDev]: { name: 'shardingForkTime', postMerge: true, isTimestamp: true },\n  }\n\n  // forkMapRev is the map from config field name to Hardfork\n  const forkMapRev = Object.keys(forkMap).reduce((acc, elem) => {\n    acc[forkMap[elem].name] = elem\n    return acc\n  }, {} as { [key: string]: string })\n  const configHardforkNames = Object.keys(config).filter(\n    (key) => forkMapRev[key] !== undefined && config[key] !== undefined && config[key] !== null\n  )\n\n  params.hardforks = configHardforkNames\n    .map((nameBlock) => ({\n      name: forkMapRev[nameBlock],\n      block:\n        forkMap[forkMapRev[nameBlock]].isTimestamp === true || typeof config[nameBlock] !== 'number'\n          ? null\n          : config[nameBlock],\n      timestamp:\n        forkMap[forkMapRev[nameBlock]].isTimestamp === true && typeof config[nameBlock] === 'number'\n          ? config[nameBlock]\n          : undefined,\n    }))\n    .filter((fork) => fork.block !== null || fork.timestamp !== undefined) as ConfigHardfork[]\n\n  params.hardforks.sort(function (a: ConfigHardfork, b: ConfigHardfork) {\n    return (a.block ?? Infinity) - (b.block ?? Infinity)\n  })\n\n  params.hardforks.sort(function (a: ConfigHardfork, b: ConfigHardfork) {\n    return (a.timestamp ?? genesisTimestamp) - (b.timestamp ?? genesisTimestamp)\n  })\n\n  if (config.terminalTotalDifficulty !== undefined) {\n    // Following points need to be considered for placement of merge hf\n    // - Merge hardfork can't be placed at genesis\n    // - Place merge hf before any hardforks that require CL participation for e.g. withdrawals\n    // - Merge hardfork has to be placed just after genesis if any of the genesis hardforks make CL\n    //   necessary for e.g. withdrawals\n    const mergeConfig = {\n      name: Hardfork.Merge,\n      ttd: config.terminalTotalDifficulty,\n      block: null,\n    }\n\n    // Merge hardfork has to be placed before first hardfork that is dependent on merge\n    const postMergeIndex = params.hardforks.findIndex(\n      (hf: any) => forkMap[hf.name]?.postMerge === true\n    )\n    if (postMergeIndex !== -1) {\n      params.hardforks.splice(postMergeIndex, 0, mergeConfig as unknown as ConfigHardfork)\n    } else {\n      params.hardforks.push(mergeConfig as unknown as ConfigHardfork)\n    }\n  }\n\n  const latestHardfork = params.hardforks.length > 0 ? params.hardforks.slice(-1)[0] : undefined\n  params.hardfork = latestHardfork?.name\n  params.hardforks.unshift({ name: Hardfork.Chainstart, block: 0 })\n\n  return params\n}\n\n/**\n * Parses a genesis.json exported from Geth into parameters for Common instance\n * @param json representing the Geth genesis file\n * @param name optional chain name\n * @returns parsed params\n */\nexport function parseGethGenesis(json: any, name?: string, mergeForkIdPostMerge?: boolean) {\n  try {\n    if (['config', 'difficulty', 'gasLimit', 'alloc'].some((field) => !(field in json))) {\n      throw new Error('Invalid format, expected geth genesis fields missing')\n    }\n    if (name !== undefined) {\n      json.name = name\n    }\n    return parseGethParams(json, mergeForkIdPostMerge)\n  } catch (e: any) {\n    throw new Error(`Error parsing parameters file: ${e.message}`)\n  }\n}\n","export const CHAIN_NAMESPACES = {\n  EIP155: \"eip155\",\n  SOLANA: \"solana\",\n  OTHER: \"other\",\n} as const;\n// eip155 for all evm chains\nexport type ChainNamespaceType = (typeof CHAIN_NAMESPACES)[keyof typeof CHAIN_NAMESPACES];\n\nexport const ADAPTER_NAMESPACES = {\n  EIP155: \"eip155\",\n  SOLANA: \"solana\",\n  MULTICHAIN: \"multichain\",\n} as const;\n// eip155 for all evm chains\nexport type AdapterNamespaceType = (typeof ADAPTER_NAMESPACES)[keyof typeof ADAPTER_NAMESPACES];\n\nexport type CustomChainConfig = {\n  chainNamespace: ChainNamespaceType;\n  /**\n   * The chain id of the chain\n   */\n  chainId: string;\n  /**\n   * RPC target Url for the chain\n   */\n  rpcTarget: string;\n  /**\n   * Display Name for the chain\n   */\n  displayName: string;\n  /**\n   * Url of the block explorer\n   */\n  blockExplorer: string;\n  /**\n   * Default currency ticker of the network (e.g: ETH)\n   */\n  ticker: string;\n  /**\n   * Name for currency ticker (e.g: `Ethereum`)\n   */\n  tickerName: string;\n  /**\n   * Number of decimals for the currency ticker (e.g: 18)\n   */\n  decimals?: number;\n};\n","import { CHAIN_NAMESPACES, ChainNamespaceType, CustomChainConfig } from \"./IChainInterface\";\nconst getDefaultNetworkId = (chainNamespace: ChainNamespaceType): number => {\n  if (chainNamespace === CHAIN_NAMESPACES.EIP155) {\n    return 1;\n  } else if (chainNamespace === CHAIN_NAMESPACES.SOLANA) {\n    return 1;\n  }\n  throw new Error(`Chain namespace ${chainNamespace} is not supported`);\n};\n\nexport const getEvmChainConfig = (chainId: number): CustomChainConfig | null => {\n  const chainNamespace = CHAIN_NAMESPACES.EIP155;\n  if (chainId === 1) {\n    return {\n      chainNamespace,\n      chainId: \"0x1\",\n      rpcTarget: `https://rpc.ankr.com/eth`,\n      displayName: \"Ethereum Mainnet\",\n      blockExplorer: \"https://etherscan.io/\",\n      ticker: \"ETH\",\n      tickerName: \"Ethereum\",\n      decimals: 18,\n    };\n  }\n  if (chainId === 3) {\n    return {\n      chainNamespace,\n      chainId: \"0x3\",\n      rpcTarget: `https://rpc.ankr.com/eth_ropsten`,\n      displayName: \"Ropsten Testnet\",\n      blockExplorer: \"https://ropsten.etherscan.io/\",\n      ticker: \"ETH\",\n      tickerName: \"Ethereum\",\n      decimals: 18,\n    };\n  }\n  if (chainId === 4) {\n    return {\n      chainNamespace,\n      chainId: \"0x4\",\n      rpcTarget: `https://rpc.ankr.com/eth_rinkeby`,\n      displayName: \"Rinkeby Testnet\",\n      blockExplorer: \"https://rinkeby.etherscan.io/\",\n      ticker: \"ETH\",\n      tickerName: \"Ethereum\",\n      decimals: 18,\n    };\n  }\n  if (chainId === 5) {\n    return {\n      chainNamespace,\n      chainId: \"0x5\",\n      rpcTarget: `https://rpc.ankr.com/eth_goerli`,\n      displayName: \"Goerli Testnet\",\n      blockExplorer: \"https://goerli.etherscan.io/\",\n      ticker: \"ETH\",\n      tickerName: \"Ethereum\",\n      decimals: 18,\n    };\n  }\n  if (chainId === 137) {\n    return {\n      chainNamespace,\n      chainId: \"0x89\",\n      rpcTarget: \"https://rpc.ankr.com/polygon\",\n      displayName: \"Polygon Mainnet\",\n      blockExplorer: \"https://polygonscan.com\",\n      ticker: \"MATIC\",\n      tickerName: \"Polygon\",\n    };\n  }\n  if (chainId === 80001) {\n    return {\n      chainNamespace,\n      chainId: \"0x13881\",\n      rpcTarget: \"https://rpc.ankr.com/polygon_mumbai\",\n      displayName: \"Polygon Mumbai Testnet\",\n      blockExplorer: \"https://mumbai.polygonscan.com/\",\n      ticker: \"MATIC\",\n      tickerName: \"Polygon\",\n      decimals: 18,\n    };\n  }\n  if (chainId === 56) {\n    return {\n      chainNamespace,\n      chainId: \"0x38\",\n      rpcTarget: \"https://rpc.ankr.com/bsc\",\n      displayName: \"Binance SmartChain Mainnet\",\n      blockExplorer: \"https://bscscan.com\",\n      ticker: \"BNB\",\n      tickerName: \"Binance SmartChain\",\n      decimals: 18,\n    };\n  }\n  if (chainId === 97) {\n    return {\n      chainNamespace,\n      chainId: \"0x61\",\n      rpcTarget: \"https://rpc.ankr.com/bsc_testnet_chapel\",\n      displayName: \"Binance SmartChain Testnet\",\n      blockExplorer: \"https://testnet.bscscan.com\",\n      ticker: \"BNB\",\n      tickerName: \"Binance SmartChain\",\n      decimals: 18,\n    };\n  }\n  if (chainId === 25) {\n    return {\n      chainNamespace,\n      chainId: \"0x19\",\n      rpcTarget: \"https://rpc.cronos.org\",\n      displayName: \"Cronos Mainnet\",\n      blockExplorer: \"https://cronoscan.com/\",\n      ticker: \"CRO\",\n      tickerName: \"Cronos\",\n    };\n  }\n  if (chainId === 338) {\n    return {\n      chainNamespace,\n      chainId: \"0x152\",\n      rpcTarget: \"https://rpc-t3.cronos.org/\",\n      displayName: \"Cronos Testnet\",\n      blockExplorer: \"https://cronoscan.com/\",\n      ticker: \"CRO\",\n      tickerName: \"Cronos\",\n      decimals: 18,\n    };\n  }\n  if (chainId === 8217) {\n    return {\n      chainNamespace,\n      chainId: \"0x2019\",\n      rpcTarget: \"https://public-node-api.klaytnapi.com/v1/cypress\",\n      displayName: \"Klaytn Mainnet\",\n      blockExplorer: \"https://scope.klaytn.com\",\n      ticker: \"KLAY\",\n      tickerName: \"Klaytn\",\n      decimals: 18,\n    };\n  }\n\n  return null;\n};\n\nexport const getSolanaChainConfig = (chainId: number): CustomChainConfig | null => {\n  const chainNamespace = CHAIN_NAMESPACES.SOLANA;\n  if (chainId === 1) {\n    return {\n      chainNamespace,\n      chainId: \"0x1\",\n      rpcTarget: \"https://rpc.ankr.com/solana\",\n      displayName: \"Solana Mainnet\",\n      blockExplorer: \"https://explorer.solana.com\",\n      ticker: \"SOL\",\n      tickerName: \"Solana\",\n      decimals: 9,\n    };\n  } else if (chainId === 2) {\n    return {\n      chainNamespace,\n      chainId: \"0x2\",\n      rpcTarget: \"https://api.testnet.solana.com\",\n      displayName: \"Solana Testnet\",\n      blockExplorer: \"https://explorer.solana.com?cluster=testnet\",\n      ticker: \"SOL\",\n      tickerName: \"Solana\",\n      decimals: 9,\n    };\n  } else if (chainId === 3) {\n    return {\n      chainNamespace,\n      chainId: \"0x3\",\n      rpcTarget: \"https://api.devnet.solana.com\",\n      displayName: \"Solana Devnet\",\n      blockExplorer: \"https://explorer.solana.com?cluster=devnet\",\n      ticker: \"SOL\",\n      tickerName: \"Solana\",\n      decimals: 9,\n    };\n  }\n\n  return null;\n};\n\nexport const getChainConfig = (chainNamespace: ChainNamespaceType, chainId?: number | string): CustomChainConfig | null => {\n  if (chainNamespace === CHAIN_NAMESPACES.OTHER) return null;\n  const finalChainId = chainId ? (typeof chainId === \"number\" ? chainId : parseInt(chainId, 16)) : getDefaultNetworkId(chainNamespace);\n  if (chainNamespace === CHAIN_NAMESPACES.EIP155) {\n    return getEvmChainConfig(finalChainId);\n  } else if (chainNamespace === CHAIN_NAMESPACES.SOLANA) {\n    return getSolanaChainConfig(finalChainId);\n  }\n  return null;\n};\n","import { CustomError } from \"ts-custom-error\";\n\n// @flow\nexport interface IWeb3AuthError extends CustomError {\n  code: number;\n  message: string;\n  toString(): string;\n}\n\nexport type ErrorCodes = {\n  [key: number]: string;\n};\n\nexport abstract class Web3AuthError extends CustomError implements IWeb3AuthError {\n  code: number;\n\n  message: string;\n\n  public constructor(code: number, message?: string) {\n    // takes care of stack and proto\n    super(message);\n\n    this.code = code;\n    this.message = message || \"\";\n    // Set name explicitly as minification can mangle class names\n    Object.defineProperty(this, \"name\", { value: \"Web3AuthError\" });\n  }\n\n  toJSON(): IWeb3AuthError {\n    return {\n      name: this.name,\n      code: this.code,\n      message: this.message,\n    };\n  }\n\n  toString(): string {\n    return JSON.stringify(this.toJSON());\n  }\n}\n\nexport class WalletInitializationError extends Web3AuthError {\n  protected static messages: ErrorCodes = {\n    5000: \"Custom\",\n    5001: \"Wallet is not found\",\n    5002: \"Wallet is not installed\",\n    5003: \"Wallet is not ready yet\",\n    5004: \"Wallet window is blocked\",\n    5005: \"Wallet window has been closed by the user\",\n    5006: \"Incompatible chain namespace provided\",\n    5007: \"Adapter has already been included\",\n    5008: \"Invalid provider Config\",\n    5009: \"Provider is not ready yet\",\n    5010: \"Failed to connect with rpc url\",\n    5011: \"Invalid params passed in\",\n    5013: \"Invalid network provided\",\n  };\n\n  public constructor(code: number, message?: string) {\n    // takes care of stack and proto\n    super(code, message);\n\n    // Set name explicitly as minification can mangle class names\n    Object.defineProperty(this, \"name\", { value: \"WalletInitializationError\" });\n  }\n\n  public static fromCode(code: number, extraMessage = \"\"): IWeb3AuthError {\n    return new WalletInitializationError(code, `${WalletInitializationError.messages[code]}, ${extraMessage}`);\n  }\n\n  // Custom methods\n  public static notFound(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5001, extraMessage);\n  }\n\n  public static notInstalled(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5002, extraMessage);\n  }\n\n  public static notReady(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5003, extraMessage);\n  }\n\n  public static windowBlocked(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5004, extraMessage);\n  }\n\n  public static windowClosed(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5005, extraMessage);\n  }\n\n  public static incompatibleChainNameSpace(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5006, extraMessage);\n  }\n\n  public static duplicateAdapterError(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5007, extraMessage);\n  }\n\n  public static invalidProviderConfigError(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5008, extraMessage);\n  }\n\n  public static providerNotReadyError(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5009, extraMessage);\n  }\n\n  public static rpcConnectionError(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5010, extraMessage);\n  }\n\n  public static invalidParams(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5011, extraMessage);\n  }\n\n  public static invalidNetwork(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5013, extraMessage);\n  }\n}\n\n/**\n * wallet login errors\n */\n\nexport class WalletLoginError extends Web3AuthError {\n  protected static messages: ErrorCodes = {\n    5000: \"Custom\",\n    5111: \"Failed to connect with wallet\",\n    5112: \"Failed to disconnect from wallet\",\n    5113: \"Wallet is not connected\",\n    5114: \"Wallet popup has been closed by the user\",\n    5115: \"User has already enabled mfa, please use the @web3auth/web3auth-web sdk for login with mfa\",\n  };\n\n  public constructor(code: number, message?: string) {\n    // takes care of stack and proto\n    super(code, message);\n\n    // Set name explicitly as minification can mangle class names\n    Object.defineProperty(this, \"name\", { value: \"WalletLoginError\" });\n  }\n\n  public static fromCode(code: number, extraMessage = \"\"): IWeb3AuthError {\n    return new WalletLoginError(code, `${WalletLoginError.messages[code]}. ${extraMessage}`);\n  }\n\n  public static connectionError(extraMessage = \"\"): IWeb3AuthError {\n    return WalletLoginError.fromCode(5111, extraMessage);\n  }\n\n  public static disconnectionError(extraMessage = \"\"): IWeb3AuthError {\n    return WalletLoginError.fromCode(5112, extraMessage);\n  }\n\n  public static notConnectedError(extraMessage = \"\"): IWeb3AuthError {\n    return WalletLoginError.fromCode(5113, extraMessage);\n  }\n\n  public static popupClosed(extraMessage = \"\"): IWeb3AuthError {\n    return WalletLoginError.fromCode(5114, extraMessage);\n  }\n\n  public static mfaEnabled(extraMessage = \"\"): IWeb3AuthError {\n    return WalletLoginError.fromCode(5115, extraMessage);\n  }\n}\n","export const MULTI_CHAIN_ADAPTERS = {\n  OPENLOGIN: \"openlogin\",\n  WALLET_CONNECT_V1: \"wallet-connect-v1\",\n  WALLET_CONNECT_V2: \"wallet-connect-v2\",\n};\n\nexport const SOLANA_ADAPTERS = {\n  TORUS_SOLANA: \"torus-solana\",\n  PHANTOM: \"phantom\",\n  SOLFLARE: \"solflare\",\n  SLOPE: \"slope\",\n  ...MULTI_CHAIN_ADAPTERS,\n};\n\nexport const EVM_ADAPTERS = {\n  TORUS_EVM: \"torus-evm\",\n  METAMASK: \"metamask\",\n  COINBASE: \"coinbase\",\n  ...MULTI_CHAIN_ADAPTERS,\n};\n\nexport const WALLET_ADAPTERS = {\n  ...EVM_ADAPTERS,\n  ...SOLANA_ADAPTERS,\n};\nexport type WALLET_ADAPTER_TYPE = (typeof WALLET_ADAPTERS)[keyof typeof WALLET_ADAPTERS];\nexport type SOLANA_ADAPTER_TYPE = (typeof SOLANA_ADAPTERS)[keyof typeof SOLANA_ADAPTERS];\nexport type EVM_ADAPTER_TYPE = (typeof EVM_ADAPTERS)[keyof typeof EVM_ADAPTERS];\nexport type MULTI_CHAIN_ADAPTER_TYPE = (typeof MULTI_CHAIN_ADAPTERS)[keyof typeof MULTI_CHAIN_ADAPTERS];\n\nexport const ADAPTER_NAMES = {\n  [MULTI_CHAIN_ADAPTERS.OPENLOGIN]: \"OpenLogin\",\n  [MULTI_CHAIN_ADAPTERS.WALLET_CONNECT_V1]: \"Wallet Connect v1\",\n  [MULTI_CHAIN_ADAPTERS.WALLET_CONNECT_V2]: \"Wallet Connect v2\",\n  [SOLANA_ADAPTERS.TORUS_SOLANA]: \"Torus\",\n  [SOLANA_ADAPTERS.PHANTOM]: \"Phantom\",\n  [SOLANA_ADAPTERS.SOLFLARE]: \"Solflare\",\n  [SOLANA_ADAPTERS.SLOPE]: \"Slope\",\n  [EVM_ADAPTERS.TORUS_EVM]: \"Torus\",\n  [EVM_ADAPTERS.METAMASK]: \"Metamask\",\n  [EVM_ADAPTERS.COINBASE]: \"Coinbase\",\n};\n","import { OPENLOGIN_NETWORK, OPENLOGIN_NETWORK_TYPE, OpenloginUserInfo } from \"@toruslabs/openlogin\";\nimport { SafeEventEmitter } from \"@toruslabs/openlogin-jrpc\";\n\nimport { getChainConfig } from \"../chain/config\";\nimport { AdapterNamespaceType, CHAIN_NAMESPACES, ChainNamespaceType, CustomChainConfig } from \"../chain/IChainInterface\";\nimport { WalletInitializationError, WalletLoginError } from \"../errors\";\nimport { SafeEventEmitterProvider } from \"../provider/IProvider\";\nimport { WALLET_ADAPTERS } from \"../wallet\";\n\nexport type UserInfo = OpenloginUserInfo;\n\nexport const ADAPTER_CATEGORY = {\n  EXTERNAL: \"external\",\n  IN_APP: \"in_app\",\n} as const;\nexport type ADAPTER_CATEGORY_TYPE = (typeof ADAPTER_CATEGORY)[keyof typeof ADAPTER_CATEGORY];\n\nexport interface AdapterInitOptions {\n  /**\n   * Whether to auto connect to the adapter based on redirect mode or saved adapters\n   */\n  autoConnect?: boolean;\n}\n\nexport const ADAPTER_STATUS = {\n  NOT_READY: \"not_ready\",\n  READY: \"ready\",\n  CONNECTING: \"connecting\",\n  CONNECTED: \"connected\",\n  DISCONNECTED: \"disconnected\",\n  ERRORED: \"errored\",\n} as const;\n\nexport const ADAPTER_EVENTS = {\n  ...ADAPTER_STATUS,\n  ADAPTER_DATA_UPDATED: \"adapter_data_updated\",\n} as const;\nexport type ADAPTER_STATUS_TYPE = (typeof ADAPTER_STATUS)[keyof typeof ADAPTER_STATUS];\n\nexport type CONNECTED_EVENT_DATA = {\n  adapter: string;\n  reconnected: boolean;\n};\n\nexport type UserAuthInfo = { idToken: string };\n\nexport interface BaseAdapterSettings {\n  clientId?: string;\n  sessionTime?: number;\n  chainConfig?: Partial<CustomChainConfig> & Pick<CustomChainConfig, \"chainNamespace\">;\n  web3AuthNetwork?: OPENLOGIN_NETWORK_TYPE;\n  useCoreKitKey?: boolean;\n}\n\nexport interface IAdapter<T> extends SafeEventEmitter {\n  adapterNamespace: AdapterNamespaceType;\n  currentChainNamespace: ChainNamespaceType;\n  chainConfigProxy: CustomChainConfig | null;\n  type: ADAPTER_CATEGORY_TYPE;\n  name: string;\n  sessionTime: number;\n  web3AuthNetwork: OPENLOGIN_NETWORK_TYPE;\n  clientId: string;\n  status: ADAPTER_STATUS_TYPE;\n  provider: SafeEventEmitterProvider | null;\n  adapterData?: unknown;\n  init(options?: AdapterInitOptions): Promise<void>;\n  disconnect(options?: { cleanup: boolean }): Promise<void>;\n  connect(params?: T): Promise<SafeEventEmitterProvider | null>;\n  getUserInfo(): Promise<Partial<UserInfo>>;\n  setAdapterSettings(adapterSettings: BaseAdapterSettings): void;\n  authenticateUser(): Promise<UserAuthInfo>;\n}\n\nexport abstract class BaseAdapter<T> extends SafeEventEmitter implements IAdapter<T> {\n  public adapterData?: unknown = {};\n\n  public sessionTime = 86400;\n\n  public clientId: string;\n\n  public web3AuthNetwork: OPENLOGIN_NETWORK_TYPE = OPENLOGIN_NETWORK.MAINNET;\n\n  protected rehydrated = false;\n\n  // should be added in constructor or from setAdapterSettings function\n  // before calling init function.\n  protected chainConfig: CustomChainConfig | null = null;\n\n  public abstract adapterNamespace: AdapterNamespaceType;\n\n  public abstract currentChainNamespace: ChainNamespaceType;\n\n  public abstract type: ADAPTER_CATEGORY_TYPE;\n\n  public abstract name: string;\n\n  public abstract status: ADAPTER_STATUS_TYPE;\n\n  constructor(options: BaseAdapterSettings = {}) {\n    super();\n    this.setAdapterSettings(options);\n  }\n\n  get chainConfigProxy(): CustomChainConfig | null {\n    return this.chainConfig ? { ...this.chainConfig } : null;\n  }\n\n  public abstract get provider(): SafeEventEmitterProvider | null;\n\n  public setAdapterSettings(options: BaseAdapterSettings): void {\n    if (this.status === ADAPTER_STATUS.READY) return;\n    if (options?.sessionTime) {\n      this.sessionTime = options.sessionTime;\n    }\n    if (options?.clientId) {\n      this.clientId = options.clientId;\n    }\n    if (options?.web3AuthNetwork) {\n      this.web3AuthNetwork = options.web3AuthNetwork;\n    }\n    const customChainConfig = options.chainConfig;\n    if (customChainConfig) {\n      if (!customChainConfig.chainNamespace) throw WalletInitializationError.notReady(\"ChainNamespace is required while setting chainConfig\");\n      this.currentChainNamespace = customChainConfig.chainNamespace;\n      // chainId is optional in this function.\n      // we go with mainnet chainId by default.\n      const defaultChainConfig = getChainConfig(customChainConfig.chainNamespace, customChainConfig.chainId);\n      // NOTE: It is being forced casted to CustomChainConfig to handle OTHER Chainnamespace\n      // where chainConfig is not required.\n      const finalChainConfig = { ...(defaultChainConfig || {}), ...customChainConfig } as CustomChainConfig;\n\n      this.chainConfig = finalChainConfig;\n    }\n  }\n\n  checkConnectionRequirements(): void {\n    // we reconnect without killing existing wallet connect session on calling connect again.\n    if (this.name === WALLET_ADAPTERS.WALLET_CONNECT_V1 && this.status === ADAPTER_STATUS.CONNECTING) return;\n    else if (this.status === ADAPTER_STATUS.CONNECTING) throw WalletInitializationError.notReady(\"Already connecting\");\n\n    if (this.status === ADAPTER_STATUS.CONNECTED) throw WalletLoginError.connectionError(\"Already connected\");\n    if (this.status !== ADAPTER_STATUS.READY)\n      throw WalletLoginError.connectionError(\n        \"Wallet adapter is not ready yet, Please wait for init function to resolve before calling connect/connectTo function\"\n      );\n  }\n\n  checkInitializationRequirements(): void {\n    if (!this.clientId) throw WalletInitializationError.invalidParams(\"Please initialize Web3Auth with a valid clientId in constructor\");\n    if (!this.chainConfig) throw WalletInitializationError.invalidParams(\"rpcTarget is required in chainConfig\");\n    if (!this.chainConfig.rpcTarget && this.chainConfig.chainNamespace !== CHAIN_NAMESPACES.OTHER) {\n      throw WalletInitializationError.invalidParams(\"rpcTarget is required in chainConfig\");\n    }\n\n    if (!this.chainConfig.chainId && this.chainConfig.chainNamespace !== CHAIN_NAMESPACES.OTHER) {\n      throw WalletInitializationError.invalidParams(\"chainID is required in chainConfig\");\n    }\n    if (this.status === ADAPTER_STATUS.NOT_READY) return;\n    if (this.status === ADAPTER_STATUS.CONNECTED) throw WalletInitializationError.notReady(\"Already connected\");\n    if (this.status === ADAPTER_STATUS.READY) throw WalletInitializationError.notReady(\"Adapter is already initialized\");\n  }\n\n  checkDisconnectionRequirements(): void {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.disconnectionError(\"Not connected with wallet\");\n  }\n\n  updateAdapterData(data: unknown): void {\n    this.adapterData = data;\n    this.emit(ADAPTER_EVENTS.ADAPTER_DATA_UPDATED, { adapterName: this.name, data });\n  }\n\n  abstract init(options?: AdapterInitOptions): Promise<void>;\n  abstract connect(params?: T): Promise<SafeEventEmitterProvider | null>;\n  abstract disconnect(): Promise<void>;\n  abstract getUserInfo(): Promise<Partial<UserInfo>>;\n  abstract authenticateUser(): Promise<UserAuthInfo>;\n}\n\nexport interface BaseAdapterConfig {\n  label: string;\n  showOnModal?: boolean;\n  showOnMobile?: boolean;\n  showOnDesktop?: boolean;\n}\n\nexport type LoginMethodConfig = Record<\n  string,\n  {\n    /**\n     * Display Name. If not provided, we use the default for openlogin app\n     */\n    name: string;\n    /**\n     * Description for button. If provided, it renders as a full length button. else, icon button\n     */\n    description?: string;\n    /**\n     * Logo to be shown on mouse hover. If not provided, we use the default for openlogin app\n     */\n    logoHover?: string;\n    /**\n     * Logo to be shown on dark background (dark theme). If not provided, we use the default for openlogin app\n     */\n    logoLight?: string;\n    /**\n     * Logo to be shown on light background (light theme). If not provided, we use the default for openlogin app\n     */\n    logoDark?: string;\n    /**\n     * Show login button on the main list\n     */\n    mainOption?: boolean;\n    /**\n     * Whether to show the login button on modal or not\n     */\n    showOnModal?: boolean;\n    /**\n     * Whether to show the login button on desktop\n     */\n    showOnDesktop?: boolean;\n    /**\n     * Whether to show the login button on mobile\n     */\n    showOnMobile?: boolean;\n  }\n>;\n\nexport interface IWalletConnectExtensionAdapter {\n  name: string;\n  chains: ChainNamespaceType[];\n  logo: string;\n  mobile: {\n    native: string;\n    universal: string;\n  };\n  desktop: {\n    native: string;\n    universal: string;\n  };\n}\n\nexport interface WalletConnectV1Data {\n  uri: string;\n  extensionAdapters: IWalletConnectExtensionAdapter[];\n}\n\nexport interface IAdapterDataEvent {\n  adapterName: string;\n  data: unknown;\n}\n\nexport interface INetworkSwitchProvider {\n  addChain(chainConfig: CustomChainConfig): Promise<void>;\n  switchChain(chainId: string): Promise<void>;\n}\nexport interface INetworkSwitch {\n  addNetwork(params: { chainConfig: CustomChainConfig; appOrigin: string }): Promise<boolean>;\n  switchNetwork(params: { currentChainConfig: CustomChainConfig; newChainConfig: Partial<CustomChainConfig>; appOrigin: string }): Promise<boolean>;\n}\n\nexport abstract class BaseNetworkSwitch implements INetworkSwitch {\n  abstract switchNetwork(params: {\n    currentChainConfig: CustomChainConfig;\n    newChainConfig: Partial<CustomChainConfig>;\n    appOrigin: string;\n  }): Promise<boolean>;\n\n  abstract addNetwork(params: { chainConfig: CustomChainConfig; appOrigin: string }): Promise<boolean>;\n}\n","import loglevel from \"loglevel\";\n\nexport default loglevel.getLogger(\"web3auth-logger\");\n","export function storageAvailable(type: \"sessionStorage\" | \"localStorage\"): boolean {\n  let storageExists = false;\n  let storageLength = 0;\n  let storage: Storage;\n  try {\n    storage = (window as any)[type];\n    storageExists = true;\n    storageLength = storage.length;\n    const x = \"__storage_test__\";\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return true;\n  } catch (error: unknown) {\n    const _error = error as DOMException;\n    return !!(\n      _error &&\n      // everything except Firefox\n      (_error.code === 22 ||\n        // Firefox\n        _error.code === 1014 ||\n        // test name field too, because code might not be present\n        // everything except Firefox\n        _error.name === \"QuotaExceededError\" ||\n        // Firefox\n        _error.name === \"NS_ERROR_DOM_QUOTA_REACHED\") &&\n      // acknowledge QuotaExceededError only if there's something already stored\n      storageExists &&\n      storageLength !== 0\n    );\n  }\n}\n\nexport const isHexStrict = (hex: string): boolean => {\n  return (typeof hex === \"string\" || typeof hex === \"number\") && /^(-)?0x[0-9a-f]*$/i.test(hex);\n};\n","import type { MessageTypes, TypedDataV1, TypedMessage } from \"@metamask/eth-sig-util\";\nimport { createAsyncMiddleware, createScaffoldMiddleware, JRPCMiddleware, JRPCRequest, JRPCResponse } from \"@toruslabs/openlogin-jrpc\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport type { MessageParams, TransactionParams, TypedMessageParams, WalletMiddlewareOptions } from \"./interfaces\";\n\nfunction resemblesAddress(str: string): boolean {\n  // hex prefix 2 + 20 bytes\n  return str.length === 2 + 20 * 2;\n}\n\nexport function createWalletMiddleware({\n  getAccounts,\n  getPrivateKey,\n  processDecryptMessage,\n  processEncryptionPublicKey,\n  processEthSignMessage,\n  processPersonalMessage,\n  processTransaction,\n  processSignTransaction,\n  processTypedMessage,\n  processTypedMessageV3,\n  processTypedMessageV4,\n}: WalletMiddlewareOptions): JRPCMiddleware<string, unknown> {\n  if (!getAccounts) {\n    throw new Error(\"opts.getAccounts is required\");\n  }\n\n  //\n  // utility\n  //\n\n  /**\n   * Validates the keyholder address, and returns a normalized (i.e. lowercase)\n   * copy of it.\n   *\n   * an error\n   */\n  async function validateAndNormalizeKeyholder(address: string, req: JRPCRequest<unknown>): Promise<string> {\n    if (typeof address === \"string\" && address.length > 0) {\n      // ensure address is included in provided accounts\n      const accounts: string[] = await getAccounts(req);\n      const normalizedAccounts: string[] = accounts.map((_address) => _address.toLowerCase());\n      const normalizedAddress: string = address.toLowerCase();\n\n      if (normalizedAccounts.includes(normalizedAddress)) {\n        return normalizedAddress;\n      }\n    }\n    throw ethErrors.rpc.invalidParams({\n      message: `Invalid parameters: must provide an Ethereum address.`,\n    });\n  }\n\n  //\n  // account lookups\n  //\n\n  async function lookupAccounts(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    res.result = await getAccounts(req);\n  }\n\n  async function lookupDefaultAccount(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    const accounts = await getAccounts(req);\n    res.result = accounts[0] || null;\n  }\n\n  //\n  // transaction signatures\n  //\n\n  async function sendTransaction(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processTransaction) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const txParams: TransactionParams = (req.params as TransactionParams[])[0] || {\n      from: \"\",\n    };\n    txParams.from = await validateAndNormalizeKeyholder(txParams.from as string, req);\n    res.result = await processTransaction(txParams, req);\n  }\n\n  async function signTransaction(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processSignTransaction) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const txParams: TransactionParams = (req.params as TransactionParams[])[0] || {\n      from: \"\",\n    };\n    txParams.from = await validateAndNormalizeKeyholder(txParams.from as string, req);\n    res.result = await processSignTransaction(txParams, req);\n  }\n\n  //\n  // message signatures\n  //\n\n  async function ethSign(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processEthSignMessage) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const address: string = await validateAndNormalizeKeyholder((req.params as string[])[0], req);\n    const message: string = (req.params as string[])[1];\n    const extraParams: Record<string, unknown> = (req.params as Record<string, unknown>[])[2] || {};\n    const msgParams: MessageParams<string> = {\n      ...extraParams,\n      from: address,\n      data: message,\n    };\n\n    res.result = await processEthSignMessage(msgParams, req);\n  }\n\n  async function signTypedData(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processTypedMessage) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const message: TypedDataV1 = (req.params as TypedDataV1[])[0];\n    const address: string = await validateAndNormalizeKeyholder((req.params as string[])[1], req);\n    const version = \"V1\";\n    const extraParams: Record<string, unknown> = (req.params as Record<string, unknown>[])[2] || {};\n    const msgParams: MessageParams<TypedDataV1> = {\n      ...extraParams,\n      from: address,\n      data: message,\n    };\n\n    res.result = await processTypedMessage(msgParams, req, version);\n  }\n\n  async function signTypedDataV3(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processTypedMessageV3) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const address: string = await validateAndNormalizeKeyholder((req.params as string[])[0], req);\n    const message: TypedMessage<MessageTypes> = (req.params as TypedMessage<MessageTypes>[])[1];\n    const version = \"V3\";\n    const msgParams: TypedMessageParams<TypedMessage<MessageTypes>> = {\n      data: message,\n      from: address,\n      version,\n    };\n\n    res.result = await processTypedMessageV3(msgParams, req, version);\n  }\n\n  async function signTypedDataV4(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processTypedMessageV4) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const address: string = await validateAndNormalizeKeyholder((req.params as string[])[0], req);\n    const message: TypedMessage<MessageTypes> = (req.params as TypedMessage<MessageTypes>[])[1];\n    const version = \"V4\";\n    const msgParams: TypedMessageParams<TypedMessage<MessageTypes>> = {\n      data: message,\n      from: address,\n      version,\n    };\n\n    res.result = await processTypedMessageV4(msgParams, req, version);\n  }\n\n  async function personalSign(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processPersonalMessage) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    // process normally\n    const firstParam: string = (req.params as string[])[0];\n    const secondParam: string = (req.params as string[])[1];\n    // non-standard \"extraParams\" to be appended to our \"msgParams\" obj\n    const extraParams: Record<string, unknown> = (req.params as Record<string, unknown>[])[2] || {};\n\n    // We initially incorrectly ordered these parameters.\n    // To gracefully respect users who adopted this API early,\n    // we are currently gracefully recovering from the wrong param order\n    // when it is clearly identifiable.\n    //\n    // That means when the first param is definitely an address,\n    // and the second param is definitely not, but is hex.\n    let address: string, message: string;\n    if (resemblesAddress(firstParam) && !resemblesAddress(secondParam)) {\n      let warning = `The eth_personalSign method requires params ordered `;\n      warning += `[message, address]. This was previously handled incorrectly, `;\n      warning += `and has been corrected automatically. `;\n      warning += `Please switch this param order for smooth behavior in the future.`;\n      (res as any).warning = warning;\n\n      address = firstParam;\n      message = secondParam;\n    } else {\n      message = firstParam;\n      address = secondParam;\n    }\n    address = await validateAndNormalizeKeyholder(address, req);\n\n    const msgParams: MessageParams<string> = {\n      ...extraParams,\n      from: address,\n      data: message,\n    };\n\n    // eslint-disable-next-line require-atomic-updates\n    res.result = await processPersonalMessage(msgParams, req);\n  }\n\n  async function encryptionPublicKey(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processEncryptionPublicKey) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const address: string = await validateAndNormalizeKeyholder((req.params as string)[0], req);\n\n    res.result = await processEncryptionPublicKey(address, req);\n  }\n\n  async function decryptMessage(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processDecryptMessage) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const ciphertext: string = (req.params as string)[0];\n    const address: string = await validateAndNormalizeKeyholder((req.params as string)[1], req);\n    const extraParams: Record<string, unknown> = (req.params as Record<string, unknown>[])[2] || {};\n    const msgParams: MessageParams<string> = {\n      ...extraParams,\n      from: address,\n      data: ciphertext,\n    };\n\n    res.result = processDecryptMessage(msgParams, req);\n  }\n\n  async function fetchPrivateKey(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!getPrivateKey) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n    res.result = getPrivateKey(req);\n  }\n\n  return createScaffoldMiddleware({\n    // account lookups\n    eth_accounts: createAsyncMiddleware(lookupAccounts),\n    eth_private_key: createAsyncMiddleware(fetchPrivateKey),\n    private_key: createAsyncMiddleware(fetchPrivateKey),\n    eth_coinbase: createAsyncMiddleware(lookupDefaultAccount),\n    // tx signatures\n    eth_sendTransaction: createAsyncMiddleware(sendTransaction),\n    eth_signTransaction: createAsyncMiddleware(signTransaction),\n    // message signatures\n    eth_sign: createAsyncMiddleware(ethSign),\n    eth_signTypedData: createAsyncMiddleware(signTypedData),\n    eth_signTypedData_v3: createAsyncMiddleware(signTypedDataV3),\n    eth_signTypedData_v4: createAsyncMiddleware(signTypedDataV4),\n    personal_sign: createAsyncMiddleware(personalSign),\n    eth_getEncryptionPublicKey: createAsyncMiddleware(encryptionPublicKey),\n    eth_decrypt: createAsyncMiddleware(decryptMessage),\n  });\n}\n","import {\n  createAsyncMiddleware,\n  createScaffoldMiddleware,\n  JRPCMiddleware,\n  JRPCRequest,\n  JRPCResponse,\n  mergeMiddleware,\n} from \"@toruslabs/openlogin-jrpc\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { AddEthereumChainParameter, IAccountHandlers, IChainSwitchHandlers, IProviderHandlers } from \"./interfaces\";\nimport { createWalletMiddleware } from \"./walletMidddleware\";\n\nexport function createEthMiddleware(providerHandlers: IProviderHandlers): JRPCMiddleware<unknown, unknown> {\n  const {\n    getAccounts,\n    getPrivateKey,\n    processTransaction,\n    processSignTransaction,\n    processEthSignMessage,\n    processTypedMessage,\n    processTypedMessageV3,\n    processTypedMessageV4,\n    processPersonalMessage,\n    processEncryptionPublicKey,\n    processDecryptMessage,\n  } = providerHandlers;\n  const ethMiddleware = mergeMiddleware([\n    createScaffoldMiddleware({\n      eth_syncing: false,\n    }),\n    createWalletMiddleware({\n      getAccounts,\n      getPrivateKey,\n      processTransaction,\n      processEthSignMessage,\n      processSignTransaction,\n      processTypedMessage,\n      processTypedMessageV3,\n      processTypedMessageV4,\n      processPersonalMessage,\n      processEncryptionPublicKey,\n      processDecryptMessage,\n    }),\n  ]);\n  return ethMiddleware;\n}\n\nexport function createChainSwitchMiddleware({ addChain, switchChain }: IChainSwitchHandlers): JRPCMiddleware<unknown, unknown> {\n  async function addNewChain(req: JRPCRequest<AddEthereumChainParameter[]>, res: JRPCResponse<unknown>): Promise<void> {\n    const chainParams = req.params?.length ? req.params[0] : undefined;\n    if (!chainParams) throw ethErrors.rpc.invalidParams(\"Missing chain params\");\n    if (!chainParams.chainId) throw ethErrors.rpc.invalidParams(\"Missing chainId in chainParams\");\n    if (!chainParams.rpcUrls || chainParams.rpcUrls.length === 0) throw ethErrors.rpc.invalidParams(\"Missing rpcUrls in chainParams\");\n    if (!chainParams.nativeCurrency) throw ethErrors.rpc.invalidParams(\"Missing nativeCurrency in chainParams\");\n\n    res.result = await addChain(chainParams);\n  }\n  async function updateChain(req: JRPCRequest<{ chainId: string }[]>, res: JRPCResponse<unknown>): Promise<void> {\n    const chainParams = req.params?.length ? req.params[0] : undefined;\n    if (!chainParams) throw ethErrors.rpc.invalidParams(\"Missing chainId\");\n    res.result = await switchChain(chainParams);\n  }\n\n  return createScaffoldMiddleware({\n    wallet_addEthereumChain: createAsyncMiddleware(addNewChain),\n    wallet_switchEthereumChain: createAsyncMiddleware(updateChain),\n  });\n}\n\n// #region account middlewares\nexport function createAccountMiddleware({ updatePrivatekey }: IAccountHandlers): JRPCMiddleware<unknown, unknown> {\n  async function updateAccount(req: JRPCRequest<{ privateKey: string }[]>, res: JRPCResponse<unknown>): Promise<void> {\n    const accountParams = req.params?.length ? req.params[0] : undefined;\n    if (!accountParams?.privateKey) throw ethErrors.rpc.invalidParams(\"Missing privateKey\");\n    res.result = await updatePrivatekey(accountParams);\n  }\n\n  return createScaffoldMiddleware({\n    wallet_updateAccount: createAsyncMiddleware(updateAccount),\n  });\n}\n\n// #endregion account middlewares\n","import { createFetchMiddleware } from \"@toruslabs/base-controllers\";\nimport { JRPCEngineEndCallback, JRPCEngineNextCallback, JRPCMiddleware, JRPCRequest, JRPCResponse, mergeMiddleware } from \"@toruslabs/openlogin-jrpc\";\nimport type { CustomChainConfig } from \"@web3auth/base\";\n\nexport function createChainIdMiddleware(chainId: string): JRPCMiddleware<unknown, unknown> {\n  return (req: JRPCRequest<unknown>, res: JRPCResponse<string>, next: JRPCEngineNextCallback, end: JRPCEngineEndCallback) => {\n    if (req.method === \"eth_chainId\") {\n      res.result = chainId;\n      return end();\n    }\n    return next();\n  };\n}\n\nexport function createProviderConfigMiddleware(providerConfig: CustomChainConfig): JRPCMiddleware<unknown, unknown> {\n  return (req: JRPCRequest<unknown>, res: JRPCResponse<CustomChainConfig>, next: JRPCEngineNextCallback, end: JRPCEngineEndCallback) => {\n    if (req.method === \"eth_provider_config\") {\n      res.result = providerConfig;\n      return end();\n    }\n    return next();\n  };\n}\n\nexport function createJsonRpcClient(providerConfig: CustomChainConfig): {\n  networkMiddleware: JRPCMiddleware<unknown, unknown>;\n  fetchMiddleware: JRPCMiddleware<unknown, unknown>;\n} {\n  const { chainId, rpcTarget } = providerConfig;\n  const fetchMiddleware = createFetchMiddleware({ rpcTarget });\n  const networkMiddleware = mergeMiddleware([createChainIdMiddleware(chainId), createProviderConfigMiddleware(providerConfig), fetchMiddleware]);\n  return { networkMiddleware, fetchMiddleware };\n}\n","import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine } from \"@toruslabs/openlogin-jrpc\";\nimport type { IConnector } from \"@walletconnect/types\";\nimport { CHAIN_NAMESPACES, CustomChainConfig, getChainConfig, isHexStrict, log, WalletInitializationError, WalletLoginError } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { createEthMiddleware } from \"../../rpc/ethRpcMiddlewares\";\nimport { createJsonRpcClient } from \"../../rpc/jrpcClient\";\nimport { getProviderHandlers } from \"./walletConnectUtils\";\n\nexport interface WalletConnectProviderConfig extends BaseProviderConfig {\n  chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n}\n\nexport interface WalletConnectProviderState extends BaseProviderState {\n  accounts: string[];\n}\n\nexport class WalletConnectProvider extends BaseProvider<BaseProviderConfig, WalletConnectProviderState, IConnector> {\n  private connector: IConnector | null = null;\n\n  constructor({ config, state, connector }: { config: WalletConnectProviderConfig; state?: BaseProviderState; connector?: IConnector }) {\n    super({\n      config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.EIP155 }, skipLookupNetwork: !!config.skipLookupNetwork },\n      state: { ...(state || {}), chainId: \"loading\", accounts: [] },\n    });\n    this.connector = connector || null;\n  }\n\n  public static getProviderInstance = async (params: {\n    connector: IConnector;\n    chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n    skipLookupNetwork: boolean;\n  }): Promise<WalletConnectProvider> => {\n    const providerFactory = new WalletConnectProvider({ config: { chainConfig: params.chainConfig, skipLookupNetwork: params.skipLookupNetwork } });\n    await providerFactory.setupProvider(params.connector);\n    return providerFactory;\n  };\n\n  public async enable(): Promise<string[]> {\n    if (!this.connector)\n      throw ethErrors.provider.custom({ message: \"Connector is not initialized, pass wallet connect connector in constructor\", code: 4902 });\n    await this.setupProvider(this.connector);\n    return this._providerEngineProxy.request({ method: \"eth_accounts\" });\n  }\n\n  public async setupProvider(connector: IConnector): Promise<void> {\n    this.onConnectorStateUpdate(connector);\n    await this.setupEngine(connector);\n  }\n\n  public async switchChain({ chainId, addChain = true, lookup = true }: { chainId: string; addChain?: boolean; lookup?: boolean }): Promise<void> {\n    if (!this.connector)\n      throw ethErrors.provider.custom({ message: \"Connector is not initialized, pass wallet connect connector in constructor\", code: 4902 });\n    const currentChainConfig = this.getChainConfig(chainId);\n    this.update({\n      chainId: \"loading\",\n    });\n    const { rpcTarget, displayName } = currentChainConfig;\n    if (addChain) {\n      try {\n        await this.connector.sendCustomRequest({\n          method: \"wallet_addEthereumChain\",\n          params: [\n            {\n              chainId,\n              chainName: displayName,\n              rpcUrls: [rpcTarget],\n              blockExplorerUrls: [currentChainConfig.blockExplorer],\n              nativeCurrency: {\n                name: currentChainConfig.tickerName,\n                symbol: currentChainConfig.ticker,\n                decimals: currentChainConfig.decimals || 18,\n              },\n            },\n          ],\n        });\n      } catch (error) {\n        log.error(error);\n      }\n    }\n\n    try {\n      await this.connector.sendCustomRequest({\n        method: \"wallet_switchEthereumChain\",\n        params: [{ chainId }],\n      });\n    } catch (error) {\n      log.error(error);\n      // ignore this error because metamask & others return provider.result as null\n      // wallet connect thinks this is wrong\n      if (error.message !== \"JSON RPC response format is invalid\") {\n        throw error;\n      }\n    }\n\n    this.configure({ chainConfig: currentChainConfig });\n    if (lookup) await this.lookupNetwork(this.connector);\n  }\n\n  async addChain(chainConfig: CustomChainConfig): Promise<void> {\n    if (!this.connector) throw WalletInitializationError.notReady(\"Wallet adapter is not ready yet\");\n    const { rpcTarget, displayName } = chainConfig;\n\n    try {\n      await this.connector.sendCustomRequest({\n        method: \"wallet_addEthereumChain\",\n        params: [\n          {\n            chainId: chainConfig.chainId,\n            chainName: displayName,\n            rpcUrls: [rpcTarget],\n            blockExplorerUrls: [chainConfig.blockExplorer],\n            nativeCurrency: {\n              name: chainConfig.tickerName,\n              symbol: chainConfig.ticker,\n              decimals: chainConfig.decimals || 18,\n            },\n          },\n        ],\n      });\n      super.addChain(chainConfig);\n    } catch (error) {\n      log.error(error);\n      throw error;\n    }\n  }\n\n  protected async lookupNetwork(connector: IConnector): Promise<string> {\n    if (!connector.connected) throw WalletLoginError.notConnectedError(\"Wallet connect connector is not connected\");\n    if (!this.provider) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const { chainId } = this.config.chainConfig;\n    const connectedHexChainId = isHexStrict(connector.chainId.toString()) ? connector.chainId : `0x${connector.chainId.toString(16)}`;\n    if (chainId !== connectedHexChainId)\n      throw WalletInitializationError.rpcConnectionError(`Invalid network, net_version is: ${connectedHexChainId}, expected: ${chainId}`);\n\n    this.provider.emit(\"connect\", { chainId });\n    this.provider.emit(\"chainChanged\", this.state.chainId);\n    return connectedHexChainId;\n  }\n\n  private async setupEngine(connector: IConnector): Promise<void> {\n    const providerHandlers = getProviderHandlers({ connector });\n    this.update({\n      accounts: connector.accounts || [],\n    });\n    const ethMiddleware = createEthMiddleware(providerHandlers);\n    const engine = new JRPCEngine();\n    const { networkMiddleware } = createJsonRpcClient(this.config.chainConfig as CustomChainConfig);\n    engine.push(ethMiddleware);\n    engine.push(networkMiddleware);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    if (!this.config.skipLookupNetwork) await this.lookupNetwork(connector);\n  }\n\n  private async onConnectorStateUpdate(connector: IConnector) {\n    connector.on(\"session_update\", async (error: Error | null, payload) => {\n      if (!this.provider) throw WalletLoginError.notConnectedError(\"Wallet connect connector is not connected\");\n      if (error) {\n        this.provider.emit(\"error\", error);\n        return;\n      }\n      const { accounts, chainId: connectedChainId, rpcUrl }: { accounts?: string[]; chainId?: number; rpcUrl?: string } = payload.params[0];\n      // Check if accounts changed and trigger event\n      if (accounts?.length && this.state.accounts[0] !== accounts[0]) {\n        this.update({\n          accounts,\n        });\n        // await this.setupEngine(connector);\n        this.provider.emit(\"accountsChanged\", accounts);\n      }\n      const connectedHexChainId = `0x${connectedChainId.toString(16)}`;\n      // Check if chainId changed and trigger event\n      if (connectedChainId && this.state.chainId !== connectedHexChainId) {\n        const maybeConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, connectedChainId) || {};\n        // Handle rpcUrl update\n        this.configure({\n          chainConfig: { ...maybeConfig, chainId: connectedHexChainId, rpcTarget: rpcUrl, chainNamespace: CHAIN_NAMESPACES.EIP155 },\n        });\n        await this.setupEngine(connector);\n      }\n    });\n  }\n}\n","import { MessageTypes, TypedDataV1, TypedMessage } from \"@metamask/eth-sig-util\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport type { IConnector, ITxData } from \"@walletconnect/types\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { IProviderHandlers, MessageParams, TransactionParams, TypedMessageParams } from \"../../rpc/interfaces\";\n\nexport function getProviderHandlers({ connector }: { connector: IConnector }): IProviderHandlers {\n  return {\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getAccounts: async (_: JRPCRequest<unknown>) => {\n      const { accounts } = connector;\n      if (accounts && accounts.length) {\n        return accounts;\n      }\n      throw new Error(\"Failed to get accounts\");\n    },\n    processTransaction: async (txParams: TransactionParams, _: JRPCRequest<unknown>): Promise<string> => {\n      const result = await connector.sendTransaction(txParams as ITxData);\n      return result;\n    },\n    processSignTransaction: async (txParams: TransactionParams, _: JRPCRequest<unknown>): Promise<string> => {\n      const result = await connector.signTransaction(txParams as ITxData);\n      return result;\n    },\n    processEthSignMessage: async (msgParams: MessageParams<string>, _: JRPCRequest<unknown>): Promise<string> => {\n      const result = await connector.signMessage([msgParams.from, msgParams.data]);\n      return result;\n    },\n    processPersonalMessage: async (msgParams: MessageParams<string>, _: JRPCRequest<unknown>): Promise<string> => {\n      const result = await connector.signPersonalMessage([msgParams.data, msgParams.from]);\n      return result;\n    },\n    processTypedMessage: async (msgParams: MessageParams<TypedDataV1>, _: JRPCRequest<unknown>): Promise<string> => {\n      const result = await connector.signTypedData([msgParams.from, msgParams.data]);\n      return result;\n    },\n    processTypedMessageV3: async (msgParams: TypedMessageParams<TypedMessage<MessageTypes>>): Promise<string> => {\n      const result = await connector.signTypedData([msgParams.from, msgParams.data]);\n      return result;\n    },\n    processTypedMessageV4: async (msgParams: TypedMessageParams<TypedMessage<MessageTypes>>): Promise<string> => {\n      const result = await connector.signTypedData([msgParams.from, msgParams.data]);\n      return result;\n    },\n    processEncryptionPublicKey: async (_: string): Promise<string> => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    processDecryptMessage: (_: MessageParams<string>): string => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n  };\n}\n","import { stripHexPrefix } from \"@ethereumjs/util\";\nimport BigNumber from \"bignumber.js\";\n\ntype DenominationType = \"WEI\" | \"GWEI\" | \"ETH\";\ntype NumericBaseType = \"hex\" | \"dec\";\n\ntype ConverterInput = {\n  value: string | BigNumber;\n  fromNumericBase: NumericBaseType;\n  fromDenomination?: DenominationType;\n  toNumericBase?: NumericBaseType;\n  toDenomination?: DenominationType;\n  numberOfDecimals?: number;\n};\n// Big Number Constants\nconst BIG_NUMBER_WEI_MULTIPLIER = new BigNumber(\"1e18\");\nconst BIG_NUMBER_GWEI_MULTIPLIER = new BigNumber(\"1e9\");\nconst BIG_NUMBER_ETH_MULTIPLIER = new BigNumber(\"1\");\n\n// Setter Maps\nconst toBigNumber: Record<NumericBaseType, (n: string | BigNumber) => BigNumber> = {\n  hex: (n: string | BigNumber) => (typeof n === \"string\" ? new BigNumber(stripHexPrefix(n), 16) : new BigNumber(n, 16)),\n  dec: (n: string | BigNumber) => new BigNumber(n, 10),\n};\nconst toNormalizedDenomination: Record<string, (n: BigNumber) => BigNumber> = {\n  WEI: (bigNumber) => bigNumber.div(BIG_NUMBER_WEI_MULTIPLIER),\n  GWEI: (bigNumber) => bigNumber.div(BIG_NUMBER_GWEI_MULTIPLIER),\n  ETH: (bigNumber) => bigNumber.div(BIG_NUMBER_ETH_MULTIPLIER),\n};\nconst toSpecifiedDenomination: Record<string, (n: BigNumber) => BigNumber> = {\n  WEI: (bigNumber) => bigNumber.times(BIG_NUMBER_WEI_MULTIPLIER).dp(0, BigNumber.ROUND_HALF_UP),\n  GWEI: (bigNumber) => bigNumber.times(BIG_NUMBER_GWEI_MULTIPLIER).dp(9, BigNumber.ROUND_HALF_UP),\n  ETH: (bigNumber) => bigNumber.times(BIG_NUMBER_ETH_MULTIPLIER).dp(9, BigNumber.ROUND_HALF_UP),\n};\nconst baseChange: Record<string, (n: BigNumber) => string> = {\n  hex: (n) => n.toString(16),\n  dec: (n) => new BigNumber(n).toString(10),\n};\n\nconst converter = (params: ConverterInput): string | BigNumber => {\n  const { value, fromNumericBase, fromDenomination, toNumericBase, toDenomination, numberOfDecimals } = params;\n  let convertedValue: string | BigNumber = toBigNumber[fromNumericBase](value);\n\n  if (fromDenomination) {\n    convertedValue = toNormalizedDenomination[fromDenomination](convertedValue as BigNumber);\n  }\n\n  if (toDenomination) {\n    convertedValue = toSpecifiedDenomination[toDenomination](convertedValue as BigNumber);\n  }\n\n  if (numberOfDecimals) {\n    convertedValue = (convertedValue as BigNumber).dp(numberOfDecimals, BigNumber.ROUND_HALF_DOWN);\n  }\n\n  if (toNumericBase) {\n    convertedValue = baseChange[toNumericBase](convertedValue);\n  }\n  return convertedValue;\n};\n\nconst conversionUtil = (\n  value: string | BigNumber,\n  { fromNumericBase = \"hex\", toNumericBase, fromDenomination, toDenomination, numberOfDecimals }: Partial<ConverterInput>\n): BigNumber | string => {\n  return converter({\n    fromNumericBase,\n    toNumericBase,\n    fromDenomination,\n    toDenomination,\n    numberOfDecimals,\n    value: value || \"0\",\n  });\n};\n\nfunction decGWEIToHexWEI(decGWEI: string | BigNumber): string {\n  return conversionUtil(decGWEI, {\n    fromNumericBase: \"dec\",\n    toNumericBase: \"hex\",\n    fromDenomination: \"GWEI\",\n    toDenomination: \"WEI\",\n  }) as string;\n}\n\nfunction hexWEIToDecGWEI(decGWEI: string | BigNumber): string {\n  return conversionUtil(decGWEI, {\n    fromNumericBase: \"hex\",\n    toNumericBase: \"dec\",\n    fromDenomination: \"WEI\",\n    toDenomination: \"GWEI\",\n  }) as string;\n}\n\nexport { conversionUtil, decGWEIToHexWEI, hexWEIToDecGWEI };\n","import { isValidAddress } from \"@ethereumjs/util\";\nimport { SignTypedDataVersion, TYPED_MESSAGE_SCHEMA, TypedDataV1Field, typedSignatureHash } from \"@metamask/eth-sig-util\";\nimport { get } from \"@toruslabs/http-helpers\";\nimport { isHexStrict } from \"@web3auth/base\";\nimport assert from \"assert\";\nimport { BigNumber } from \"bignumber.js\";\nimport { ethErrors } from \"eth-rpc-errors\";\nimport jsonschema from \"jsonschema\";\n\nimport { TypedMessageParams } from \"../../../rpc/interfaces\";\nimport { decGWEIToHexWEI, hexWEIToDecGWEI } from \"../../converter\";\nimport { EIP1159GasData, LegacyGasData } from \"./interfaces\";\n\nexport function normalizeGWEIDecimalNumbers(n: string | BigNumber): string {\n  const numberAsWEIHex = decGWEIToHexWEI(n);\n  const numberAsGWEI = hexWEIToDecGWEI(numberAsWEIHex);\n  return numberAsGWEI;\n}\n\nexport async function fetchEip1159GasEstimates(url: string): Promise<EIP1159GasData> {\n  const estimates = await get<EIP1159GasData>(url);\n  const normalizedEstimates = {\n    ...estimates,\n    estimatedBaseFee: normalizeGWEIDecimalNumbers(estimates.estimatedBaseFee),\n    low: {\n      ...estimates.low,\n      suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(estimates.low.suggestedMaxPriorityFeePerGas),\n      suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(estimates.low.suggestedMaxFeePerGas),\n    },\n    medium: {\n      ...estimates.medium,\n      suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(estimates.medium.suggestedMaxPriorityFeePerGas),\n      suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(estimates.medium.suggestedMaxFeePerGas),\n    },\n    high: {\n      ...estimates.high,\n      suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(estimates.high.suggestedMaxPriorityFeePerGas),\n      suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(estimates.high.suggestedMaxFeePerGas),\n    },\n  };\n  return normalizedEstimates;\n}\n\n/**\n * Hit the legacy MetaSwaps gasPrices estimate api and return the low, medium\n * high values from that API.\n */\nexport async function fetchLegacyGasPriceEstimates(url: string): Promise<LegacyGasData> {\n  const result = await get<{\n    SafeGasPrice: string;\n    ProposeGasPrice: string;\n    FastGasPrice: string;\n  }>(url, {\n    referrer: url,\n    referrerPolicy: \"no-referrer-when-downgrade\",\n    method: \"GET\",\n    mode: \"cors\",\n  });\n  return {\n    low: result.SafeGasPrice,\n    medium: result.ProposeGasPrice,\n    high: result.FastGasPrice,\n  };\n}\n\nexport const validateTypedMessageParams = (parameters: TypedMessageParams<unknown>, activeChainId: number) => {\n  try {\n    assert.ok(parameters && typeof parameters === \"object\", \"Params must be an object.\");\n    assert.ok(\"data\" in parameters, 'Params must include a \"data\" field.');\n    assert.ok(\"from\" in parameters, 'Params must include a \"from\" field.');\n    assert.ok(\n      typeof parameters.from === \"string\" && isValidAddress(parameters.from),\n      '\"from\" field must be a valid, lowercase, hexadecimal Ethereum address string.'\n    );\n    let data = null;\n    let chainId = null;\n    switch ((parameters as TypedMessageParams<unknown>).version) {\n      case SignTypedDataVersion.V1:\n        if (typeof parameters.data === \"string\") {\n          assert.doesNotThrow(() => {\n            data = JSON.parse(parameters.data as string);\n          }, '\"data\" must be a valid JSON string.');\n        } else {\n          // for backward compatiblity we validate for both string and object type.\n          data = parameters.data;\n        }\n        assert.ok(Array.isArray(data as unknown), \"params.data must be an array.\");\n        assert.doesNotThrow(() => {\n          typedSignatureHash(data as TypedDataV1Field[]);\n        }, \"Signing data must be valid EIP-712 typed data.\");\n        break;\n      case SignTypedDataVersion.V3:\n      case SignTypedDataVersion.V4:\n        if (typeof parameters.data === \"string\") {\n          assert.doesNotThrow(() => {\n            data = JSON.parse(parameters.data as string);\n          }, '\"data\" must be a valid JSON string.');\n        } else {\n          // for backward compatiblity we validate for both string and object type.\n          data = parameters.data;\n        }\n\n        assert.ok(data.primaryType in data.types, `Primary type of \"${data.primaryType}\" has no type definition.`);\n        const validation = jsonschema.validate(data, TYPED_MESSAGE_SCHEMA.properties);\n        assert.strictEqual(validation.errors.length, 0, \"Signing data must conform to EIP-712 schema. See https://git.io/fNtcx.\");\n        chainId = data.domain?.chainId;\n        if (chainId) {\n          assert.ok(!Number.isNaN(activeChainId), `Cannot sign messages for chainId \"${chainId}\", because Web3Auth is switching networks.`);\n          if (typeof chainId === \"string\") {\n            chainId = Number.parseInt(chainId, isHexStrict(chainId) ? 16 : 10);\n          }\n          assert.strictEqual(chainId, activeChainId, `Provided chainId \"${chainId}\" must match the active chainId \"${activeChainId}\"`);\n        }\n        break;\n      default:\n        assert.fail(`Unknown typed data version \"${(parameters as TypedMessageParams<unknown>).version}\"`);\n    }\n  } catch (error) {\n    throw ethErrors.rpc.invalidInput({\n      message: error?.message,\n    });\n  }\n};\n","import { TransactionFactory } from \"@ethereumjs/tx\";\nimport { privateToAddress, stripHexPrefix } from \"@ethereumjs/util\";\nimport {\n  decrypt,\n  EthEncryptedData,\n  getEncryptionPublicKey,\n  MessageTypes,\n  personalSign,\n  signTypedData,\n  SignTypedDataVersion,\n  TypedDataV1,\n  TypedMessage,\n} from \"@metamask/eth-sig-util\";\nimport { SafeEventEmitterProvider, signMessage } from \"@toruslabs/base-controllers\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { isHexStrict, log } from \"@web3auth/base\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { IProviderHandlers, MessageParams, TransactionParams, TypedMessageParams } from \"../../rpc/interfaces\";\nimport { TransactionFormatter } from \"./TransactionFormatter\";\nimport { validateTypedMessageParams } from \"./TransactionFormatter/utils\";\n\nasync function signTx(txParams: TransactionParams & { gas?: string }, privKey: string, txFormatter: TransactionFormatter): Promise<Buffer> {\n  const finalTxParams = await txFormatter.formatTransaction(txParams);\n  const common = await txFormatter.getCommonConfiguration();\n  const unsignedEthTx = TransactionFactory.fromTxData(finalTxParams, {\n    common,\n  });\n  const signedTx = unsignedEthTx.sign(Buffer.from(privKey, \"hex\")).serialize();\n  return signedTx;\n}\n\nexport function getProviderHandlers({\n  txFormatter,\n  privKey,\n  getProviderEngineProxy,\n}: {\n  txFormatter: TransactionFormatter;\n  privKey: string;\n  getProviderEngineProxy: () => SafeEventEmitterProvider | null;\n}): IProviderHandlers {\n  return {\n    getAccounts: async (_: JRPCRequest<unknown>) => [`0x${privateToAddress(Buffer.from(privKey, \"hex\")).toString(\"hex\")}`],\n    getPrivateKey: async (_: JRPCRequest<unknown>) => privKey,\n    processTransaction: async (txParams: TransactionParams & { gas?: string }, _: JRPCRequest<unknown>): Promise<string> => {\n      const providerEngineProxy = getProviderEngineProxy();\n      if (!providerEngineProxy)\n        throw ethErrors.provider.custom({\n          message: \"Provider is not initialized\",\n          code: 4902,\n        });\n      const signedTx = await signTx(txParams, privKey, txFormatter);\n      const txHash = await providerEngineProxy.request<string[], string>({\n        method: \"eth_sendRawTransaction\",\n        params: [\"0x\".concat(signedTx.toString(\"hex\"))],\n      });\n      return txHash;\n    },\n    processSignTransaction: async (txParams: TransactionParams & { gas?: string }, _: JRPCRequest<unknown>): Promise<string> => {\n      const providerEngineProxy = getProviderEngineProxy();\n      if (!providerEngineProxy)\n        throw ethErrors.provider.custom({\n          message: \"Provider is not initialized\",\n          code: 4902,\n        });\n      const signedTx = await signTx(txParams, privKey, txFormatter);\n      return `0x${signedTx.toString(\"hex\")}`;\n    },\n    processEthSignMessage: async (msgParams: MessageParams<string>, _: JRPCRequest<unknown>): Promise<string> => {\n      const rawMessageSig = signMessage(privKey, msgParams.data);\n      return rawMessageSig;\n    },\n    processPersonalMessage: async (msgParams: MessageParams<string>, _: JRPCRequest<unknown>): Promise<string> => {\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const sig = personalSign({ privateKey: privKeyBuffer, data: msgParams.data });\n      return sig;\n    },\n    processTypedMessage: async (msgParams: MessageParams<TypedDataV1>, _: JRPCRequest<unknown>): Promise<string> => {\n      log.debug(\"processTypedMessage\", msgParams);\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const providerEngineProxy = getProviderEngineProxy();\n      if (!providerEngineProxy)\n        throw ethErrors.provider.custom({\n          message: \"Provider is not initialized\",\n          code: 4902,\n        });\n      const chainId = await providerEngineProxy.request<unknown, string>({ method: \"eth_chainId\" });\n      const finalChainId = Number.parseInt(chainId, isHexStrict(chainId) ? 16 : 10);\n      const params = {\n        ...msgParams,\n        version: SignTypedDataVersion.V1,\n      };\n      validateTypedMessageParams(params, finalChainId);\n      const data = typeof params.data === \"string\" ? JSON.parse(params.data) : params.data;\n      const sig = signTypedData({ privateKey: privKeyBuffer, data, version: SignTypedDataVersion.V1 });\n      return sig;\n    },\n    processTypedMessageV3: async (msgParams: TypedMessageParams<TypedMessage<MessageTypes>>, _: JRPCRequest<unknown>): Promise<string> => {\n      log.debug(\"processTypedMessageV3\", msgParams);\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const providerEngineProxy = getProviderEngineProxy();\n      if (!providerEngineProxy)\n        throw ethErrors.provider.custom({\n          message: \"Provider is not initialized\",\n          code: 4902,\n        });\n      const chainId = await providerEngineProxy.request<unknown, string>({ method: \"eth_chainId\" });\n      const finalChainId = Number.parseInt(chainId, isHexStrict(chainId) ? 16 : 10);\n      validateTypedMessageParams(msgParams, finalChainId);\n      const data = typeof msgParams.data === \"string\" ? JSON.parse(msgParams.data) : msgParams.data;\n      const sig = signTypedData({ privateKey: privKeyBuffer, data, version: SignTypedDataVersion.V3 });\n      return sig;\n    },\n    processTypedMessageV4: async (msgParams: TypedMessageParams<TypedMessage<MessageTypes>>, _: JRPCRequest<unknown>): Promise<string> => {\n      log.debug(\"processTypedMessageV4\", msgParams);\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const providerEngineProxy = getProviderEngineProxy();\n      if (!providerEngineProxy)\n        throw ethErrors.provider.custom({\n          message: \"Provider is not initialized\",\n          code: 4902,\n        });\n      const chainId = await providerEngineProxy.request<unknown, string>({ method: \"eth_chainId\" });\n      const finalChainId = Number.parseInt(chainId, isHexStrict(chainId) ? 16 : 10);\n      validateTypedMessageParams(msgParams, finalChainId);\n      const data = typeof msgParams.data === \"string\" ? JSON.parse(msgParams.data) : msgParams.data;\n      const sig = signTypedData({ privateKey: privKeyBuffer, data, version: SignTypedDataVersion.V4 });\n      return sig;\n    },\n    processEncryptionPublicKey: async (address: string, _: JRPCRequest<unknown>): Promise<string> => {\n      log.info(\"processEncryptionPublicKey\", address);\n      return getEncryptionPublicKey(privKey);\n    },\n    processDecryptMessage: (msgParams: MessageParams<string>, _: JRPCRequest<unknown>): string => {\n      log.info(\"processDecryptMessage\", msgParams);\n      const stripped = stripHexPrefix(msgParams.data);\n      const buff = Buffer.from(stripped, \"hex\");\n      const decrypted = decrypt({ encryptedData: JSON.parse(buff.toString(\"utf8\")) as EthEncryptedData, privateKey: privKey });\n      return decrypted;\n    },\n  };\n}\n","import { addHexPrefix, stripHexPrefix } from \"@ethereumjs/util\";\nimport { BigNumber } from \"bignumber.js\";\nimport BN from \"bn.js\";\n\nexport function bnLessThan(a, b) {\n  if (a === null || a === undefined || b === null || b === undefined) {\n    return null;\n  }\n  return new BigNumber(a, 10).lt(b, 10);\n}\n\nexport function bnToHex(inputBn: BN) {\n  return addHexPrefix(inputBn.toString(16));\n}\n\nexport function hexToBn(inputHex: string): BN {\n  if (BN.isBN(inputHex)) return inputHex;\n  return new BN(stripHexPrefix(inputHex), 16);\n}\n\nexport function BnMultiplyByFraction(targetBN: BN, numerator: number | string, denominator: number | string): BN {\n  const numberBN = new BN(numerator);\n  const denomBN = new BN(denominator);\n  return targetBN.mul(numberBN).div(denomBN);\n}\n","export const LegacyGasAPIEndpoint = \"https://gas-api.metaswap.codefi.network/networks/<chain_id>/gasPrices\";\nexport const EIP1559APIEndpoint = \"https://gas-api.metaswap.codefi.network/networks/<chain_id>/suggestedGasFees\";\nexport const TRANSACTION_ENVELOPE_TYPES = {\n  LEGACY: \"0x0\",\n  ACCESS_LIST: \"0x1\",\n  FEE_MARKET: \"0x2\",\n};\n\nexport const TRANSACTION_TYPES = {\n  SENT_ETHER: \"sentEther\",\n  CONTRACT_INTERACTION: \"contractInteraction\",\n  DEPLOY_CONTRACT: \"contractDeployment\",\n  STANDARD_TRANSACTION: \"transaction\",\n};\n\nexport const GAS_ESTIMATE_TYPES = {\n  FEE_MARKET: \"fee-market\",\n  LEGACY: \"legacy\",\n  ETH_GASPRICE: \"eth_gasPrice\",\n  NONE: \"none\",\n};\n","import { Common, Hardfork } from \"@ethereumjs/common\";\nimport { addHexPrefix, stripHexPrefix } from \"@ethereumjs/util\";\nimport { Block } from \"@toruslabs/base-controllers\";\nimport { CustomChainConfig, log, SafeEventEmitterProvider } from \"@web3auth/base\";\n\nimport { TransactionParams } from \"../../../rpc/interfaces\";\nimport { decGWEIToHexWEI, hexWEIToDecGWEI } from \"../../converter\";\nimport { bnLessThan, BnMultiplyByFraction, bnToHex, hexToBn } from \"../../utils\";\nimport { EIP1559APIEndpoint, GAS_ESTIMATE_TYPES, LegacyGasAPIEndpoint, TRANSACTION_ENVELOPE_TYPES, TRANSACTION_TYPES } from \"./constants\";\nimport { EIP1159GasData, FallbackGasData, GasData, LegacyGasData, TxType } from \"./interfaces\";\nimport { fetchEip1159GasEstimates, fetchLegacyGasPriceEstimates } from \"./utils\";\n\nexport class TransactionFormatter {\n  private chainConfig: CustomChainConfig | null = null;\n\n  private getProviderEngineProxy: () => SafeEventEmitterProvider;\n\n  private isEIP1559Compatible = false;\n\n  constructor({ getProviderEngineProxy }: { getProviderEngineProxy: () => SafeEventEmitterProvider }) {\n    this.getProviderEngineProxy = getProviderEngineProxy;\n  }\n\n  get providerProxy() {\n    return this.getProviderEngineProxy();\n  }\n\n  async init(): Promise<void> {\n    this.chainConfig = (await this.providerProxy.request<CustomChainConfig>({ method: \"eth_provider_config\", params: [] })) as CustomChainConfig;\n    this.isEIP1559Compatible = await this.getEIP1559Compatibility();\n  }\n\n  async getCommonConfiguration(): Promise<Common> {\n    if (!this.chainConfig) throw new Error(\"Chain config not initialized\");\n    const { displayName: name, chainId } = this.chainConfig;\n    const hardfork = this.isEIP1559Compatible ? Hardfork.London : Hardfork.Berlin;\n    const customChainParams = {\n      name,\n      chainId: chainId === \"loading\" ? 0 : Number.parseInt(chainId, 16),\n      networkId: chainId === \"loading\" ? 0 : Number.parseInt(chainId, 16),\n      defaultHardfork: hardfork,\n    };\n    return Common.custom(customChainParams);\n  }\n\n  async formatTransaction(txParams: TransactionParams & { gas?: string }): Promise<TransactionParams & { gas?: string }> {\n    if (!this.chainConfig) throw new Error(\"Chain config not initialized\");\n\n    const clonedTxParams = {\n      ...txParams,\n    };\n\n    if (clonedTxParams.nonce === undefined)\n      clonedTxParams.nonce = (await this.providerProxy.request<number>({\n        method: \"eth_getTransactionCount\",\n        params: [txParams.from, \"latest\"],\n      })) as number;\n\n    if (!this.isEIP1559Compatible && clonedTxParams.gasPrice) {\n      if (clonedTxParams.maxFeePerGas) delete clonedTxParams.maxFeePerGas;\n      if (clonedTxParams.maxPriorityFeePerGas) delete clonedTxParams.maxPriorityFeePerGas;\n      // if gas is not provided explicitly, estimate it.\n      if (!clonedTxParams.gas) {\n        const defaultGasLimit = await this.getDefaultGasLimit(clonedTxParams);\n        if (defaultGasLimit) {\n          clonedTxParams.gasLimit = defaultGasLimit;\n        }\n      } else {\n        clonedTxParams.gasLimit = clonedTxParams.gas;\n      }\n      return clonedTxParams;\n    }\n\n    if (!clonedTxParams.gas) {\n      const defaultGasLimit = await this.getDefaultGasLimit(clonedTxParams);\n      if (defaultGasLimit) {\n        clonedTxParams.gasLimit = defaultGasLimit;\n      }\n    } else {\n      clonedTxParams.gasLimit = clonedTxParams.gas;\n    }\n\n    const {\n      gasPrice: defaultGasPrice,\n      maxFeePerGas: defaultMaxFeePerGas,\n      maxPriorityFeePerGas: defaultMaxPriorityFeePerGas,\n    } = await this.getDefaultGasFees(clonedTxParams);\n\n    if (this.isEIP1559Compatible) {\n      // If the dapp has suggested a gas price, but no maxFeePerGas or maxPriorityFeePerGas\n      //  then we set maxFeePerGas and maxPriorityFeePerGas to the suggested gasPrice.\n      if (clonedTxParams.gasPrice && !clonedTxParams.maxFeePerGas && !clonedTxParams.maxPriorityFeePerGas) {\n        clonedTxParams.maxFeePerGas = clonedTxParams.gasPrice;\n\n        clonedTxParams.maxPriorityFeePerGas = bnLessThan(\n          typeof defaultMaxPriorityFeePerGas === \"string\" ? stripHexPrefix(defaultMaxPriorityFeePerGas) : defaultMaxPriorityFeePerGas,\n          typeof clonedTxParams.gasPrice === \"string\" ? stripHexPrefix(clonedTxParams.gasPrice) : clonedTxParams.gasPrice\n        )\n          ? defaultMaxPriorityFeePerGas\n          : clonedTxParams.gasPrice;\n      } else {\n        if (defaultMaxFeePerGas && !clonedTxParams.maxFeePerGas) {\n          // If the dapp has not set the gasPrice or the maxFeePerGas, then we set maxFeePerGas\n          // with the one returned by the gasFeeController, if that is available.\n          clonedTxParams.maxFeePerGas = defaultMaxFeePerGas;\n        }\n\n        if (defaultMaxPriorityFeePerGas && !clonedTxParams.maxPriorityFeePerGas) {\n          // If the dapp has not set the gasPrice or the maxPriorityFeePerGas, then we set maxPriorityFeePerGas\n          // with the one returned by the gasFeeController, if that is available.\n          clonedTxParams.maxPriorityFeePerGas = defaultMaxPriorityFeePerGas;\n        }\n\n        if (defaultGasPrice && !clonedTxParams.maxFeePerGas) {\n          // If the dapp has not set the gasPrice or the maxFeePerGas, and no maxFeePerGas is available\n          // then we set maxFeePerGas to the defaultGasPrice, assuming it is\n          // available.\n          clonedTxParams.maxFeePerGas = defaultGasPrice;\n        }\n\n        if (clonedTxParams.maxFeePerGas && !clonedTxParams.maxPriorityFeePerGas) {\n          // If the dapp has not set the gasPrice or the maxPriorityFeePerGas, and no maxPriorityFeePerGas is\n          // available  then we set maxPriorityFeePerGas to\n          // clonedTxParams.maxFeePerGas, which will either be the gasPrice from the controller, the maxFeePerGas\n          // set by the dapp, or the maxFeePerGas from the controller.\n          clonedTxParams.maxPriorityFeePerGas = clonedTxParams.maxFeePerGas;\n        }\n      }\n\n      // We remove the gasPrice param entirely when on an eip1559 compatible network\n\n      delete clonedTxParams.gasPrice;\n    } else {\n      // We ensure that maxFeePerGas and maxPriorityFeePerGas are not in the transaction params\n      // when not on a EIP1559 compatible network\n\n      delete clonedTxParams.maxPriorityFeePerGas;\n      delete clonedTxParams.maxFeePerGas;\n    }\n\n    // If we have gotten to this point, and none of gasPrice, maxPriorityFeePerGas or maxFeePerGas are\n    // set on txParams, it means that either we are on a non-EIP1559 network and the dapp didn't suggest\n    // a gas price, or we are on an EIP1559 network, and none of gasPrice, maxPriorityFeePerGas or maxFeePerGas\n    // were available from either the dapp or the network.\n    if (defaultGasPrice && !clonedTxParams.gasPrice && !clonedTxParams.maxPriorityFeePerGas && !clonedTxParams.maxFeePerGas) {\n      clonedTxParams.gasPrice = defaultGasPrice as never;\n    }\n\n    clonedTxParams.type = this.isEIP1559Compatible ? TRANSACTION_ENVELOPE_TYPES.FEE_MARKET : TRANSACTION_ENVELOPE_TYPES.LEGACY;\n    clonedTxParams.chainId = this.chainConfig.chainId;\n    return clonedTxParams;\n  }\n\n  private async fetchEthGasPriceEstimate(): Promise<{ gasPrice: string }> {\n    const gasPrice = (await this.providerProxy.request<string>({ method: \"eth_gasPrice\", params: [] })) as string;\n    return {\n      gasPrice: hexWEIToDecGWEI(gasPrice).toString(),\n    };\n  }\n\n  private async getEIP1559Compatibility(): Promise<boolean> {\n    const latestBlock = await this.providerProxy.request<Block>({ method: \"eth_getBlockByNumber\", params: [\"latest\", false] });\n    const supportsEIP1559 = latestBlock && latestBlock.baseFeePerGas !== undefined;\n\n    return !!supportsEIP1559;\n  }\n\n  private async fetchGasFeeEstimateData(): Promise<GasData> {\n    if (!this.chainConfig) throw new Error(\"Chain config not initialized\");\n    const isLegacyGasAPICompatible = this.chainConfig.chainId === \"0x1\";\n\n    const chainId = Number.parseInt(this.chainConfig.chainId, 16);\n\n    let gasData: GasData;\n\n    try {\n      if (this.isEIP1559Compatible) {\n        // TODO: kovan is not working due to a bug in metamask api\n        const estimates = await fetchEip1159GasEstimates(EIP1559APIEndpoint.replace(\"<chain_id>\", `${chainId}`));\n        gasData = {\n          gasFeeEstimates: estimates,\n          gasEstimateType: GAS_ESTIMATE_TYPES.FEE_MARKET,\n        };\n      } else if (isLegacyGasAPICompatible) {\n        const estimates = await fetchLegacyGasPriceEstimates(LegacyGasAPIEndpoint.replace(\"<chain_id>\", `${chainId}`));\n        gasData = {\n          gasFeeEstimates: estimates,\n          gasEstimateType: GAS_ESTIMATE_TYPES.LEGACY,\n        };\n      } else {\n        throw new Error(\"Main gas fee/price estimation failed. Use fallback\");\n      }\n    } catch (e: unknown) {\n      try {\n        const estimates = await this.fetchEthGasPriceEstimate();\n        gasData = {\n          gasFeeEstimates: estimates,\n          gasEstimateType: GAS_ESTIMATE_TYPES.ETH_GASPRICE,\n        };\n      } catch (error: unknown) {\n        throw new Error(`Gas fee/price estimation failed. Message: ${(error as Error).message}`);\n      }\n    }\n    return gasData;\n  }\n\n  private async getDefaultGasFees(\n    txParams: TransactionParams & { gas?: string }\n  ): Promise<{ gasPrice?: string; maxFeePerGas?: string; maxPriorityFeePerGas?: string }> {\n    if ((!this.isEIP1559Compatible && txParams.gasPrice) || (this.isEIP1559Compatible && txParams.maxFeePerGas && txParams.maxPriorityFeePerGas)) {\n      return {};\n    }\n\n    try {\n      const { gasFeeEstimates, gasEstimateType } = await this.fetchGasFeeEstimateData();\n      if (this.isEIP1559Compatible && gasEstimateType === GAS_ESTIMATE_TYPES.FEE_MARKET) {\n        const { medium: { suggestedMaxPriorityFeePerGas, suggestedMaxFeePerGas } = {} } = gasFeeEstimates as EIP1159GasData;\n\n        if (suggestedMaxPriorityFeePerGas && suggestedMaxFeePerGas) {\n          return {\n            maxFeePerGas: addHexPrefix(decGWEIToHexWEI(suggestedMaxFeePerGas)),\n            maxPriorityFeePerGas: addHexPrefix(decGWEIToHexWEI(suggestedMaxPriorityFeePerGas)),\n          };\n        }\n      } else if (gasEstimateType === GAS_ESTIMATE_TYPES.LEGACY) {\n        // The LEGACY type includes low, medium and high estimates of\n        // gas price values.\n        return {\n          gasPrice: addHexPrefix(decGWEIToHexWEI((gasFeeEstimates as LegacyGasData).medium)),\n        };\n      } else if (gasEstimateType === GAS_ESTIMATE_TYPES.ETH_GASPRICE) {\n        // The ETH_GASPRICE type just includes a single gas price property,\n        // which we can assume was retrieved from eth_gasPrice\n        return {\n          gasPrice: addHexPrefix(decGWEIToHexWEI((gasFeeEstimates as FallbackGasData).gasPrice)),\n        };\n      }\n    } catch (error) {\n      log.error(error);\n    }\n\n    const { gasPrice } = await this.fetchEthGasPriceEstimate();\n\n    return { gasPrice: addHexPrefix(decGWEIToHexWEI(gasPrice)) };\n  }\n\n  private async estimateTxGas(txMeta: TransactionParams): Promise<string> {\n    const txParams = { ...txMeta };\n\n    // `eth_estimateGas` can fail if the user has insufficient balance for the\n    // value being sent, or for the gas cost. We don't want to check their\n    // balance here, we just want the gas estimate. The gas price is removed\n    // to skip those balance checks. We check balance elsewhere. We also delete\n    // maxFeePerGas and maxPriorityFeePerGas to support EIP-1559 txs.\n    delete txParams.gasPrice;\n    delete txParams.maxFeePerGas;\n    delete txParams.maxPriorityFeePerGas;\n    const gas = (await this.providerProxy.request<string>({ method: \"eth_estimateGas\", params: [txParams] })) as string;\n    return gas;\n  }\n\n  private async analyzeGasUsage(txMeta: TransactionParams): Promise<{\n    blockGasLimit: string;\n    estimatedGasHex: string;\n  }> {\n    const block = (await this.providerProxy.request<Block>({ method: \"eth_getBlockByNumber\", params: [\"latest\", false] })) as Block;\n    // fallback to block gasLimit\n    const blockGasLimitBN = hexToBn(block.gasLimit as string);\n    const saferGasLimitBN = BnMultiplyByFraction(blockGasLimitBN, 19, 20);\n    let estimatedGasHex = bnToHex(saferGasLimitBN);\n\n    try {\n      estimatedGasHex = await this.estimateTxGas(txMeta);\n    } catch (error: unknown) {\n      log.warn(error);\n    }\n    return { blockGasLimit: block.gasLimit as string, estimatedGasHex };\n  }\n\n  private addGasBuffer(initialGasLimitHex: string, blockGasLimitHex: string, multiplier = 1.5): string {\n    const initialGasLimitBn = hexToBn(initialGasLimitHex);\n    const blockGasLimitBn = hexToBn(blockGasLimitHex);\n    const upperGasLimitBn = blockGasLimitBn.muln(0.9);\n    const bufferedGasLimitBn = initialGasLimitBn.muln(multiplier);\n\n    // if initialGasLimit is above blockGasLimit, dont modify it\n    if (initialGasLimitBn.gt(upperGasLimitBn)) return bnToHex(initialGasLimitBn);\n    // if bufferedGasLimit is below blockGasLimit, use bufferedGasLimit\n    if (bufferedGasLimitBn.lt(upperGasLimitBn)) return bnToHex(bufferedGasLimitBn);\n    // otherwise use blockGasLimit\n    return bnToHex(upperGasLimitBn);\n  }\n\n  private async determineTransactionCategory(txParameters: TransactionParams & { gas?: string }): Promise<{\n    transactionCategory: TxType | null;\n    code?: string;\n  }> {\n    const { data, to } = txParameters;\n    let code = \"\";\n\n    let txCategory: TxType | null;\n\n    if (data && !to) {\n      txCategory = TRANSACTION_TYPES.DEPLOY_CONTRACT;\n    } else {\n      try {\n        code = (await this.providerProxy.request<string>({ method: \"eth_getCode\", params: [to, \"latest\"] })) as string;\n      } catch (error) {\n        log.warn(error);\n      }\n      const codeIsEmpty = !code || code === \"0x\" || code === \"0x0\";\n\n      txCategory = codeIsEmpty ? TRANSACTION_TYPES.SENT_ETHER : TRANSACTION_TYPES.CONTRACT_INTERACTION;\n    }\n\n    return { transactionCategory: txCategory, code };\n  }\n\n  private async getDefaultGasLimit(txParams: TransactionParams & { gas?: string }): Promise<string> {\n    const { transactionCategory } = await this.determineTransactionCategory({ ...txParams });\n\n    if (txParams.gas) {\n      return txParams.gas;\n    }\n\n    if (txParams.to && transactionCategory === TRANSACTION_TYPES.SENT_ETHER) {\n      // if there's data in the params, but there's no contract code, it's not a valid transaction\n      if (txParams.data) {\n        throw Error(\"TxGasUtil - Trying to call a function on a non-contract address\");\n      }\n\n      const TWENTY_ONE_THOUSAND = 21_000;\n\n      // This is a standard ether simple send, gas requirement is exactly 21k\n      return addHexPrefix(TWENTY_ONE_THOUSAND.toString(16));\n    }\n\n    const { blockGasLimit, estimatedGasHex } = await this.analyzeGasUsage(txParams);\n\n    // add additional gas buffer to our estimation for safety\n    const gasLimit = this.addGasBuffer(addHexPrefix(estimatedGasHex), blockGasLimit as string);\n    return gasLimit;\n  }\n}\n","import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine, JRPCMiddleware } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, CustomChainConfig } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { createAccountMiddleware, createChainSwitchMiddleware, createEthMiddleware } from \"../../rpc/ethRpcMiddlewares\";\nimport { AddEthereumChainParameter, IAccountHandlers, IChainSwitchHandlers } from \"../../rpc/interfaces\";\nimport { createJsonRpcClient } from \"../../rpc/jrpcClient\";\nimport { getProviderHandlers } from \"./ethPrivatekeyUtils\";\nimport { TransactionFormatter } from \"./TransactionFormatter\";\n\nexport interface EthereumPrivKeyProviderConfig extends BaseProviderConfig {\n  chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n}\n\nexport interface EthereumPrivKeyProviderState extends BaseProviderState {\n  privateKey?: string;\n}\nexport class EthereumPrivateKeyProvider extends BaseProvider<BaseProviderConfig, EthereumPrivKeyProviderState, string> {\n  constructor({ config, state }: { config: EthereumPrivKeyProviderConfig; state?: EthereumPrivKeyProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.EIP155 } }, state });\n  }\n\n  public static getProviderInstance = async (params: {\n    privKey: string;\n    chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n  }): Promise<EthereumPrivateKeyProvider> => {\n    const providerFactory = new EthereumPrivateKeyProvider({ config: { chainConfig: params.chainConfig } });\n    await providerFactory.setupProvider(params.privKey);\n    return providerFactory;\n  };\n\n  public async enable(): Promise<string[]> {\n    if (!this.state.privateKey)\n      throw ethErrors.provider.custom({ message: \"Private key is not found in state, plz pass it in constructor state param\", code: 4902 });\n    await this.setupProvider(this.state.privateKey);\n    return this._providerEngineProxy.request({ method: \"eth_accounts\" });\n  }\n\n  public async setupProvider(privKey: string): Promise<void> {\n    const txFormatter = new TransactionFormatter({\n      getProviderEngineProxy: this.getProviderEngineProxy.bind(this),\n    });\n    const providerHandlers = getProviderHandlers({\n      txFormatter,\n      privKey,\n      getProviderEngineProxy: this.getProviderEngineProxy.bind(this),\n    });\n    const ethMiddleware = createEthMiddleware(providerHandlers);\n    const chainSwitchMiddleware = this.getChainSwitchMiddleware();\n    const engine = new JRPCEngine();\n    // Not a partial anymore because of checks in ctor\n    const { networkMiddleware } = createJsonRpcClient(this.config.chainConfig as CustomChainConfig);\n    engine.push(ethMiddleware);\n    engine.push(chainSwitchMiddleware);\n    engine.push(this.getAccountMiddleware());\n    engine.push(networkMiddleware);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await txFormatter.init();\n    await this.lookupNetwork();\n  }\n\n  public async updateAccount(params: { privateKey: string }): Promise<void> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const existingKey = await this._providerEngineProxy.request<unknown, string>({ method: \"eth_private_key\" });\n    if (existingKey !== params.privateKey) {\n      await this.setupProvider(params.privateKey);\n      this._providerEngineProxy.emit(\"accountsChanged\", {\n        accounts: await this._providerEngineProxy.request<unknown, string[]>({ method: \"eth_accounts\" }),\n      });\n    }\n  }\n\n  public async switchChain(params: { chainId: string }): Promise<void> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const chainConfig = this.getChainConfig(params.chainId);\n    this.update({\n      chainId: \"loading\",\n    });\n    this.configure({ chainConfig });\n    const privKey = await this._providerEngineProxy.request<unknown, string>({ method: \"eth_private_key\" });\n    await this.setupProvider(privKey);\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const { chainId } = this.config.chainConfig;\n    if (!chainId) throw ethErrors.rpc.invalidParams(\"chainId is required while lookupNetwork\");\n    const network = await this._providerEngineProxy.request<string[], string>({\n      method: \"net_version\",\n      params: [],\n    });\n\n    if (parseInt(chainId, 16) !== parseInt(network, 10)) throw ethErrors.provider.chainDisconnected(`Invalid network, net_version is: ${network}`);\n    if (this.state.chainId !== chainId) {\n      this._providerEngineProxy.emit(\"chainChanged\", chainId);\n      this._providerEngineProxy.emit(\"connect\", { chainId });\n    }\n    this.update({ chainId });\n    return network;\n  }\n\n  private getChainSwitchMiddleware(): JRPCMiddleware<unknown, unknown> {\n    const chainSwitchHandlers: IChainSwitchHandlers = {\n      addChain: async (params: AddEthereumChainParameter): Promise<void> => {\n        const { chainId, chainName, rpcUrls, blockExplorerUrls, nativeCurrency } = params;\n        this.addChain({\n          chainNamespace: \"eip155\",\n          chainId,\n          ticker: nativeCurrency?.symbol || \"ETH\",\n          tickerName: nativeCurrency?.name || \"Ether\",\n          displayName: chainName,\n          rpcTarget: rpcUrls[0],\n          blockExplorer: blockExplorerUrls?.[0] || \"\",\n          decimals: nativeCurrency?.decimals || 18,\n        });\n      },\n      switchChain: async (params: { chainId: string }): Promise<void> => {\n        const { chainId } = params;\n        await this.switchChain({ chainId });\n      },\n    };\n    const chainSwitchMiddleware = createChainSwitchMiddleware(chainSwitchHandlers);\n    return chainSwitchMiddleware;\n  }\n\n  private getAccountMiddleware(): JRPCMiddleware<unknown, unknown> {\n    const accountHandlers: IAccountHandlers = {\n      updatePrivatekey: async (params: { privateKey: string }): Promise<void> => {\n        const { privateKey } = params;\n        await this.updateAccount({ privateKey });\n      },\n    };\n    return createAccountMiddleware(accountHandlers);\n  }\n}\n","import { TypeOutput, intToBuffer, toType } from '@ethereumjs/util'\nimport { buf as crc32Buffer } from 'crc-32'\nimport { EventEmitter } from 'events'\n\nimport * as goerli from './chains/goerli.json'\nimport * as mainnet from './chains/mainnet.json'\nimport * as rinkeby from './chains/rinkeby.json'\nimport * as ropsten from './chains/ropsten.json'\nimport * as sepolia from './chains/sepolia.json'\nimport { EIPs } from './eips'\nimport { Chain, CustomChain, Hardfork } from './enums'\nimport { hardforks as HARDFORK_SPECS } from './hardforks'\nimport { parseGethGenesis } from './utils'\n\nimport type { ConsensusAlgorithm, ConsensusType } from './enums'\nimport type {\n  BootstrapNodeConfig,\n  CasperConfig,\n  ChainConfig,\n  ChainName,\n  ChainsConfig,\n  CliqueConfig,\n  CommonOpts,\n  CustomCommonOpts,\n  EthashConfig,\n  GenesisBlockConfig,\n  GethConfigOpts,\n  HardforkConfig,\n} from './types'\nimport type { BigIntLike } from '@ethereumjs/util'\n\ntype HardforkSpecKeys = keyof typeof HARDFORK_SPECS\ntype HardforkSpecValues = typeof HARDFORK_SPECS[HardforkSpecKeys]\n/**\n * Common class to access chain and hardfork parameters and to provide\n * a unified and shared view on the network and hardfork state.\n *\n * Use the {@link Common.custom} static constructor for creating simple\n * custom chain {@link Common} objects (more complete custom chain setups\n * can be created via the main constructor and the {@link CommonOpts.customChains} parameter).\n */\nexport class Common extends EventEmitter {\n  readonly DEFAULT_HARDFORK: string | Hardfork\n\n  private _chainParams: ChainConfig\n  private _hardfork: string | Hardfork\n  private _eips: number[] = []\n  private _customChains: ChainConfig[]\n\n  private HARDFORK_CHANGES: [HardforkSpecKeys, HardforkSpecValues][]\n\n  /**\n   * Creates a {@link Common} object for a custom chain, based on a standard one.\n   *\n   * It uses all the {@link Chain} parameters from the {@link baseChain} option except the ones overridden\n   * in a provided {@link chainParamsOrName} dictionary. Some usage example:\n   *\n   * ```javascript\n   * Common.custom({chainId: 123})\n   * ```\n   *\n   * There are also selected supported custom chains which can be initialized by using one of the\n   * {@link CustomChains} for {@link chainParamsOrName}, e.g.:\n   *\n   * ```javascript\n   * Common.custom(CustomChains.MaticMumbai)\n   * ```\n   *\n   * Note that these supported custom chains only provide some base parameters (usually the chain and\n   * network ID and a name) and can only be used for selected use cases (e.g. sending a tx with\n   * the `@ethereumjs/tx` library to a Layer-2 chain).\n   *\n   * @param chainParamsOrName Custom parameter dict (`name` will default to `custom-chain`) or string with name of a supported custom chain\n   * @param opts Custom chain options to set the {@link CustomCommonOpts.baseChain}, selected {@link CustomCommonOpts.hardfork} and others\n   */\n  static custom(\n    chainParamsOrName: Partial<ChainConfig> | CustomChain,\n    opts: CustomCommonOpts = {}\n  ): Common {\n    const baseChain = opts.baseChain ?? 'mainnet'\n    const standardChainParams = { ...Common._getChainParams(baseChain) }\n    standardChainParams['name'] = 'custom-chain'\n\n    if (typeof chainParamsOrName !== 'string') {\n      return new Common({\n        chain: {\n          ...standardChainParams,\n          ...chainParamsOrName,\n        },\n        ...opts,\n      })\n    } else {\n      if (chainParamsOrName === CustomChain.PolygonMainnet) {\n        return Common.custom(\n          {\n            name: CustomChain.PolygonMainnet,\n            chainId: 137,\n            networkId: 137,\n          },\n          opts\n        )\n      }\n      if (chainParamsOrName === CustomChain.PolygonMumbai) {\n        return Common.custom(\n          {\n            name: CustomChain.PolygonMumbai,\n            chainId: 80001,\n            networkId: 80001,\n          },\n          opts\n        )\n      }\n      if (chainParamsOrName === CustomChain.ArbitrumRinkebyTestnet) {\n        return Common.custom(\n          {\n            name: CustomChain.ArbitrumRinkebyTestnet,\n            chainId: 421611,\n            networkId: 421611,\n          },\n          opts\n        )\n      }\n      if (chainParamsOrName === CustomChain.ArbitrumOne) {\n        return Common.custom(\n          {\n            name: CustomChain.ArbitrumOne,\n            chainId: 42161,\n            networkId: 42161,\n          },\n          opts\n        )\n      }\n      if (chainParamsOrName === CustomChain.xDaiChain) {\n        return Common.custom(\n          {\n            name: CustomChain.xDaiChain,\n            chainId: 100,\n            networkId: 100,\n          },\n          opts\n        )\n      }\n\n      if (chainParamsOrName === CustomChain.OptimisticKovan) {\n        return Common.custom(\n          {\n            name: CustomChain.OptimisticKovan,\n            chainId: 69,\n            networkId: 69,\n          },\n          // Optimism has not implemented the London hardfork yet (targeting Q1.22)\n          { hardfork: Hardfork.Berlin, ...opts }\n        )\n      }\n\n      if (chainParamsOrName === CustomChain.OptimisticEthereum) {\n        return Common.custom(\n          {\n            name: CustomChain.OptimisticEthereum,\n            chainId: 10,\n            networkId: 10,\n          },\n          // Optimism has not implemented the London hardfork yet (targeting Q1.22)\n          { hardfork: Hardfork.Berlin, ...opts }\n        )\n      }\n      throw new Error(`Custom chain ${chainParamsOrName} not supported`)\n    }\n  }\n\n  /**\n   * Static method to load and set common from a geth genesis json\n   * @param genesisJson json of geth configuration\n   * @param { chain, eips, genesisHash, hardfork, mergeForkIdPostMerge } to further configure the common instance\n   * @returns Common\n   */\n  static fromGethGenesis(\n    genesisJson: any,\n    { chain, eips, genesisHash, hardfork, mergeForkIdPostMerge }: GethConfigOpts\n  ): Common {\n    const genesisParams = parseGethGenesis(genesisJson, chain, mergeForkIdPostMerge)\n    const common = new Common({\n      chain: genesisParams.name ?? 'custom',\n      customChains: [genesisParams],\n      eips,\n      hardfork: hardfork ?? genesisParams.hardfork,\n    })\n    if (genesisHash !== undefined) {\n      common.setForkHashes(genesisHash)\n    }\n    return common\n  }\n\n  /**\n   * Static method to determine if a {@link chainId} is supported as a standard chain\n   * @param chainId bigint id (`1`) of a standard chain\n   * @returns boolean\n   */\n  static isSupportedChainId(chainId: bigint): boolean {\n    const initializedChains = this._getInitializedChains()\n    return Boolean((initializedChains['names'] as ChainName)[chainId.toString()])\n  }\n\n  private static _getChainParams(\n    chain: string | number | Chain | bigint,\n    customChains?: ChainConfig[]\n  ): ChainConfig {\n    const initializedChains = this._getInitializedChains(customChains)\n    if (typeof chain === 'number' || typeof chain === 'bigint') {\n      chain = chain.toString()\n\n      if ((initializedChains['names'] as ChainName)[chain]) {\n        const name: string = (initializedChains['names'] as ChainName)[chain]\n        return initializedChains[name] as ChainConfig\n      }\n\n      throw new Error(`Chain with ID ${chain} not supported`)\n    }\n\n    if (initializedChains[chain] !== undefined) {\n      return initializedChains[chain] as ChainConfig\n    }\n\n    throw new Error(`Chain with name ${chain} not supported`)\n  }\n\n  constructor(opts: CommonOpts) {\n    super()\n    this._customChains = opts.customChains ?? []\n    this._chainParams = this.setChain(opts.chain)\n    this.DEFAULT_HARDFORK = this._chainParams.defaultHardfork ?? Hardfork.Merge\n    // Assign hardfork changes in the sequence of the applied hardforks\n    this.HARDFORK_CHANGES = this.hardforks().map((hf) => [\n      hf.name as HardforkSpecKeys,\n      HARDFORK_SPECS[hf.name as HardforkSpecKeys],\n    ])\n    this._hardfork = this.DEFAULT_HARDFORK\n    if (opts.hardfork !== undefined) {\n      this.setHardfork(opts.hardfork)\n    }\n    if (opts.eips) {\n      this.setEIPs(opts.eips)\n    }\n  }\n\n  /**\n   * Sets the chain\n   * @param chain String ('mainnet') or Number (1) chain representation.\n   *              Or, a Dictionary of chain parameters for a private network.\n   * @returns The dictionary with parameters set as chain\n   */\n  setChain(chain: string | number | Chain | bigint | object): ChainConfig {\n    if (typeof chain === 'number' || typeof chain === 'bigint' || typeof chain === 'string') {\n      this._chainParams = Common._getChainParams(chain, this._customChains)\n    } else if (typeof chain === 'object') {\n      if (this._customChains.length > 0) {\n        throw new Error(\n          'Chain must be a string, number, or bigint when initialized with customChains passed in'\n        )\n      }\n      const required = ['networkId', 'genesis', 'hardforks', 'bootstrapNodes']\n      for (const param of required) {\n        if (!(param in chain)) {\n          throw new Error(`Missing required chain parameter: ${param}`)\n        }\n      }\n      this._chainParams = chain as ChainConfig\n    } else {\n      throw new Error('Wrong input format')\n    }\n    for (const hf of this.hardforks()) {\n      if (hf.block === undefined) {\n        throw new Error(`Hardfork cannot have undefined block number`)\n      }\n    }\n    return this._chainParams\n  }\n\n  /**\n   * Sets the hardfork to get params for\n   * @param hardfork String identifier (e.g. 'byzantium') or {@link Hardfork} enum\n   */\n  setHardfork(hardfork: string | Hardfork): void {\n    let existing = false\n    for (const hfChanges of this.HARDFORK_CHANGES) {\n      if (hfChanges[0] === hardfork) {\n        if (this._hardfork !== hardfork) {\n          this._hardfork = hardfork\n          this.emit('hardforkChanged', hardfork)\n        }\n        existing = true\n      }\n    }\n    if (!existing) {\n      throw new Error(`Hardfork with name ${hardfork} not supported`)\n    }\n  }\n\n  /**\n   * Returns the hardfork based on the block number or an optional\n   * total difficulty (Merge HF) provided.\n   *\n   * An optional TD takes precedence in case the corresponding HF block\n   * is set to `null` or otherwise needs to match (if not an error\n   * will be thrown).\n   *\n   * @param blockNumber\n   * @param td : total difficulty of the parent block (for block hf) OR of the chain latest (for chain hf)\n   * @param timestamp: timestamp in seconds at which block was/is to be minted\n   * @returns The name of the HF\n   */\n  getHardforkByBlockNumber(\n    blockNumber: BigIntLike,\n    td?: BigIntLike,\n    timestamp?: BigIntLike\n  ): string {\n    blockNumber = toType(blockNumber, TypeOutput.BigInt)\n    td = toType(td, TypeOutput.BigInt)\n    timestamp = toType(timestamp, TypeOutput.Number)\n\n    // Filter out hardforks with no block number, no ttd or no timestamp (i.e. unapplied hardforks)\n    const hfs = this.hardforks().filter(\n      (hf) =>\n        hf.block !== null || (hf.ttd !== null && hf.ttd !== undefined) || hf.timestamp !== undefined\n    )\n    const mergeIndex = hfs.findIndex((hf) => hf.ttd !== null && hf.ttd !== undefined)\n    const doubleTTDHF = hfs\n      .slice(mergeIndex + 1)\n      .findIndex((hf) => hf.ttd !== null && hf.ttd !== undefined)\n    if (doubleTTDHF >= 0) {\n      throw Error(`More than one merge hardforks found with ttd specified`)\n    }\n\n    // Find the first hardfork that has a block number greater than `blockNumber`\n    // (skips the merge hardfork since it cannot have a block number specified).\n    // If timestamp is not provided, it also skips timestamps hardforks to continue\n    // discovering/checking number hardforks.\n    let hfIndex = hfs.findIndex(\n      (hf) =>\n        (hf.block !== null && hf.block > blockNumber) ||\n        (timestamp !== undefined && Number(hf.timestamp) > timestamp)\n    )\n\n    if (hfIndex === -1) {\n      // all hardforks apply, set hfIndex to the last one as that's the candidate\n      hfIndex = hfs.length\n    } else if (hfIndex === 0) {\n      // cannot have a case where a block number is before all applied hardforks\n      // since the chain has to start with a hardfork\n      throw Error('Must have at least one hardfork at block 0')\n    }\n\n    // If timestamp is not provided, we need to rollback to the last hf with block or ttd\n    if (timestamp === undefined) {\n      const stepBack = hfs\n        .slice(0, hfIndex)\n        .reverse()\n        .findIndex((hf) => hf.block !== null || hf.ttd !== undefined)\n      hfIndex = hfIndex - stepBack\n    }\n    // Move hfIndex one back to arrive at candidate hardfork\n    hfIndex = hfIndex - 1\n\n    // If the timestamp was not provided, we could have skipped timestamp hardforks to look for number\n    // hardforks. so it will now be needed to rollback\n    if (hfs[hfIndex].block === null && hfs[hfIndex].timestamp === undefined) {\n      // We're on the merge hardfork.  Let's check the TTD\n      if (td === undefined || td === null || BigInt(hfs[hfIndex].ttd!) > td) {\n        // Merge ttd greater than current td so we're on hardfork before merge\n        hfIndex -= 1\n      }\n    } else {\n      if (mergeIndex >= 0 && td !== undefined && td !== null) {\n        if (hfIndex >= mergeIndex && BigInt(hfs[mergeIndex].ttd!) > td) {\n          throw Error('Maximum HF determined by total difficulty is lower than the block number HF')\n        } else if (hfIndex < mergeIndex && BigInt(hfs[mergeIndex].ttd!) <= td) {\n          throw Error('HF determined by block number is lower than the minimum total difficulty HF')\n        }\n      }\n    }\n\n    const hfStartIndex = hfIndex\n    // Move the hfIndex to the end of the hardforks that might be scheduled on the same block/timestamp\n    // This won't anyway be the case with Merge hfs\n    for (; hfIndex < hfs.length - 1; hfIndex++) {\n      // break out if hfIndex + 1 is not scheduled at hfIndex\n      if (\n        hfs[hfIndex].block !== hfs[hfIndex + 1].block ||\n        hfs[hfIndex].timestamp !== hfs[hfIndex + 1].timestamp\n      ) {\n        break\n      }\n    }\n\n    if (timestamp) {\n      const minTimeStamp = hfs\n        .slice(0, hfStartIndex)\n        .reduce((acc: number, hf: HardforkConfig) => Math.max(Number(hf.timestamp ?? '0'), acc), 0)\n      if (minTimeStamp > timestamp) {\n        throw Error(`Maximum HF determined by timestamp is lower than the block number/ttd HF`)\n      }\n\n      const maxTimeStamp = hfs\n        .slice(hfIndex + 1)\n        .reduce(\n          (acc: number, hf: HardforkConfig) => Math.min(Number(hf.timestamp ?? timestamp), acc),\n          timestamp\n        )\n      if (maxTimeStamp < timestamp) {\n        throw Error(`Maximum HF determined by block number/ttd is lower than timestamp HF`)\n      }\n    }\n    const hardfork = hfs[hfIndex]\n    return hardfork.name\n  }\n\n  /**\n   * Sets a new hardfork based on the block number or an optional\n   * total difficulty (Merge HF) provided.\n   *\n   * An optional TD takes precedence in case the corresponding HF block\n   * is set to `null` or otherwise needs to match (if not an error\n   * will be thrown).\n   *\n   * @param blockNumber\n   * @param td\n   * @param timestamp\n   * @returns The name of the HF set\n   */\n  setHardforkByBlockNumber(\n    blockNumber: BigIntLike,\n    td?: BigIntLike,\n    timestamp?: BigIntLike\n  ): string {\n    const hardfork = this.getHardforkByBlockNumber(blockNumber, td, timestamp)\n    this.setHardfork(hardfork)\n    return hardfork\n  }\n\n  /**\n   * Internal helper function, returns the params for the given hardfork for the chain set\n   * @param hardfork Hardfork name\n   * @returns Dictionary with hardfork params or null if hardfork not on chain\n   */\n  _getHardfork(hardfork: string | Hardfork): HardforkConfig | null {\n    const hfs = this.hardforks()\n    for (const hf of hfs) {\n      if (hf['name'] === hardfork) return hf\n    }\n    return null\n  }\n\n  /**\n   * Sets the active EIPs\n   * @param eips\n   */\n  setEIPs(eips: number[] = []) {\n    for (const eip of eips) {\n      if (!(eip in EIPs)) {\n        throw new Error(`${eip} not supported`)\n      }\n      const minHF = this.gteHardfork(EIPs[eip]['minimumHardfork'])\n      if (!minHF) {\n        throw new Error(\n          `${eip} cannot be activated on hardfork ${this.hardfork()}, minimumHardfork: ${minHF}`\n        )\n      }\n      if (EIPs[eip].requiredEIPs !== undefined) {\n        for (const elem of EIPs[eip].requiredEIPs) {\n          if (!(eips.includes(elem) || this.isActivatedEIP(elem))) {\n            throw new Error(`${eip} requires EIP ${elem}, but is not included in the EIP list`)\n          }\n        }\n      }\n    }\n    this._eips = eips\n  }\n\n  /**\n   * Returns a parameter for the current chain setup\n   *\n   * If the parameter is present in an EIP, the EIP always takes precedence.\n   * Otherwise the parameter if taken from the latest applied HF with\n   * a change on the respective parameter.\n   *\n   * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')\n   * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n   * @returns The value requested or `BigInt(0)` if not found\n   */\n  param(topic: string, name: string): bigint {\n    // TODO: consider the case that different active EIPs\n    // can change the same parameter\n    let value\n    for (const eip of this._eips) {\n      value = this.paramByEIP(topic, name, eip)\n      if (value !== undefined) return value\n    }\n    return this.paramByHardfork(topic, name, this._hardfork)\n  }\n\n  /**\n   * Returns the parameter corresponding to a hardfork\n   * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')\n   * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n   * @param hardfork Hardfork name\n   * @returns The value requested or `BigInt(0)` if not found\n   */\n  paramByHardfork(topic: string, name: string, hardfork: string | Hardfork): bigint {\n    let value = null\n    for (const hfChanges of this.HARDFORK_CHANGES) {\n      // EIP-referencing HF file (e.g. berlin.json)\n      if ('eips' in hfChanges[1]) {\n        const hfEIPs = hfChanges[1]['eips']\n        for (const eip of hfEIPs) {\n          const valueEIP = this.paramByEIP(topic, name, eip)\n          value = typeof valueEIP === 'bigint' ? valueEIP : value\n        }\n        // Parameter-inlining HF file (e.g. istanbul.json)\n      } else {\n        if (hfChanges[1][topic] === undefined) {\n          throw new Error(`Topic ${topic} not defined`)\n        }\n        if (hfChanges[1][topic][name] !== undefined) {\n          value = hfChanges[1][topic][name].v\n        }\n      }\n      if (hfChanges[0] === hardfork) break\n    }\n    return BigInt(value ?? 0)\n  }\n\n  /**\n   * Returns a parameter corresponding to an EIP\n   * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')\n   * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n   * @param eip Number of the EIP\n   * @returns The value requested or `undefined` if not found\n   */\n  paramByEIP(topic: string, name: string, eip: number): bigint | undefined {\n    if (!(eip in EIPs)) {\n      throw new Error(`${eip} not supported`)\n    }\n\n    const eipParams = EIPs[eip]\n    if (!(topic in eipParams)) {\n      throw new Error(`Topic ${topic} not defined`)\n    }\n    if (eipParams[topic][name] === undefined) {\n      return undefined\n    }\n    const value = eipParams[topic][name].v\n    return BigInt(value)\n  }\n\n  /**\n   * Returns a parameter for the hardfork active on block number or\n   * optional provided total difficulty (Merge HF)\n   * @param topic Parameter topic\n   * @param name Parameter name\n   * @param blockNumber Block number\n   * @param td Total difficulty\n   *    * @returns The value requested or `BigInt(0)` if not found\n   */\n  paramByBlock(\n    topic: string,\n    name: string,\n    blockNumber: BigIntLike,\n    td?: BigIntLike,\n    timestamp?: BigIntLike\n  ): bigint {\n    const hardfork = this.getHardforkByBlockNumber(blockNumber, td, timestamp)\n    return this.paramByHardfork(topic, name, hardfork)\n  }\n\n  /**\n   * Checks if an EIP is activated by either being included in the EIPs\n   * manually passed in with the {@link CommonOpts.eips} or in a\n   * hardfork currently being active\n   *\n   * Note: this method only works for EIPs being supported\n   * by the {@link CommonOpts.eips} constructor option\n   * @param eip\n   */\n  isActivatedEIP(eip: number): boolean {\n    if (this.eips().includes(eip)) {\n      return true\n    }\n    for (const hfChanges of this.HARDFORK_CHANGES) {\n      const hf = hfChanges[1]\n      if (this.gteHardfork(hf['name']) && 'eips' in hf) {\n        if ((hf['eips'] as number[]).includes(eip)) {\n          return true\n        }\n      }\n    }\n    return false\n  }\n\n  /**\n   * Checks if set or provided hardfork is active on block number\n   * @param hardfork Hardfork name or null (for HF set)\n   * @param blockNumber\n   * @returns True if HF is active on block number\n   */\n  hardforkIsActiveOnBlock(hardfork: string | Hardfork | null, blockNumber: BigIntLike): boolean {\n    blockNumber = toType(blockNumber, TypeOutput.BigInt)\n    hardfork = hardfork ?? this._hardfork\n    const hfBlock = this.hardforkBlock(hardfork)\n    if (typeof hfBlock === 'bigint' && hfBlock !== BigInt(0) && blockNumber >= hfBlock) {\n      return true\n    }\n    return false\n  }\n\n  /**\n   * Alias to hardforkIsActiveOnBlock when hardfork is set\n   * @param blockNumber\n   * @returns True if HF is active on block number\n   */\n  activeOnBlock(blockNumber: BigIntLike): boolean {\n    return this.hardforkIsActiveOnBlock(null, blockNumber)\n  }\n\n  /**\n   * Sequence based check if given or set HF1 is greater than or equal HF2\n   * @param hardfork1 Hardfork name or null (if set)\n   * @param hardfork2 Hardfork name\n   * @param opts Hardfork options\n   * @returns True if HF1 gte HF2\n   */\n  hardforkGteHardfork(hardfork1: string | Hardfork | null, hardfork2: string | Hardfork): boolean {\n    hardfork1 = hardfork1 ?? this._hardfork\n    const hardforks = this.hardforks()\n\n    let posHf1 = -1,\n      posHf2 = -1\n    let index = 0\n    for (const hf of hardforks) {\n      if (hf['name'] === hardfork1) posHf1 = index\n      if (hf['name'] === hardfork2) posHf2 = index\n      index += 1\n    }\n    return posHf1 >= posHf2 && posHf2 !== -1\n  }\n\n  /**\n   * Alias to hardforkGteHardfork when hardfork is set\n   * @param hardfork Hardfork name\n   * @returns True if hardfork set is greater than hardfork provided\n   */\n  gteHardfork(hardfork: string | Hardfork): boolean {\n    return this.hardforkGteHardfork(null, hardfork)\n  }\n\n  /**\n   * Returns the hardfork change block for hardfork provided or set\n   * @param hardfork Hardfork name, optional if HF set\n   * @returns Block number or null if unscheduled\n   */\n  hardforkBlock(hardfork?: string | Hardfork): bigint | null {\n    hardfork = hardfork ?? this._hardfork\n    const block = this._getHardfork(hardfork)?.['block']\n    if (block === undefined || block === null) {\n      return null\n    }\n    return BigInt(block)\n  }\n\n  hardforkTimestamp(hardfork?: string | Hardfork): bigint | null {\n    hardfork = hardfork ?? this._hardfork\n    const timestamp = this._getHardfork(hardfork)?.['timestamp']\n    if (timestamp === undefined || timestamp === null) {\n      return null\n    }\n    return BigInt(timestamp)\n  }\n\n  /**\n   * Returns the hardfork change block for eip\n   * @param eip EIP number\n   * @returns Block number or null if unscheduled\n   */\n  eipBlock(eip: number): bigint | null {\n    for (const hfChanges of this.HARDFORK_CHANGES) {\n      const hf = hfChanges[1]\n      if ('eips' in hf) {\n        // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n        if (hf['eips'].includes(eip)) {\n          return this.hardforkBlock(hfChanges[0])\n        }\n      }\n    }\n    return null\n  }\n\n  /**\n   * Returns the hardfork change total difficulty (Merge HF) for hardfork provided or set\n   * @param hardfork Hardfork name, optional if HF set\n   * @returns Total difficulty or null if no set\n   */\n  hardforkTTD(hardfork?: string | Hardfork): bigint | null {\n    hardfork = hardfork ?? this._hardfork\n    const ttd = this._getHardfork(hardfork)?.['ttd']\n    if (ttd === undefined || ttd === null) {\n      return null\n    }\n    return BigInt(ttd)\n  }\n\n  /**\n   * True if block number provided is the hardfork (given or set) change block\n   * @param blockNumber Number of the block to check\n   * @param hardfork Hardfork name, optional if HF set\n   * @returns True if blockNumber is HF block\n   * @deprecated\n   */\n  isHardforkBlock(blockNumber: BigIntLike, hardfork?: string | Hardfork): boolean {\n    blockNumber = toType(blockNumber, TypeOutput.BigInt)\n    hardfork = hardfork ?? this._hardfork\n    const block = this.hardforkBlock(hardfork)\n    return typeof block === 'bigint' && block !== BigInt(0) ? block === blockNumber : false\n  }\n\n  /**\n   * Returns the change block for the next hardfork after the hardfork provided or set\n   * @param hardfork Hardfork name, optional if HF set\n   * @returns Block timestamp, number or null if not available\n   */\n  nextHardforkBlockOrTimestamp(hardfork?: string | Hardfork): bigint | null {\n    hardfork = hardfork ?? this._hardfork\n    const hfs = this.hardforks()\n    let hfIndex = hfs.findIndex((hf) => hf.name === hardfork)\n    // If the current hardfork is merge, go one behind as merge hf is not part of these\n    // calcs even if the merge hf block is set\n    if (hardfork === Hardfork.Merge) {\n      hfIndex -= 1\n    }\n    // Hardfork not found\n    if (hfIndex < 0) {\n      return null\n    }\n\n    let currHfTimeOrBlock = hfs[hfIndex].timestamp ?? hfs[hfIndex].block\n    currHfTimeOrBlock =\n      currHfTimeOrBlock !== null && currHfTimeOrBlock !== undefined\n        ? Number(currHfTimeOrBlock)\n        : null\n\n    const nextHf = hfs.slice(hfIndex + 1).find((hf) => {\n      let hfTimeOrBlock = hf.timestamp ?? hf.block\n      hfTimeOrBlock =\n        hfTimeOrBlock !== null && hfTimeOrBlock !== undefined ? Number(hfTimeOrBlock) : null\n      return (\n        hf.name !== Hardfork.Merge &&\n        hfTimeOrBlock !== null &&\n        hfTimeOrBlock !== undefined &&\n        hfTimeOrBlock !== currHfTimeOrBlock\n      )\n    })\n    // If no next hf found with valid block or timestamp return null\n    if (nextHf === undefined) {\n      return null\n    }\n\n    const nextHfBlock = nextHf.timestamp ?? nextHf.block\n    if (nextHfBlock === null || nextHfBlock === undefined) {\n      return null\n    }\n\n    return BigInt(nextHfBlock)\n  }\n\n  /**\n   * Returns the change block for the next hardfork after the hardfork provided or set\n   * @param hardfork Hardfork name, optional if HF set\n   * @returns Block number or null if not available\n   * @deprecated\n   */\n  nextHardforkBlock(hardfork?: string | Hardfork): bigint | null {\n    hardfork = hardfork ?? this._hardfork\n    let hfBlock = this.hardforkBlock(hardfork)\n    // If this is a merge hardfork with block not set, then we fallback to previous hardfork\n    // to find the nextHardforkBlock\n    if (hfBlock === null && hardfork === Hardfork.Merge) {\n      const hfs = this.hardforks()\n      const mergeIndex = hfs.findIndex((hf) => hf.ttd !== null && hf.ttd !== undefined)\n      if (mergeIndex < 0) {\n        throw Error(`Merge hardfork should have been found`)\n      }\n      hfBlock = this.hardforkBlock(hfs[mergeIndex - 1].name)\n    }\n    if (hfBlock === null) {\n      return null\n    }\n    // Next fork block number or null if none available\n    // Logic: if accumulator is still null and on the first occurrence of\n    // a block greater than the current hfBlock set the accumulator,\n    // pass on the accumulator as the final result from this time on\n    const nextHfBlock = this.hardforks().reduce((acc: bigint | null, hf: HardforkConfig) => {\n      // We need to ignore the merge block in our next hardfork calc\n      const block = BigInt(\n        hf.block === null || (hf.ttd !== undefined && hf.ttd !== null) ? 0 : hf.block\n      )\n      // Typescript can't seem to follow that the hfBlock is not null at this point\n      return block > hfBlock! && acc === null ? block : acc\n    }, null)\n    return nextHfBlock\n  }\n\n  /**\n   * True if block number provided is the hardfork change block following the hardfork given or set\n   * @param blockNumber Number of the block to check\n   * @param hardfork Hardfork name, optional if HF set\n   * @returns True if blockNumber is HF block\n   * @deprecated\n   */\n  isNextHardforkBlock(blockNumber: BigIntLike, hardfork?: string | Hardfork): boolean {\n    blockNumber = toType(blockNumber, TypeOutput.BigInt)\n    hardfork = hardfork ?? this._hardfork\n    const nextHardforkBlock = this.nextHardforkBlock(hardfork)\n\n    return nextHardforkBlock === null ? false : nextHardforkBlock === blockNumber\n  }\n\n  /**\n   * Internal helper function to calculate a fork hash\n   * @param hardfork Hardfork name\n   * @param genesisHash Genesis block hash of the chain\n   * @returns Fork hash as hex string\n   */\n  _calcForkHash(hardfork: string | Hardfork, genesisHash: Buffer) {\n    let hfBuffer = Buffer.alloc(0)\n    let prevBlockOrTime = 0\n    for (const hf of this.hardforks()) {\n      const { block, timestamp, name } = hf\n      // Timestamp to be used for timestamp based hfs even if we may bundle\n      // block number with them retrospectively\n      let blockOrTime = timestamp ?? block\n      blockOrTime = blockOrTime !== null ? Number(blockOrTime) : null\n\n      // Skip for chainstart (0), not applied HFs (null) and\n      // when already applied on same blockOrTime HFs\n      // and on the merge since forkhash doesn't change on merge hf\n      if (\n        typeof blockOrTime === 'number' &&\n        blockOrTime !== 0 &&\n        blockOrTime !== prevBlockOrTime &&\n        name !== Hardfork.Merge\n      ) {\n        const hfBlockBuffer = Buffer.from(blockOrTime.toString(16).padStart(16, '0'), 'hex')\n        hfBuffer = Buffer.concat([hfBuffer, hfBlockBuffer])\n        prevBlockOrTime = blockOrTime\n      }\n\n      if (hf.name === hardfork) break\n    }\n    const inputBuffer = Buffer.concat([genesisHash, hfBuffer])\n\n    // CRC32 delivers result as signed (negative) 32-bit integer,\n    // convert to hex string\n    const forkhash = intToBuffer(crc32Buffer(inputBuffer) >>> 0).toString('hex')\n    return `0x${forkhash}`\n  }\n\n  /**\n   * Returns an eth/64 compliant fork hash (EIP-2124)\n   * @param hardfork Hardfork name, optional if HF set\n   * @param genesisHash Genesis block hash of the chain, optional if already defined and not needed to be calculated\n   */\n  forkHash(hardfork?: string | Hardfork, genesisHash?: Buffer): string {\n    hardfork = hardfork ?? this._hardfork\n    const data = this._getHardfork(hardfork)\n    if (\n      data === null ||\n      (data?.block === null && data?.timestamp === undefined && data?.ttd === undefined)\n    ) {\n      const msg = 'No fork hash calculation possible for future hardfork'\n      throw new Error(msg)\n    }\n    if (data?.forkHash !== null && data?.forkHash !== undefined) {\n      return data.forkHash\n    }\n    if (!genesisHash) throw new Error('genesisHash required for forkHash calculation')\n    return this._calcForkHash(hardfork, genesisHash)\n  }\n\n  /**\n   *\n   * @param forkHash Fork hash as a hex string\n   * @returns Array with hardfork data (name, block, forkHash)\n   */\n  hardforkForForkHash(forkHash: string): HardforkConfig | null {\n    const resArray = this.hardforks().filter((hf: HardforkConfig) => {\n      return hf.forkHash === forkHash\n    })\n    return resArray.length >= 1 ? resArray[resArray.length - 1] : null\n  }\n\n  /**\n   * Sets any missing forkHashes on the passed-in {@link Common} instance\n   * @param common The {@link Common} to set the forkHashes for\n   * @param genesisHash The genesis block hash\n   */\n  setForkHashes(genesisHash: Buffer) {\n    for (const hf of this.hardforks()) {\n      const blockOrTime = hf.timestamp ?? hf.block\n      if (\n        (hf.forkHash === null || hf.forkHash === undefined) &&\n        ((blockOrTime !== null && blockOrTime !== undefined) || typeof hf.ttd !== 'undefined')\n      ) {\n        hf.forkHash = this.forkHash(hf.name, genesisHash)\n      }\n    }\n  }\n\n  /**\n   * Returns the Genesis parameters of the current chain\n   * @returns Genesis dictionary\n   */\n  genesis(): GenesisBlockConfig {\n    return this._chainParams.genesis\n  }\n\n  /**\n   * Returns the hardforks for current chain\n   * @returns {Array} Array with arrays of hardforks\n   */\n  hardforks(): HardforkConfig[] {\n    return this._chainParams.hardforks\n  }\n\n  /**\n   * Returns bootstrap nodes for the current chain\n   * @returns {Dictionary} Dict with bootstrap nodes\n   */\n  bootstrapNodes(): BootstrapNodeConfig[] {\n    return this._chainParams.bootstrapNodes\n  }\n\n  /**\n   * Returns DNS networks for the current chain\n   * @returns {String[]} Array of DNS ENR urls\n   */\n  dnsNetworks(): string[] {\n    return this._chainParams.dnsNetworks!\n  }\n\n  /**\n   * Returns the hardfork set\n   * @returns Hardfork name\n   */\n  hardfork(): string | Hardfork {\n    return this._hardfork\n  }\n\n  /**\n   * Returns the Id of current chain\n   * @returns chain Id\n   */\n  chainId(): bigint {\n    return BigInt(this._chainParams.chainId)\n  }\n\n  /**\n   * Returns the name of current chain\n   * @returns chain name (lower case)\n   */\n  chainName(): string {\n    return this._chainParams.name\n  }\n\n  /**\n   * Returns the Id of current network\n   * @returns network Id\n   */\n  networkId(): bigint {\n    return BigInt(this._chainParams.networkId)\n  }\n\n  /**\n   * Returns the active EIPs\n   * @returns List of EIPs\n   */\n  eips(): number[] {\n    return this._eips\n  }\n\n  /**\n   * Returns the consensus type of the network\n   * Possible values: \"pow\"|\"poa\"|\"pos\"\n   *\n   * Note: This value can update along a Hardfork.\n   */\n  consensusType(): string | ConsensusType {\n    const hardfork = this.hardfork()\n\n    let value\n    for (const hfChanges of this.HARDFORK_CHANGES) {\n      if ('consensus' in hfChanges[1]) {\n        value = hfChanges[1]['consensus']['type']\n      }\n      if (hfChanges[0] === hardfork) break\n    }\n    return value ?? this._chainParams['consensus']['type']\n  }\n\n  /**\n   * Returns the concrete consensus implementation\n   * algorithm or protocol for the network\n   * e.g. \"ethash\" for \"pow\" consensus type,\n   * \"clique\" for \"poa\" consensus type or\n   * \"casper\" for \"pos\" consensus type.\n   *\n   * Note: This value can update along a Hardfork.\n   */\n  consensusAlgorithm(): string | ConsensusAlgorithm {\n    const hardfork = this.hardfork()\n\n    let value\n    for (const hfChanges of this.HARDFORK_CHANGES) {\n      if ('consensus' in hfChanges[1]) {\n        value = hfChanges[1]['consensus']['algorithm']\n      }\n      if (hfChanges[0] === hardfork) break\n    }\n    return value ?? (this._chainParams['consensus']['algorithm'] as ConsensusAlgorithm)\n  }\n\n  /**\n   * Returns a dictionary with consensus configuration\n   * parameters based on the consensus algorithm\n   *\n   * Expected returns (parameters must be present in\n   * the respective chain json files):\n   *\n   * ethash: empty object\n   * clique: period, epoch\n   * casper: empty object\n   *\n   * Note: This value can update along a Hardfork.\n   */\n  consensusConfig(): { [key: string]: CliqueConfig | EthashConfig | CasperConfig } {\n    const hardfork = this.hardfork()\n\n    let value\n    for (const hfChanges of this.HARDFORK_CHANGES) {\n      if ('consensus' in hfChanges[1]) {\n        // The config parameter is named after the respective consensus algorithm\n        value = hfChanges[1]['consensus'][hfChanges[1]['consensus']['algorithm']]\n      }\n      if (hfChanges[0] === hardfork) break\n    }\n    return (\n      value ?? this._chainParams['consensus'][this.consensusAlgorithm() as ConsensusAlgorithm] ?? {}\n    )\n  }\n\n  /**\n   * Returns a deep copy of this {@link Common} instance.\n   */\n  copy(): Common {\n    const copy = Object.assign(Object.create(Object.getPrototypeOf(this)), this)\n    copy.removeAllListeners()\n    return copy\n  }\n\n  static _getInitializedChains(customChains?: ChainConfig[]): ChainsConfig {\n    const names: ChainName = {}\n    for (const [name, id] of Object.entries(Chain)) {\n      names[id] = name.toLowerCase()\n    }\n    const chains = { mainnet, ropsten, rinkeby, goerli, sepolia } as ChainsConfig\n    if (customChains) {\n      for (const chain of customChains) {\n        const { name } = chain\n        names[chain.chainId.toString()] = name\n        chains[name] = chain\n      }\n    }\n    chains.names = names\n    return chains\n  }\n}\n","export const EIPs: { [key: number]: any } = {\n  1153: require('./1153.json'),\n  1559: require('./1559.json'),\n  2315: require('./2315.json'),\n  2537: require('./2537.json'),\n  2565: require('./2565.json'),\n  2718: require('./2718.json'),\n  2929: require('./2929.json'),\n  2930: require('./2930.json'),\n  3074: require('./3074.json'),\n  3198: require('./3198.json'),\n  3529: require('./3529.json'),\n  3540: require('./3540.json'),\n  3541: require('./3541.json'),\n  3554: require('./3554.json'),\n  3607: require('./3607.json'),\n  3651: require('./3651.json'),\n  3670: require('./3670.json'),\n  3675: require('./3675.json'),\n  3855: require('./3855.json'),\n  3860: require('./3860.json'),\n  4345: require('./4345.json'),\n  4399: require('./4399.json'),\n  4844: require('./4844.json'),\n  4895: require('./4895.json'),\n  5133: require('./5133.json'),\n}\n","export enum Chain {\n  Mainnet = 1,\n  Ropsten = 3,\n  Rinkeby = 4,\n  Goerli = 5,\n  Sepolia = 11155111,\n}\n\nexport enum Hardfork {\n  Chainstart = 'chainstart',\n  Homestead = 'homestead',\n  Dao = 'dao',\n  TangerineWhistle = 'tangerineWhistle',\n  SpuriousDragon = 'spuriousDragon',\n  Byzantium = 'byzantium',\n  Constantinople = 'constantinople',\n  Petersburg = 'petersburg',\n  Istanbul = 'istanbul',\n  MuirGlacier = 'muirGlacier',\n  Berlin = 'berlin',\n  London = 'london',\n  ArrowGlacier = 'arrowGlacier',\n  GrayGlacier = 'grayGlacier',\n  MergeForkIdTransition = 'mergeForkIdTransition',\n  Merge = 'merge',\n  Shanghai = 'shanghai',\n  ShardingForkDev = 'shardingFork',\n}\n\nexport enum ConsensusType {\n  ProofOfStake = 'pos',\n  ProofOfWork = 'pow',\n  ProofOfAuthority = 'poa',\n}\n\nexport enum ConsensusAlgorithm {\n  Ethash = 'ethash',\n  Clique = 'clique',\n  Casper = 'casper',\n}\n\nexport enum CustomChain {\n  /**\n   * Polygon (Matic) Mainnet\n   *\n   * - [Documentation](https://docs.matic.network/docs/develop/network-details/network)\n   */\n  PolygonMainnet = 'polygon-mainnet',\n\n  /**\n   * Polygon (Matic) Mumbai Testnet\n   *\n   * - [Documentation](https://docs.matic.network/docs/develop/network-details/network)\n   */\n  PolygonMumbai = 'polygon-mumbai',\n\n  /**\n   * Arbitrum Rinkeby Testnet\n   *\n   * - [Documentation](https://developer.offchainlabs.com/docs/public_testnet)\n   */\n  ArbitrumRinkebyTestnet = 'arbitrum-rinkeby-testnet',\n\n  /**\n   * Arbitrum One - mainnet for Arbitrum roll-up\n   *\n   * - [Documentation](https://developer.offchainlabs.com/public-chains)\n   */\n  ArbitrumOne = 'arbitrum-one',\n\n  /**\n   * xDai EVM sidechain with a native stable token\n   *\n   * - [Documentation](https://www.xdaichain.com/)\n   */\n  xDaiChain = 'x-dai-chain',\n\n  /**\n   * Optimistic Kovan - testnet for Optimism roll-up\n   *\n   * - [Documentation](https://community.optimism.io/docs/developers/tutorials.html)\n   */\n  OptimisticKovan = 'optimistic-kovan',\n\n  /**\n   * Optimistic Ethereum - mainnet for Optimism roll-up\n   *\n   * - [Documentation](https://community.optimism.io/docs/developers/tutorials.html)\n   */\n  OptimisticEthereum = 'optimistic-ethereum',\n}\n","export const hardforks = {\n  chainstart: require('./chainstart.json'),\n  homestead: require('./homestead.json'),\n  dao: require('./dao.json'),\n  tangerineWhistle: require('./tangerineWhistle.json'),\n  spuriousDragon: require('./spuriousDragon.json'),\n  byzantium: require('./byzantium.json'),\n  constantinople: require('./constantinople.json'),\n  petersburg: require('./petersburg.json'),\n  istanbul: require('./istanbul.json'),\n  muirGlacier: require('./muirGlacier.json'),\n  berlin: require('./berlin.json'),\n  london: require('./london.json'),\n  shanghai: require('./shanghai.json'),\n  arrowGlacier: require('./arrowGlacier.json'),\n  grayGlacier: require('./grayGlacier.json'),\n  mergeForkIdTransition: require('./mergeForkIdTransition.json'),\n  merge: require('./merge.json'),\n  shardingFork: require('./sharding.json'),\n}\n","export * from './common'\nexport * from './enums'\nexport * from './types'\nexport * from './utils'\n","import { intToHex, isHexPrefixed, stripHexPrefix } from '@ethereumjs/util'\n\nimport { Hardfork } from './enums'\n\ntype ConfigHardfork =\n  | { name: string; block: null; timestamp: number }\n  | { name: string; block: number; timestamp?: number }\n/**\n * Transforms Geth formatted nonce (i.e. hex string) to 8 byte 0x-prefixed string used internally\n * @param nonce string parsed from the Geth genesis file\n * @returns nonce as a 0x-prefixed 8 byte string\n */\nfunction formatNonce(nonce: string): string {\n  if (!nonce || nonce === '0x0') {\n    return '0x0000000000000000'\n  }\n  if (isHexPrefixed(nonce)) {\n    return '0x' + stripHexPrefix(nonce).padStart(16, '0')\n  }\n  return '0x' + nonce.padStart(16, '0')\n}\n\n/**\n * Converts Geth genesis parameters to an EthereumJS compatible `CommonOpts` object\n * @param json object representing the Geth genesis file\n * @param optional mergeForkIdPostMerge which clarifies the placement of MergeForkIdTransition\n * hardfork, which by default is post merge as with the merged eth networks but could also come\n * before merge like in kiln genesis\n * @returns genesis parameters in a `CommonOpts` compliant object\n */\nfunction parseGethParams(json: any, mergeForkIdPostMerge: boolean = true) {\n  const {\n    name,\n    config,\n    difficulty,\n    mixHash,\n    gasLimit,\n    coinbase,\n    baseFeePerGas,\n  }: {\n    name: string\n    config: any\n    difficulty: string\n    mixHash: string\n    gasLimit: string\n    coinbase: string\n    baseFeePerGas: string\n  } = json\n  let { extraData, timestamp, nonce }: { extraData: string; timestamp: string; nonce: string } =\n    json\n  const genesisTimestamp = Number(timestamp)\n  const { chainId }: { chainId: number } = config\n\n  // geth is not strictly putting empty fields with a 0x prefix\n  if (extraData === '') {\n    extraData = '0x'\n  }\n  // geth may use number for timestamp\n  if (!isHexPrefixed(timestamp)) {\n    timestamp = intToHex(parseInt(timestamp))\n  }\n  // geth may not give us a nonce strictly formatted to an 8 byte hex string\n  if (nonce.length !== 18) {\n    nonce = formatNonce(nonce)\n  }\n\n  // EIP155 and EIP158 are both part of Spurious Dragon hardfork and must occur at the same time\n  // but have different configuration parameters in geth genesis parameters\n  if (config.eip155Block !== config.eip158Block) {\n    throw new Error(\n      'EIP155 block number must equal EIP 158 block number since both are part of SpuriousDragon hardfork and the client only supports activating the full hardfork'\n    )\n  }\n\n  const params = {\n    name,\n    chainId,\n    networkId: chainId,\n    genesis: {\n      timestamp,\n      gasLimit: parseInt(gasLimit), // geth gasLimit and difficulty are hex strings while ours are `number`s\n      difficulty: parseInt(difficulty),\n      nonce,\n      extraData,\n      mixHash,\n      coinbase,\n      baseFeePerGas,\n    },\n    hardfork: undefined as string | undefined,\n    hardforks: [] as ConfigHardfork[],\n    bootstrapNodes: [],\n    consensus:\n      config.clique !== undefined\n        ? {\n            type: 'poa',\n            algorithm: 'clique',\n            clique: {\n              // The recent geth genesis seems to be using blockperiodseconds\n              // and epochlength for clique specification\n              // see: https://hackmd.io/PqZgMpnkSWCWv5joJoFymQ\n              period: config.clique.period ?? config.clique.blockperiodseconds,\n              epoch: config.clique.epoch ?? config.clique.epochlength,\n            },\n          }\n        : {\n            type: 'pow',\n            algorithm: 'ethash',\n            ethash: {},\n          },\n  }\n\n  const forkMap: { [key: string]: { name: string; postMerge?: boolean; isTimestamp?: boolean } } = {\n    [Hardfork.Homestead]: { name: 'homesteadBlock' },\n    [Hardfork.Dao]: { name: 'daoForkBlock' },\n    [Hardfork.TangerineWhistle]: { name: 'eip150Block' },\n    [Hardfork.SpuriousDragon]: { name: 'eip155Block' },\n    [Hardfork.Byzantium]: { name: 'byzantiumBlock' },\n    [Hardfork.Constantinople]: { name: 'constantinopleBlock' },\n    [Hardfork.Petersburg]: { name: 'petersburgBlock' },\n    [Hardfork.Istanbul]: { name: 'istanbulBlock' },\n    [Hardfork.MuirGlacier]: { name: 'muirGlacierBlock' },\n    [Hardfork.Berlin]: { name: 'berlinBlock' },\n    [Hardfork.London]: { name: 'londonBlock' },\n    [Hardfork.MergeForkIdTransition]: { name: 'mergeForkBlock', postMerge: mergeForkIdPostMerge },\n    [Hardfork.Shanghai]: { name: 'shanghaiTime', postMerge: true, isTimestamp: true },\n    [Hardfork.ShardingForkDev]: { name: 'shardingForkTime', postMerge: true, isTimestamp: true },\n  }\n\n  // forkMapRev is the map from config field name to Hardfork\n  const forkMapRev = Object.keys(forkMap).reduce((acc, elem) => {\n    acc[forkMap[elem].name] = elem\n    return acc\n  }, {} as { [key: string]: string })\n  const configHardforkNames = Object.keys(config).filter(\n    (key) => forkMapRev[key] !== undefined && config[key] !== undefined && config[key] !== null\n  )\n\n  params.hardforks = configHardforkNames\n    .map((nameBlock) => ({\n      name: forkMapRev[nameBlock],\n      block:\n        forkMap[forkMapRev[nameBlock]].isTimestamp === true || typeof config[nameBlock] !== 'number'\n          ? null\n          : config[nameBlock],\n      timestamp:\n        forkMap[forkMapRev[nameBlock]].isTimestamp === true && typeof config[nameBlock] === 'number'\n          ? config[nameBlock]\n          : undefined,\n    }))\n    .filter((fork) => fork.block !== null || fork.timestamp !== undefined) as ConfigHardfork[]\n\n  params.hardforks.sort(function (a: ConfigHardfork, b: ConfigHardfork) {\n    return (a.block ?? Infinity) - (b.block ?? Infinity)\n  })\n\n  params.hardforks.sort(function (a: ConfigHardfork, b: ConfigHardfork) {\n    return (a.timestamp ?? genesisTimestamp) - (b.timestamp ?? genesisTimestamp)\n  })\n\n  if (config.terminalTotalDifficulty !== undefined) {\n    // Following points need to be considered for placement of merge hf\n    // - Merge hardfork can't be placed at genesis\n    // - Place merge hf before any hardforks that require CL participation for e.g. withdrawals\n    // - Merge hardfork has to be placed just after genesis if any of the genesis hardforks make CL\n    //   necessary for e.g. withdrawals\n    const mergeConfig = {\n      name: Hardfork.Merge,\n      ttd: config.terminalTotalDifficulty,\n      block: null,\n    }\n\n    // Merge hardfork has to be placed before first hardfork that is dependent on merge\n    const postMergeIndex = params.hardforks.findIndex(\n      (hf: any) => forkMap[hf.name]?.postMerge === true\n    )\n    if (postMergeIndex !== -1) {\n      params.hardforks.splice(postMergeIndex, 0, mergeConfig as unknown as ConfigHardfork)\n    } else {\n      params.hardforks.push(mergeConfig as unknown as ConfigHardfork)\n    }\n  }\n\n  const latestHardfork = params.hardforks.length > 0 ? params.hardforks.slice(-1)[0] : undefined\n  params.hardfork = latestHardfork?.name\n  params.hardforks.unshift({ name: Hardfork.Chainstart, block: 0 })\n\n  return params\n}\n\n/**\n * Parses a genesis.json exported from Geth into parameters for Common instance\n * @param json representing the Geth genesis file\n * @param name optional chain name\n * @returns parsed params\n */\nexport function parseGethGenesis(json: any, name?: string, mergeForkIdPostMerge?: boolean) {\n  try {\n    if (['config', 'difficulty', 'gasLimit', 'alloc'].some((field) => !(field in json))) {\n      throw new Error('Invalid format, expected geth genesis fields missing')\n    }\n    if (name !== undefined) {\n      json.name = name\n    }\n    return parseGethParams(json, mergeForkIdPostMerge)\n  } catch (e: any) {\n    throw new Error(`Error parsing parameters file: ${e.message}`)\n  }\n}\n","/*! crc32.js (C) 2014-present SheetJS -- http://sheetjs.com */\n/* vim: set ts=2: */\n/*exported CRC32 */\nvar CRC32;\n(function (factory) {\n\t/*jshint ignore:start */\n\t/*eslint-disable */\n\tif(typeof DO_NOT_EXPORT_CRC === 'undefined') {\n\t\tif('object' === typeof exports) {\n\t\t\tfactory(exports);\n\t\t} else if ('function' === typeof define && define.amd) {\n\t\t\tdefine(function () {\n\t\t\t\tvar module = {};\n\t\t\t\tfactory(module);\n\t\t\t\treturn module;\n\t\t\t});\n\t\t} else {\n\t\t\tfactory(CRC32 = {});\n\t\t}\n\t} else {\n\t\tfactory(CRC32 = {});\n\t}\n\t/*eslint-enable */\n\t/*jshint ignore:end */\n}(function(CRC32) {\nCRC32.version = '1.2.2';\n/*global Int32Array */\nfunction signed_crc_table() {\n\tvar c = 0, table = new Array(256);\n\n\tfor(var n =0; n != 256; ++n){\n\t\tc = n;\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\ttable[n] = c;\n\t}\n\n\treturn typeof Int32Array !== 'undefined' ? new Int32Array(table) : table;\n}\n\nvar T0 = signed_crc_table();\nfunction slice_by_16_tables(T) {\n\tvar c = 0, v = 0, n = 0, table = typeof Int32Array !== 'undefined' ? new Int32Array(4096) : new Array(4096) ;\n\n\tfor(n = 0; n != 256; ++n) table[n] = T[n];\n\tfor(n = 0; n != 256; ++n) {\n\t\tv = T[n];\n\t\tfor(c = 256 + n; c < 4096; c += 256) v = table[c] = (v >>> 8) ^ T[v & 0xFF];\n\t}\n\tvar out = [];\n\tfor(n = 1; n != 16; ++n) out[n - 1] = typeof Int32Array !== 'undefined' ? table.subarray(n * 256, n * 256 + 256) : table.slice(n * 256, n * 256 + 256);\n\treturn out;\n}\nvar TT = slice_by_16_tables(T0);\nvar T1 = TT[0],  T2 = TT[1],  T3 = TT[2],  T4 = TT[3],  T5 = TT[4];\nvar T6 = TT[5],  T7 = TT[6],  T8 = TT[7],  T9 = TT[8],  Ta = TT[9];\nvar Tb = TT[10], Tc = TT[11], Td = TT[12], Te = TT[13], Tf = TT[14];\nfunction crc32_bstr(bstr, seed) {\n\tvar C = seed ^ -1;\n\tfor(var i = 0, L = bstr.length; i < L;) C = (C>>>8) ^ T0[(C^bstr.charCodeAt(i++))&0xFF];\n\treturn ~C;\n}\n\nfunction crc32_buf(B, seed) {\n\tvar C = seed ^ -1, L = B.length - 15, i = 0;\n\tfor(; i < L;) C =\n\t\tTf[B[i++] ^ (C & 255)] ^\n\t\tTe[B[i++] ^ ((C >> 8) & 255)] ^\n\t\tTd[B[i++] ^ ((C >> 16) & 255)] ^\n\t\tTc[B[i++] ^ (C >>> 24)] ^\n\t\tTb[B[i++]] ^ Ta[B[i++]] ^ T9[B[i++]] ^ T8[B[i++]] ^\n\t\tT7[B[i++]] ^ T6[B[i++]] ^ T5[B[i++]] ^ T4[B[i++]] ^\n\t\tT3[B[i++]] ^ T2[B[i++]] ^ T1[B[i++]] ^ T0[B[i++]];\n\tL += 15;\n\twhile(i < L) C = (C>>>8) ^ T0[(C^B[i++])&0xFF];\n\treturn ~C;\n}\n\nfunction crc32_str(str, seed) {\n\tvar C = seed ^ -1;\n\tfor(var i = 0, L = str.length, c = 0, d = 0; i < L;) {\n\t\tc = str.charCodeAt(i++);\n\t\tif(c < 0x80) {\n\t\t\tC = (C>>>8) ^ T0[(C^c)&0xFF];\n\t\t} else if(c < 0x800) {\n\t\t\tC = (C>>>8) ^ T0[(C ^ (192|((c>>6)&31)))&0xFF];\n\t\t\tC = (C>>>8) ^ T0[(C ^ (128|(c&63)))&0xFF];\n\t\t} else if(c >= 0xD800 && c < 0xE000) {\n\t\t\tc = (c&1023)+64; d = str.charCodeAt(i++)&1023;\n\t\t\tC = (C>>>8) ^ T0[(C ^ (240|((c>>8)&7)))&0xFF];\n\t\t\tC = (C>>>8) ^ T0[(C ^ (128|((c>>2)&63)))&0xFF];\n\t\t\tC = (C>>>8) ^ T0[(C ^ (128|((d>>6)&15)|((c&3)<<4)))&0xFF];\n\t\t\tC = (C>>>8) ^ T0[(C ^ (128|(d&63)))&0xFF];\n\t\t} else {\n\t\t\tC = (C>>>8) ^ T0[(C ^ (224|((c>>12)&15)))&0xFF];\n\t\t\tC = (C>>>8) ^ T0[(C ^ (128|((c>>6)&63)))&0xFF];\n\t\t\tC = (C>>>8) ^ T0[(C ^ (128|(c&63)))&0xFF];\n\t\t}\n\t}\n\treturn ~C;\n}\nCRC32.table = T0;\n// $FlowIgnore\nCRC32.bstr = crc32_bstr;\n// $FlowIgnore\nCRC32.buf = crc32_buf;\n// $FlowIgnore\nCRC32.str = crc32_str;\n}));\n","'use strict';\n\nvar helpers = require('./helpers');\n\n/** @type ValidatorResult */\nvar ValidatorResult = helpers.ValidatorResult;\n/** @type SchemaError */\nvar SchemaError = helpers.SchemaError;\n\nvar attribute = {};\n\nattribute.ignoreProperties = {\n  // informative properties\n  'id': true,\n  'default': true,\n  'description': true,\n  'title': true,\n  // arguments to other properties\n  'additionalItems': true,\n  'then': true,\n  'else': true,\n  // special-handled properties\n  '$schema': true,\n  '$ref': true,\n  'extends': true,\n};\n\n/**\n * @name validators\n */\nvar validators = attribute.validators = {};\n\n/**\n * Validates whether the instance if of a certain type\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {ValidatorResult|null}\n */\nvalidators.type = function validateType (instance, schema, options, ctx) {\n  // Ignore undefined instances\n  if (instance === undefined) {\n    return null;\n  }\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var types = Array.isArray(schema.type) ? schema.type : [schema.type];\n  if (!types.some(this.testType.bind(this, instance, schema, options, ctx))) {\n    var list = types.map(function (v) {\n      if(!v) return;\n      var id = v.$id || v.id;\n      return id ? ('<' + id + '>') : (v+'');\n    });\n    result.addError({\n      name: 'type',\n      argument: list,\n      message: \"is not of a type(s) \" + list,\n    });\n  }\n  return result;\n};\n\nfunction testSchemaNoThrow(instance, options, ctx, callback, schema){\n  var throwError = options.throwError;\n  var throwAll = options.throwAll;\n  options.throwError = false;\n  options.throwAll = false;\n  var res = this.validateSchema(instance, schema, options, ctx);\n  options.throwError = throwError;\n  options.throwAll = throwAll;\n\n  if (!res.valid && callback instanceof Function) {\n    callback(res);\n  }\n  return res.valid;\n}\n\n/**\n * Validates whether the instance matches some of the given schemas\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {ValidatorResult|null}\n */\nvalidators.anyOf = function validateAnyOf (instance, schema, options, ctx) {\n  // Ignore undefined instances\n  if (instance === undefined) {\n    return null;\n  }\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var inner = new ValidatorResult(instance, schema, options, ctx);\n  if (!Array.isArray(schema.anyOf)){\n    throw new SchemaError(\"anyOf must be an array\");\n  }\n  if (!schema.anyOf.some(\n    testSchemaNoThrow.bind(\n      this, instance, options, ctx, function(res){inner.importErrors(res);}\n    ))) {\n    var list = schema.anyOf.map(function (v, i) {\n      var id = v.$id || v.id;\n      if(id) return '<' + id + '>';\n      return(v.title && JSON.stringify(v.title)) || (v['$ref'] && ('<' + v['$ref'] + '>')) || '[subschema '+i+']';\n    });\n    if (options.nestedErrors) {\n      result.importErrors(inner);\n    }\n    result.addError({\n      name: 'anyOf',\n      argument: list,\n      message: \"is not any of \" + list.join(','),\n    });\n  }\n  return result;\n};\n\n/**\n * Validates whether the instance matches every given schema\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {String|null}\n */\nvalidators.allOf = function validateAllOf (instance, schema, options, ctx) {\n  // Ignore undefined instances\n  if (instance === undefined) {\n    return null;\n  }\n  if (!Array.isArray(schema.allOf)){\n    throw new SchemaError(\"allOf must be an array\");\n  }\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var self = this;\n  schema.allOf.forEach(function(v, i){\n    var valid = self.validateSchema(instance, v, options, ctx);\n    if(!valid.valid){\n      var id = v.$id || v.id;\n      var msg = id || (v.title && JSON.stringify(v.title)) || (v['$ref'] && ('<' + v['$ref'] + '>')) || '[subschema '+i+']';\n      result.addError({\n        name: 'allOf',\n        argument: { id: msg, length: valid.errors.length, valid: valid },\n        message: 'does not match allOf schema ' + msg + ' with ' + valid.errors.length + ' error[s]:',\n      });\n      result.importErrors(valid);\n    }\n  });\n  return result;\n};\n\n/**\n * Validates whether the instance matches exactly one of the given schemas\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {String|null}\n */\nvalidators.oneOf = function validateOneOf (instance, schema, options, ctx) {\n  // Ignore undefined instances\n  if (instance === undefined) {\n    return null;\n  }\n  if (!Array.isArray(schema.oneOf)){\n    throw new SchemaError(\"oneOf must be an array\");\n  }\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var inner = new ValidatorResult(instance, schema, options, ctx);\n  var count = schema.oneOf.filter(\n    testSchemaNoThrow.bind(\n      this, instance, options, ctx, function(res) {inner.importErrors(res);}\n    ) ).length;\n  var list = schema.oneOf.map(function (v, i) {\n    var id = v.$id || v.id;\n    return id || (v.title && JSON.stringify(v.title)) || (v['$ref'] && ('<' + v['$ref'] + '>')) || '[subschema '+i+']';\n  });\n  if (count!==1) {\n    if (options.nestedErrors) {\n      result.importErrors(inner);\n    }\n    result.addError({\n      name: 'oneOf',\n      argument: list,\n      message: \"is not exactly one from \" + list.join(','),\n    });\n  }\n  return result;\n};\n\n/**\n * Validates \"then\" or \"else\" depending on the result of validating \"if\"\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {String|null}\n */\nvalidators.if = function validateIf (instance, schema, options, ctx) {\n  // Ignore undefined instances\n  if (instance === undefined) return null;\n  if (!helpers.isSchema(schema.if)) throw new Error('Expected \"if\" keyword to be a schema');\n  var ifValid = testSchemaNoThrow.call(this, instance, options, ctx, null, schema.if);\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var res;\n  if(ifValid){\n    if (schema.then === undefined) return;\n    if (!helpers.isSchema(schema.then)) throw new Error('Expected \"then\" keyword to be a schema');\n    res = this.validateSchema(instance, schema.then, options, ctx.makeChild(schema.then));\n    result.importErrors(res);\n  }else{\n    if (schema.else === undefined) return;\n    if (!helpers.isSchema(schema.else)) throw new Error('Expected \"else\" keyword to be a schema');\n    res = this.validateSchema(instance, schema.else, options, ctx.makeChild(schema.else));\n    result.importErrors(res);\n  }\n  return result;\n};\n\nfunction getEnumerableProperty(object, key){\n  // Determine if `key` shows up in `for(var key in object)`\n  // First test Object.hasOwnProperty.call as an optimization: that guarantees it does\n  if(Object.hasOwnProperty.call(object, key)) return object[key];\n  // Test `key in object` as an optimization; false means it won't\n  if(!(key in object)) return;\n  while( (object = Object.getPrototypeOf(object)) ){\n    if(Object.propertyIsEnumerable.call(object, key)) return object[key];\n  }\n}\n\n/**\n * Validates propertyNames\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {String|null|ValidatorResult}\n */\nvalidators.propertyNames = function validatePropertyNames (instance, schema, options, ctx) {\n  if(!this.types.object(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var subschema = schema.propertyNames!==undefined ? schema.propertyNames : {};\n  if(!helpers.isSchema(subschema)) throw new SchemaError('Expected \"propertyNames\" to be a schema (object or boolean)');\n\n  for (var property in instance) {\n    if(getEnumerableProperty(instance, property) !== undefined){\n      var res = this.validateSchema(property, subschema, options, ctx.makeChild(subschema));\n      result.importErrors(res);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Validates properties\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {String|null|ValidatorResult}\n */\nvalidators.properties = function validateProperties (instance, schema, options, ctx) {\n  if(!this.types.object(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var properties = schema.properties || {};\n  for (var property in properties) {\n    var subschema = properties[property];\n    if(subschema===undefined){\n      continue;\n    }else if(subschema===null){\n      throw new SchemaError('Unexpected null, expected schema in \"properties\"');\n    }\n    if (typeof options.preValidateProperty == 'function') {\n      options.preValidateProperty(instance, property, subschema, options, ctx);\n    }\n    var prop = getEnumerableProperty(instance, property);\n    var res = this.validateSchema(prop, subschema, options, ctx.makeChild(subschema, property));\n    if(res.instance !== result.instance[property]) result.instance[property] = res.instance;\n    result.importErrors(res);\n  }\n  return result;\n};\n\n/**\n * Test a specific property within in instance against the additionalProperties schema attribute\n * This ignores properties with definitions in the properties schema attribute, but no other attributes.\n * If too many more types of property-existence tests pop up they may need their own class of tests (like `type` has)\n * @private\n * @return {boolean}\n */\nfunction testAdditionalProperty (instance, schema, options, ctx, property, result) {\n  if(!this.types.object(instance)) return;\n  if (schema.properties && schema.properties[property] !== undefined) {\n    return;\n  }\n  if (schema.additionalProperties === false) {\n    result.addError({\n      name: 'additionalProperties',\n      argument: property,\n      message: \"is not allowed to have the additional property \" + JSON.stringify(property),\n    });\n  } else {\n    var additionalProperties = schema.additionalProperties || {};\n\n    if (typeof options.preValidateProperty == 'function') {\n      options.preValidateProperty(instance, property, additionalProperties, options, ctx);\n    }\n\n    var res = this.validateSchema(instance[property], additionalProperties, options, ctx.makeChild(additionalProperties, property));\n    if(res.instance !== result.instance[property]) result.instance[property] = res.instance;\n    result.importErrors(res);\n  }\n}\n\n/**\n * Validates patternProperties\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {String|null|ValidatorResult}\n */\nvalidators.patternProperties = function validatePatternProperties (instance, schema, options, ctx) {\n  if(!this.types.object(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var patternProperties = schema.patternProperties || {};\n\n  for (var property in instance) {\n    var test = true;\n    for (var pattern in patternProperties) {\n      var subschema = patternProperties[pattern];\n      if(subschema===undefined){\n        continue;\n      }else if(subschema===null){\n        throw new SchemaError('Unexpected null, expected schema in \"patternProperties\"');\n      }\n      try {\n        var regexp = new RegExp(pattern, 'u');\n      } catch(_e) {\n        // In the event the stricter handling causes an error, fall back on the forgiving handling\n        // DEPRECATED\n        regexp = new RegExp(pattern);\n      }\n      if (!regexp.test(property)) {\n        continue;\n      }\n      test = false;\n\n      if (typeof options.preValidateProperty == 'function') {\n        options.preValidateProperty(instance, property, subschema, options, ctx);\n      }\n\n      var res = this.validateSchema(instance[property], subschema, options, ctx.makeChild(subschema, property));\n      if(res.instance !== result.instance[property]) result.instance[property] = res.instance;\n      result.importErrors(res);\n    }\n    if (test) {\n      testAdditionalProperty.call(this, instance, schema, options, ctx, property, result);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Validates additionalProperties\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {String|null|ValidatorResult}\n */\nvalidators.additionalProperties = function validateAdditionalProperties (instance, schema, options, ctx) {\n  if(!this.types.object(instance)) return;\n  // if patternProperties is defined then we'll test when that one is called instead\n  if (schema.patternProperties) {\n    return null;\n  }\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  for (var property in instance) {\n    testAdditionalProperty.call(this, instance, schema, options, ctx, property, result);\n  }\n  return result;\n};\n\n/**\n * Validates whether the instance value is at least of a certain length, when the instance value is a string.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.minProperties = function validateMinProperties (instance, schema, options, ctx) {\n  if (!this.types.object(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var keys = Object.keys(instance);\n  if (!(keys.length >= schema.minProperties)) {\n    result.addError({\n      name: 'minProperties',\n      argument: schema.minProperties,\n      message: \"does not meet minimum property length of \" + schema.minProperties,\n    });\n  }\n  return result;\n};\n\n/**\n * Validates whether the instance value is at most of a certain length, when the instance value is a string.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.maxProperties = function validateMaxProperties (instance, schema, options, ctx) {\n  if (!this.types.object(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var keys = Object.keys(instance);\n  if (!(keys.length <= schema.maxProperties)) {\n    result.addError({\n      name: 'maxProperties',\n      argument: schema.maxProperties,\n      message: \"does not meet maximum property length of \" + schema.maxProperties,\n    });\n  }\n  return result;\n};\n\n/**\n * Validates items when instance is an array\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {String|null|ValidatorResult}\n */\nvalidators.items = function validateItems (instance, schema, options, ctx) {\n  var self = this;\n  if (!this.types.array(instance)) return;\n  if (schema.items===undefined) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  instance.every(function (value, i) {\n    if(Array.isArray(schema.items)){\n      var items =  schema.items[i]===undefined ? schema.additionalItems : schema.items[i];\n    }else{\n      var items = schema.items;\n    }\n    if (items === undefined) {\n      return true;\n    }\n    if (items === false) {\n      result.addError({\n        name: 'items',\n        message: \"additionalItems not permitted\",\n      });\n      return false;\n    }\n    var res = self.validateSchema(value, items, options, ctx.makeChild(items, i));\n    if(res.instance !== result.instance[i]) result.instance[i] = res.instance;\n    result.importErrors(res);\n    return true;\n  });\n  return result;\n};\n\n/**\n * Validates the \"contains\" keyword\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {String|null|ValidatorResult}\n */\nvalidators.contains = function validateContains (instance, schema, options, ctx) {\n  var self = this;\n  if (!this.types.array(instance)) return;\n  if (schema.contains===undefined) return;\n  if (!helpers.isSchema(schema.contains)) throw new Error('Expected \"contains\" keyword to be a schema');\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var count = instance.some(function (value, i) {\n    var res = self.validateSchema(value, schema.contains, options, ctx.makeChild(schema.contains, i));\n    return res.errors.length===0;\n  });\n  if(count===false){\n    result.addError({\n      name: 'contains',\n      argument: schema.contains,\n      message: \"must contain an item matching given schema\",\n    });\n  }\n  return result;\n};\n\n/**\n * Validates minimum and exclusiveMinimum when the type of the instance value is a number.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.minimum = function validateMinimum (instance, schema, options, ctx) {\n  if (!this.types.number(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  if (schema.exclusiveMinimum && schema.exclusiveMinimum === true) {\n    if(!(instance > schema.minimum)){\n      result.addError({\n        name: 'minimum',\n        argument: schema.minimum,\n        message: \"must be greater than \" + schema.minimum,\n      });\n    }\n  } else {\n    if(!(instance >= schema.minimum)){\n      result.addError({\n        name: 'minimum',\n        argument: schema.minimum,\n        message: \"must be greater than or equal to \" + schema.minimum,\n      });\n    }\n  }\n  return result;\n};\n\n/**\n * Validates maximum and exclusiveMaximum when the type of the instance value is a number.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.maximum = function validateMaximum (instance, schema, options, ctx) {\n  if (!this.types.number(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  if (schema.exclusiveMaximum && schema.exclusiveMaximum === true) {\n    if(!(instance < schema.maximum)){\n      result.addError({\n        name: 'maximum',\n        argument: schema.maximum,\n        message: \"must be less than \" + schema.maximum,\n      });\n    }\n  } else {\n    if(!(instance <= schema.maximum)){\n      result.addError({\n        name: 'maximum',\n        argument: schema.maximum,\n        message: \"must be less than or equal to \" + schema.maximum,\n      });\n    }\n  }\n  return result;\n};\n\n/**\n * Validates the number form of exclusiveMinimum when the type of the instance value is a number.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.exclusiveMinimum = function validateExclusiveMinimum (instance, schema, options, ctx) {\n  // Support the boolean form of exclusiveMinimum, which is handled by the \"minimum\" keyword.\n  if(typeof schema.exclusiveMinimum === 'boolean') return;\n  if (!this.types.number(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var valid = instance > schema.exclusiveMinimum;\n  if (!valid) {\n    result.addError({\n      name: 'exclusiveMinimum',\n      argument: schema.exclusiveMinimum,\n      message: \"must be strictly greater than \" + schema.exclusiveMinimum,\n    });\n  }\n  return result;\n};\n\n/**\n * Validates the number form of exclusiveMaximum when the type of the instance value is a number.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.exclusiveMaximum = function validateExclusiveMaximum (instance, schema, options, ctx) {\n  // Support the boolean form of exclusiveMaximum, which is handled by the \"maximum\" keyword.\n  if(typeof schema.exclusiveMaximum === 'boolean') return;\n  if (!this.types.number(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var valid = instance < schema.exclusiveMaximum;\n  if (!valid) {\n    result.addError({\n      name: 'exclusiveMaximum',\n      argument: schema.exclusiveMaximum,\n      message: \"must be strictly less than \" + schema.exclusiveMaximum,\n    });\n  }\n  return result;\n};\n\n/**\n * Perform validation for multipleOf and divisibleBy, which are essentially the same.\n * @param instance\n * @param schema\n * @param validationType\n * @param errorMessage\n * @returns {String|null}\n */\nvar validateMultipleOfOrDivisbleBy = function validateMultipleOfOrDivisbleBy (instance, schema, options, ctx, validationType, errorMessage) {\n  if (!this.types.number(instance)) return;\n\n  var validationArgument = schema[validationType];\n  if (validationArgument == 0) {\n    throw new SchemaError(validationType + \" cannot be zero\");\n  }\n\n  var result = new ValidatorResult(instance, schema, options, ctx);\n\n  var instanceDecimals = helpers.getDecimalPlaces(instance);\n  var divisorDecimals = helpers.getDecimalPlaces(validationArgument);\n\n  var maxDecimals = Math.max(instanceDecimals , divisorDecimals);\n  var multiplier = Math.pow(10, maxDecimals);\n\n  if (Math.round(instance * multiplier) % Math.round(validationArgument * multiplier) !== 0) {\n    result.addError({\n      name: validationType,\n      argument:  validationArgument,\n      message: errorMessage + JSON.stringify(validationArgument),\n    });\n  }\n\n  return result;\n};\n\n/**\n * Validates divisibleBy when the type of the instance value is a number.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.multipleOf = function validateMultipleOf (instance, schema, options, ctx) {\n  return validateMultipleOfOrDivisbleBy.call(this, instance, schema, options, ctx, \"multipleOf\", \"is not a multiple of (divisible by) \");\n};\n\n/**\n * Validates multipleOf when the type of the instance value is a number.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.divisibleBy = function validateDivisibleBy (instance, schema, options, ctx) {\n  return validateMultipleOfOrDivisbleBy.call(this, instance, schema, options, ctx, \"divisibleBy\", \"is not divisible by (multiple of) \");\n};\n\n/**\n * Validates whether the instance value is present.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.required = function validateRequired (instance, schema, options, ctx) {\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  if (instance === undefined && schema.required === true) {\n    // A boolean form is implemented for reverse-compatibility with schemas written against older drafts\n    result.addError({\n      name: 'required',\n      message: \"is required\",\n    });\n  } else if (this.types.object(instance) && Array.isArray(schema.required)) {\n    schema.required.forEach(function(n){\n      if(getEnumerableProperty(instance, n)===undefined){\n        result.addError({\n          name: 'required',\n          argument: n,\n          message: \"requires property \" + JSON.stringify(n),\n        });\n      }\n    });\n  }\n  return result;\n};\n\n/**\n * Validates whether the instance value matches the regular expression, when the instance value is a string.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.pattern = function validatePattern (instance, schema, options, ctx) {\n  if (!this.types.string(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var pattern = schema.pattern;\n  try {\n    var regexp = new RegExp(pattern, 'u');\n  } catch(_e) {\n    // In the event the stricter handling causes an error, fall back on the forgiving handling\n    // DEPRECATED\n    regexp = new RegExp(pattern);\n  }\n  if (!instance.match(regexp)) {\n    result.addError({\n      name: 'pattern',\n      argument: schema.pattern,\n      message: \"does not match pattern \" + JSON.stringify(schema.pattern.toString()),\n    });\n  }\n  return result;\n};\n\n/**\n * Validates whether the instance value is of a certain defined format or a custom\n * format.\n * The following formats are supported for string types:\n *   - date-time\n *   - date\n *   - time\n *   - ip-address\n *   - ipv6\n *   - uri\n *   - color\n *   - host-name\n *   - alpha\n *   - alpha-numeric\n *   - utc-millisec\n * @param instance\n * @param schema\n * @param [options]\n * @param [ctx]\n * @return {String|null}\n */\nvalidators.format = function validateFormat (instance, schema, options, ctx) {\n  if (instance===undefined) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  if (!result.disableFormat && !helpers.isFormat(instance, schema.format, this)) {\n    result.addError({\n      name: 'format',\n      argument: schema.format,\n      message: \"does not conform to the \" + JSON.stringify(schema.format) + \" format\",\n    });\n  }\n  return result;\n};\n\n/**\n * Validates whether the instance value is at least of a certain length, when the instance value is a string.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.minLength = function validateMinLength (instance, schema, options, ctx) {\n  if (!this.types.string(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var hsp = instance.match(/[\\uDC00-\\uDFFF]/g);\n  var length = instance.length - (hsp ? hsp.length : 0);\n  if (!(length >= schema.minLength)) {\n    result.addError({\n      name: 'minLength',\n      argument: schema.minLength,\n      message: \"does not meet minimum length of \" + schema.minLength,\n    });\n  }\n  return result;\n};\n\n/**\n * Validates whether the instance value is at most of a certain length, when the instance value is a string.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.maxLength = function validateMaxLength (instance, schema, options, ctx) {\n  if (!this.types.string(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  // TODO if this was already computed in \"minLength\", use that value instead of re-computing\n  var hsp = instance.match(/[\\uDC00-\\uDFFF]/g);\n  var length = instance.length - (hsp ? hsp.length : 0);\n  if (!(length <= schema.maxLength)) {\n    result.addError({\n      name: 'maxLength',\n      argument: schema.maxLength,\n      message: \"does not meet maximum length of \" + schema.maxLength,\n    });\n  }\n  return result;\n};\n\n/**\n * Validates whether instance contains at least a minimum number of items, when the instance is an Array.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.minItems = function validateMinItems (instance, schema, options, ctx) {\n  if (!this.types.array(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  if (!(instance.length >= schema.minItems)) {\n    result.addError({\n      name: 'minItems',\n      argument: schema.minItems,\n      message: \"does not meet minimum length of \" + schema.minItems,\n    });\n  }\n  return result;\n};\n\n/**\n * Validates whether instance contains no more than a maximum number of items, when the instance is an Array.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.maxItems = function validateMaxItems (instance, schema, options, ctx) {\n  if (!this.types.array(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  if (!(instance.length <= schema.maxItems)) {\n    result.addError({\n      name: 'maxItems',\n      argument: schema.maxItems,\n      message: \"does not meet maximum length of \" + schema.maxItems,\n    });\n  }\n  return result;\n};\n\n/**\n * Deep compares arrays for duplicates\n * @param v\n * @param i\n * @param a\n * @private\n * @return {boolean}\n */\nfunction testArrays (v, i, a) {\n  var j, len = a.length;\n  for (j = i + 1, len; j < len; j++) {\n    if (helpers.deepCompareStrict(v, a[j])) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Validates whether there are no duplicates, when the instance is an Array.\n * @param instance\n * @return {String|null}\n */\nvalidators.uniqueItems = function validateUniqueItems (instance, schema, options, ctx) {\n  if (schema.uniqueItems!==true) return;\n  if (!this.types.array(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  if (!instance.every(testArrays)) {\n    result.addError({\n      name: 'uniqueItems',\n      message: \"contains duplicate item\",\n    });\n  }\n  return result;\n};\n\n/**\n * Validate for the presence of dependency properties, if the instance is an object.\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {null|ValidatorResult}\n */\nvalidators.dependencies = function validateDependencies (instance, schema, options, ctx) {\n  if (!this.types.object(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  for (var property in schema.dependencies) {\n    if (instance[property] === undefined) {\n      continue;\n    }\n    var dep = schema.dependencies[property];\n    var childContext = ctx.makeChild(dep, property);\n    if (typeof dep == 'string') {\n      dep = [dep];\n    }\n    if (Array.isArray(dep)) {\n      dep.forEach(function (prop) {\n        if (instance[prop] === undefined) {\n          result.addError({\n            // FIXME there's two different \"dependencies\" errors here with slightly different outputs\n            // Can we make these the same? Or should we create different error types?\n            name: 'dependencies',\n            argument: childContext.propertyPath,\n            message: \"property \" + prop + \" not found, required by \" + childContext.propertyPath,\n          });\n        }\n      });\n    } else {\n      var res = this.validateSchema(instance, dep, options, childContext);\n      if(result.instance !== res.instance) result.instance = res.instance;\n      if (res && res.errors.length) {\n        result.addError({\n          name: 'dependencies',\n          argument: childContext.propertyPath,\n          message: \"does not meet dependency required by \" + childContext.propertyPath,\n        });\n        result.importErrors(res);\n      }\n    }\n  }\n  return result;\n};\n\n/**\n * Validates whether the instance value is one of the enumerated values.\n *\n * @param instance\n * @param schema\n * @return {ValidatorResult|null}\n */\nvalidators['enum'] = function validateEnum (instance, schema, options, ctx) {\n  if (instance === undefined) {\n    return null;\n  }\n  if (!Array.isArray(schema['enum'])) {\n    throw new SchemaError(\"enum expects an array\", schema);\n  }\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  if (!schema['enum'].some(helpers.deepCompareStrict.bind(null, instance))) {\n    result.addError({\n      name: 'enum',\n      argument: schema['enum'],\n      message: \"is not one of enum values: \" + schema['enum'].map(String).join(','),\n    });\n  }\n  return result;\n};\n\n/**\n * Validates whether the instance exactly matches a given value\n *\n * @param instance\n * @param schema\n * @return {ValidatorResult|null}\n */\nvalidators['const'] = function validateEnum (instance, schema, options, ctx) {\n  if (instance === undefined) {\n    return null;\n  }\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  if (!helpers.deepCompareStrict(schema['const'], instance)) {\n    result.addError({\n      name: 'const',\n      argument: schema['const'],\n      message: \"does not exactly match expected constant: \" + schema['const'],\n    });\n  }\n  return result;\n};\n\n/**\n * Validates whether the instance if of a prohibited type.\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {null|ValidatorResult}\n */\nvalidators.not = validators.disallow = function validateNot (instance, schema, options, ctx) {\n  var self = this;\n  if(instance===undefined) return null;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var notTypes = schema.not || schema.disallow;\n  if(!notTypes) return null;\n  if(!Array.isArray(notTypes)) notTypes=[notTypes];\n  notTypes.forEach(function (type) {\n    if (self.testType(instance, schema, options, ctx, type)) {\n      var id = type && (type.$id || type.id);\n      var schemaId = id || type;\n      result.addError({\n        name: 'not',\n        argument: schemaId,\n        message: \"is of prohibited type \" + schemaId,\n      });\n    }\n  });\n  return result;\n};\n\nmodule.exports = attribute;\n","'use strict';\n\nvar uri = require('url');\n\nvar ValidationError = exports.ValidationError = function ValidationError (message, instance, schema, path, name, argument) {\n  if(Array.isArray(path)){\n    this.path = path;\n    this.property = path.reduce(function(sum, item){\n      return sum + makeSuffix(item);\n    }, 'instance');\n  }else if(path !== undefined){\n    this.property = path;\n  }\n  if (message) {\n    this.message = message;\n  }\n  if (schema) {\n    var id = schema.$id || schema.id;\n    this.schema = id || schema;\n  }\n  if (instance !== undefined) {\n    this.instance = instance;\n  }\n  this.name = name;\n  this.argument = argument;\n  this.stack = this.toString();\n};\n\nValidationError.prototype.toString = function toString() {\n  return this.property + ' ' + this.message;\n};\n\nvar ValidatorResult = exports.ValidatorResult = function ValidatorResult(instance, schema, options, ctx) {\n  this.instance = instance;\n  this.schema = schema;\n  this.options = options;\n  this.path = ctx.path;\n  this.propertyPath = ctx.propertyPath;\n  this.errors = [];\n  this.throwError = options && options.throwError;\n  this.throwFirst = options && options.throwFirst;\n  this.throwAll = options && options.throwAll;\n  this.disableFormat = options && options.disableFormat === true;\n};\n\nValidatorResult.prototype.addError = function addError(detail) {\n  var err;\n  if (typeof detail == 'string') {\n    err = new ValidationError(detail, this.instance, this.schema, this.path);\n  } else {\n    if (!detail) throw new Error('Missing error detail');\n    if (!detail.message) throw new Error('Missing error message');\n    if (!detail.name) throw new Error('Missing validator type');\n    err = new ValidationError(detail.message, this.instance, this.schema, this.path, detail.name, detail.argument);\n  }\n\n  this.errors.push(err);\n  if (this.throwFirst) {\n    throw new ValidatorResultError(this);\n  }else if(this.throwError){\n    throw err;\n  }\n  return err;\n};\n\nValidatorResult.prototype.importErrors = function importErrors(res) {\n  if (typeof res == 'string' || (res && res.validatorType)) {\n    this.addError(res);\n  } else if (res && res.errors) {\n    this.errors = this.errors.concat(res.errors);\n  }\n};\n\nfunction stringizer (v,i){\n  return i+': '+v.toString()+'\\n';\n}\nValidatorResult.prototype.toString = function toString(res) {\n  return this.errors.map(stringizer).join('');\n};\n\nObject.defineProperty(ValidatorResult.prototype, \"valid\", { get: function() {\n  return !this.errors.length;\n} });\n\nmodule.exports.ValidatorResultError = ValidatorResultError;\nfunction ValidatorResultError(result) {\n  if(Error.captureStackTrace){\n    Error.captureStackTrace(this, ValidatorResultError);\n  }\n  this.instance = result.instance;\n  this.schema = result.schema;\n  this.options = result.options;\n  this.errors = result.errors;\n}\nValidatorResultError.prototype = new Error();\nValidatorResultError.prototype.constructor = ValidatorResultError;\nValidatorResultError.prototype.name = \"Validation Error\";\n\n/**\n * Describes a problem with a Schema which prevents validation of an instance\n * @name SchemaError\n * @constructor\n */\nvar SchemaError = exports.SchemaError = function SchemaError (msg, schema) {\n  this.message = msg;\n  this.schema = schema;\n  Error.call(this, msg);\n  Error.captureStackTrace(this, SchemaError);\n};\nSchemaError.prototype = Object.create(Error.prototype,\n  {\n    constructor: {value: SchemaError, enumerable: false},\n    name: {value: 'SchemaError', enumerable: false},\n  });\n\nvar SchemaContext = exports.SchemaContext = function SchemaContext (schema, options, path, base, schemas) {\n  this.schema = schema;\n  this.options = options;\n  if(Array.isArray(path)){\n    this.path = path;\n    this.propertyPath = path.reduce(function(sum, item){\n      return sum + makeSuffix(item);\n    }, 'instance');\n  }else{\n    this.propertyPath = path;\n  }\n  this.base = base;\n  this.schemas = schemas;\n};\n\nSchemaContext.prototype.resolve = function resolve (target) {\n  return uri.resolve(this.base, target);\n};\n\nSchemaContext.prototype.makeChild = function makeChild(schema, propertyName){\n  var path = (propertyName===undefined) ? this.path : this.path.concat([propertyName]);\n  var id = schema.$id || schema.id;\n  var base = uri.resolve(this.base, id||'');\n  var ctx = new SchemaContext(schema, this.options, path, base, Object.create(this.schemas));\n  if(id && !ctx.schemas[base]){\n    ctx.schemas[base] = schema;\n  }\n  return ctx;\n};\n\nvar FORMAT_REGEXPS = exports.FORMAT_REGEXPS = {\n  // 7.3.1. Dates, Times, and Duration\n  'date-time': /^\\d{4}-(?:0[0-9]{1}|1[0-2]{1})-(3[01]|0[1-9]|[12][0-9])[tT ](2[0-4]|[01][0-9]):([0-5][0-9]):(60|[0-5][0-9])(\\.\\d+)?([zZ]|[+-]([0-5][0-9]):(60|[0-5][0-9]))$/,\n  'date': /^\\d{4}-(?:0[0-9]{1}|1[0-2]{1})-(3[01]|0[1-9]|[12][0-9])$/,\n  'time': /^(2[0-4]|[01][0-9]):([0-5][0-9]):(60|[0-5][0-9])$/,\n  'duration': /P(T\\d+(H(\\d+M(\\d+S)?)?|M(\\d+S)?|S)|\\d+(D|M(\\d+D)?|Y(\\d+M(\\d+D)?)?)(T\\d+(H(\\d+M(\\d+S)?)?|M(\\d+S)?|S))?|\\d+W)/i,\n\n  // 7.3.2. Email Addresses\n  // TODO: fix the email production\n  'email': /^(?:[\\w\\!\\#\\$\\%\\&\\'\\*\\+\\-\\/\\=\\?\\^\\`\\{\\|\\}\\~]+\\.)*[\\w\\!\\#\\$\\%\\&\\'\\*\\+\\-\\/\\=\\?\\^\\`\\{\\|\\}\\~]+@(?:(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-](?!\\.)){0,61}[a-zA-Z0-9]?\\.)+[a-zA-Z0-9](?:[a-zA-Z0-9\\-](?!$)){0,61}[a-zA-Z0-9]?)|(?:\\[(?:(?:[01]?\\d{1,2}|2[0-4]\\d|25[0-5])\\.){3}(?:[01]?\\d{1,2}|2[0-4]\\d|25[0-5])\\]))$/,\n  'idn-email': /^(\"(?:[!#-\\[\\]-\\u{10FFFF}]|\\\\[\\t -\\u{10FFFF}])*\"|[!#-'*+\\-/-9=?A-Z\\^-\\u{10FFFF}](?:\\.?[!#-'*+\\-/-9=?A-Z\\^-\\u{10FFFF}])*)@([!#-'*+\\-/-9=?A-Z\\^-\\u{10FFFF}](?:\\.?[!#-'*+\\-/-9=?A-Z\\^-\\u{10FFFF}])*|\\[[!-Z\\^-\\u{10FFFF}]*\\])$/u,\n\n  // 7.3.3. Hostnames\n\n  // 7.3.4. IP Addresses\n  'ip-address': /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/,\n  // FIXME whitespace is invalid\n  'ipv6': /^\\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?\\s*$/,\n\n  // 7.3.5. Resource Identifiers\n  // TODO: A more accurate regular expression for \"uri\" goes:\n  // [A-Za-z][+\\-.0-9A-Za-z]*:((/(/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~])+|(\\[(([Vv][0-9A-Fa-f]+\\.[!$&-.0-;=A-Z_a-z~]+)?|[.0-:A-Fa-f]+)\\])?)(:\\d*)?)?)?#(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*|(/(/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~])+|(\\[(([Vv][0-9A-Fa-f]+\\.[!$&-.0-;=A-Z_a-z~]+)?|[.0-:A-Fa-f]+)\\])?)(:\\d*)?[/?]|[!$&-.0-;=?-Z_a-z~])|/?%[0-9A-Fa-f]{2}|[!$&-.0-;=?-Z_a-z~])(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*(#(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*)?|/(/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~])+(:\\d*)?|(\\[(([Vv][0-9A-Fa-f]+\\.[!$&-.0-;=A-Z_a-z~]+)?|[.0-:A-Fa-f]+)\\])?:\\d*|\\[(([Vv][0-9A-Fa-f]+\\.[!$&-.0-;=A-Z_a-z~]+)?|[.0-:A-Fa-f]+)\\])?)?)?\n  'uri': /^[a-zA-Z][a-zA-Z0-9+.-]*:[^\\s]*$/,\n  'uri-reference': /^(((([A-Za-z][+\\-.0-9A-Za-z]*(:%[0-9A-Fa-f]{2}|:[!$&-.0-;=?-Z_a-z~]|[/?])|\\?)(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*|([A-Za-z][+\\-.0-9A-Za-z]*:?)?)|([A-Za-z][+\\-.0-9A-Za-z]*:)?\\/((%[0-9A-Fa-f]{2}|\\/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~])+|(\\[(([Vv][0-9A-Fa-f]+\\.[!$&-.0-;=A-Z_a-z~]+)?|[.0-:A-Fa-f]+)\\])?)(:\\d*)?[/?]|[!$&-.0-;=?-Z_a-z~])(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*|(\\/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~])+|(\\[(([Vv][0-9A-Fa-f]+\\.[!$&-.0-;=A-Z_a-z~]+)?|[.0-:A-Fa-f]+)\\])?)(:\\d*)?)?))#(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*|(([A-Za-z][+\\-.0-9A-Za-z]*)?%[0-9A-Fa-f]{2}|[!$&-.0-9;=@_~]|[A-Za-z][+\\-.0-9A-Za-z]*[!$&-*,;=@_~])(%[0-9A-Fa-f]{2}|[!$&-.0-9;=@-Z_a-z~])*((([/?](%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*)?#|[/?])(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*)?|([A-Za-z][+\\-.0-9A-Za-z]*(:%[0-9A-Fa-f]{2}|:[!$&-.0-;=?-Z_a-z~]|[/?])|\\?)(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*|([A-Za-z][+\\-.0-9A-Za-z]*:)?\\/((%[0-9A-Fa-f]{2}|\\/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~])+|(\\[(([Vv][0-9A-Fa-f]+\\.[!$&-.0-;=A-Z_a-z~]+)?|[.0-:A-Fa-f]+)\\])?)(:\\d*)?[/?]|[!$&-.0-;=?-Z_a-z~])(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*|\\/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~])+(:\\d*)?|(\\[(([Vv][0-9A-Fa-f]+\\.[!$&-.0-;=A-Z_a-z~]+)?|[.0-:A-Fa-f]+)\\])?:\\d*|\\[(([Vv][0-9A-Fa-f]+\\.[!$&-.0-;=A-Z_a-z~]+)?|[.0-:A-Fa-f]+)\\])?)?|[A-Za-z][+\\-.0-9A-Za-z]*:?)?$/,\n  'iri': /^[a-zA-Z][a-zA-Z0-9+.-]*:[^\\s]*$/,\n  'iri-reference': /^(((([A-Za-z][+\\-.0-9A-Za-z]*(:%[0-9A-Fa-f]{2}|:[!$&-.0-;=?-Z_a-z~-\\u{10FFFF}]|[/?])|\\?)(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~-\\u{10FFFF}])*|([A-Za-z][+\\-.0-9A-Za-z]*:?)?)|([A-Za-z][+\\-.0-9A-Za-z]*:)?\\/((%[0-9A-Fa-f]{2}|\\/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~-\\u{10FFFF}])+|(\\[(([Vv][0-9A-Fa-f]+\\.[!$&-.0-;=A-Z_a-z~-\\u{10FFFF}]+)?|[.0-:A-Fa-f]+)\\])?)(:\\d*)?[/?]|[!$&-.0-;=?-Z_a-z~-\\u{10FFFF}])(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~-\\u{10FFFF}])*|(\\/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~-\\u{10FFFF}])+|(\\[(([Vv][0-9A-Fa-f]+\\.[!$&-.0-;=A-Z_a-z~-\\u{10FFFF}]+)?|[.0-:A-Fa-f]+)\\])?)(:\\d*)?)?))#(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~-\\u{10FFFF}])*|(([A-Za-z][+\\-.0-9A-Za-z]*)?%[0-9A-Fa-f]{2}|[!$&-.0-9;=@_~-\\u{10FFFF}]|[A-Za-z][+\\-.0-9A-Za-z]*[!$&-*,;=@_~-\\u{10FFFF}])(%[0-9A-Fa-f]{2}|[!$&-.0-9;=@-Z_a-z~-\\u{10FFFF}])*((([/?](%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~-\\u{10FFFF}])*)?#|[/?])(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~-\\u{10FFFF}])*)?|([A-Za-z][+\\-.0-9A-Za-z]*(:%[0-9A-Fa-f]{2}|:[!$&-.0-;=?-Z_a-z~-\\u{10FFFF}]|[/?])|\\?)(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~-\\u{10FFFF}])*|([A-Za-z][+\\-.0-9A-Za-z]*:)?\\/((%[0-9A-Fa-f]{2}|\\/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~-\\u{10FFFF}])+|(\\[(([Vv][0-9A-Fa-f]+\\.[!$&-.0-;=A-Z_a-z~-\\u{10FFFF}]+)?|[.0-:A-Fa-f]+)\\])?)(:\\d*)?[/?]|[!$&-.0-;=?-Z_a-z~-\\u{10FFFF}])(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~-\\u{10FFFF}])*|\\/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~-\\u{10FFFF}])+(:\\d*)?|(\\[(([Vv][0-9A-Fa-f]+\\.[!$&-.0-;=A-Z_a-z~-\\u{10FFFF}]+)?|[.0-:A-Fa-f]+)\\])?:\\d*|\\[(([Vv][0-9A-Fa-f]+\\.[!$&-.0-;=A-Z_a-z~-\\u{10FFFF}]+)?|[.0-:A-Fa-f]+)\\])?)?|[A-Za-z][+\\-.0-9A-Za-z]*:?)?$/u,\n  'uuid': /^[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}$/i,\n\n  // 7.3.6. uri-template\n  'uri-template': /(%[0-9a-f]{2}|[!#$&(-;=?@\\[\\]_a-z~]|\\{[!#&+,./;=?@|]?(%[0-9a-f]{2}|[0-9_a-z])(\\.?(%[0-9a-f]{2}|[0-9_a-z]))*(:[1-9]\\d{0,3}|\\*)?(,(%[0-9a-f]{2}|[0-9_a-z])(\\.?(%[0-9a-f]{2}|[0-9_a-z]))*(:[1-9]\\d{0,3}|\\*)?)*\\})*/iu,\n\n  // 7.3.7. JSON Pointers\n  'json-pointer': /^(\\/([\\x00-\\x2e0-@\\[-}\\x7f]|~[01])*)*$/iu,\n  'relative-json-pointer': /^\\d+(#|(\\/([\\x00-\\x2e0-@\\[-}\\x7f]|~[01])*)*)$/iu,\n\n  // hostname regex from: http://stackoverflow.com/a/1420225/5628\n  'hostname': /^(?=.{1,255}$)[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?(?:\\.[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?)*\\.?$/,\n  'host-name': /^(?=.{1,255}$)[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?(?:\\.[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?)*\\.?$/,\n\n  'utc-millisec': function (input) {\n    return (typeof input === 'string') && parseFloat(input) === parseInt(input, 10) && !isNaN(input);\n  },\n\n  // 7.3.8. regex\n  'regex': function (input) {\n    var result = true;\n    try {\n      new RegExp(input);\n    } catch (e) {\n      result = false;\n    }\n    return result;\n  },\n\n  // Other definitions\n  // \"style\" was removed from JSON Schema in draft-4 and is deprecated\n  'style': /[\\r\\n\\t ]*[^\\r\\n\\t ][^:]*:[\\r\\n\\t ]*[^\\r\\n\\t ;]*[\\r\\n\\t ]*;?/,\n  // \"color\" was removed from JSON Schema in draft-4 and is deprecated\n  'color': /^(#?([0-9A-Fa-f]{3}){1,2}\\b|aqua|black|blue|fuchsia|gray|green|lime|maroon|navy|olive|orange|purple|red|silver|teal|white|yellow|(rgb\\(\\s*\\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\b\\s*,\\s*\\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\b\\s*,\\s*\\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\b\\s*\\))|(rgb\\(\\s*(\\d?\\d%|100%)+\\s*,\\s*(\\d?\\d%|100%)+\\s*,\\s*(\\d?\\d%|100%)+\\s*\\)))$/,\n  'phone': /^\\+(?:[0-9] ?){6,14}[0-9]$/,\n  'alpha': /^[a-zA-Z]+$/,\n  'alphanumeric': /^[a-zA-Z0-9]+$/,\n};\n\nFORMAT_REGEXPS.regexp = FORMAT_REGEXPS.regex;\nFORMAT_REGEXPS.pattern = FORMAT_REGEXPS.regex;\nFORMAT_REGEXPS.ipv4 = FORMAT_REGEXPS['ip-address'];\n\nexports.isFormat = function isFormat (input, format, validator) {\n  if (typeof input === 'string' && FORMAT_REGEXPS[format] !== undefined) {\n    if (FORMAT_REGEXPS[format] instanceof RegExp) {\n      return FORMAT_REGEXPS[format].test(input);\n    }\n    if (typeof FORMAT_REGEXPS[format] === 'function') {\n      return FORMAT_REGEXPS[format](input);\n    }\n  } else if (validator && validator.customFormats &&\n      typeof validator.customFormats[format] === 'function') {\n    return validator.customFormats[format](input);\n  }\n  return true;\n};\n\nvar makeSuffix = exports.makeSuffix = function makeSuffix (key) {\n  key = key.toString();\n  // This function could be capable of outputting valid a ECMAScript string, but the\n  // resulting code for testing which form to use would be tens of thousands of characters long\n  // That means this will use the name form for some illegal forms\n  if (!key.match(/[.\\s\\[\\]]/) && !key.match(/^[\\d]/)) {\n    return '.' + key;\n  }\n  if (key.match(/^\\d+$/)) {\n    return '[' + key + ']';\n  }\n  return '[' + JSON.stringify(key) + ']';\n};\n\nexports.deepCompareStrict = function deepCompareStrict (a, b) {\n  if (typeof a !== typeof b) {\n    return false;\n  }\n  if (Array.isArray(a)) {\n    if (!Array.isArray(b)) {\n      return false;\n    }\n    if (a.length !== b.length) {\n      return false;\n    }\n    return a.every(function (v, i) {\n      return deepCompareStrict(a[i], b[i]);\n    });\n  }\n  if (typeof a === 'object') {\n    if (!a || !b) {\n      return a === b;\n    }\n    var aKeys = Object.keys(a);\n    var bKeys = Object.keys(b);\n    if (aKeys.length !== bKeys.length) {\n      return false;\n    }\n    return aKeys.every(function (v) {\n      return deepCompareStrict(a[v], b[v]);\n    });\n  }\n  return a === b;\n};\n\nfunction deepMerger (target, dst, e, i) {\n  if (typeof e === 'object') {\n    dst[i] = deepMerge(target[i], e);\n  } else {\n    if (target.indexOf(e) === -1) {\n      dst.push(e);\n    }\n  }\n}\n\nfunction copyist (src, dst, key) {\n  dst[key] = src[key];\n}\n\nfunction copyistWithDeepMerge (target, src, dst, key) {\n  if (typeof src[key] !== 'object' || !src[key]) {\n    dst[key] = src[key];\n  }\n  else {\n    if (!target[key]) {\n      dst[key] = src[key];\n    } else {\n      dst[key] = deepMerge(target[key], src[key]);\n    }\n  }\n}\n\nfunction deepMerge (target, src) {\n  var array = Array.isArray(src);\n  var dst = array && [] || {};\n\n  if (array) {\n    target = target || [];\n    dst = dst.concat(target);\n    src.forEach(deepMerger.bind(null, target, dst));\n  } else {\n    if (target && typeof target === 'object') {\n      Object.keys(target).forEach(copyist.bind(null, target, dst));\n    }\n    Object.keys(src).forEach(copyistWithDeepMerge.bind(null, target, src, dst));\n  }\n\n  return dst;\n}\n\nmodule.exports.deepMerge = deepMerge;\n\n/**\n * Validates instance against the provided schema\n * Implements URI+JSON Pointer encoding, e.g. \"%7e\"=\"~0\"=>\"~\", \"~1\"=\"%2f\"=>\"/\"\n * @param o\n * @param s The path to walk o along\n * @return any\n */\nexports.objectGetPath = function objectGetPath(o, s) {\n  var parts = s.split('/').slice(1);\n  var k;\n  while (typeof (k=parts.shift()) == 'string') {\n    var n = decodeURIComponent(k.replace(/~0/,'~').replace(/~1/g,'/'));\n    if (!(n in o)) return;\n    o = o[n];\n  }\n  return o;\n};\n\nfunction pathEncoder (v) {\n  return '/'+encodeURIComponent(v).replace(/~/g,'%7E');\n}\n/**\n * Accept an Array of property names and return a JSON Pointer URI fragment\n * @param Array a\n * @return {String}\n */\nexports.encodePath = function encodePointer(a){\n  // ~ must be encoded explicitly because hacks\n  // the slash is encoded by encodeURIComponent\n  return a.map(pathEncoder).join('');\n};\n\n\n/**\n * Calculate the number of decimal places a number uses\n * We need this to get correct results out of multipleOf and divisibleBy\n * when either figure is has decimal places, due to IEEE-754 float issues.\n * @param number\n * @returns {number}\n */\nexports.getDecimalPlaces = function getDecimalPlaces(number) {\n\n  var decimalPlaces = 0;\n  if (isNaN(number)) return decimalPlaces;\n\n  if (typeof number !== 'number') {\n    number = Number(number);\n  }\n\n  var parts = number.toString().split('e');\n  if (parts.length === 2) {\n    if (parts[1][0] !== '-') {\n      return decimalPlaces;\n    } else {\n      decimalPlaces = Number(parts[1].slice(1));\n    }\n  }\n\n  var decimalParts = parts[0].split('.');\n  if (decimalParts.length === 2) {\n    decimalPlaces += decimalParts[1].length;\n  }\n\n  return decimalPlaces;\n};\n\nexports.isSchema = function isSchema(val){\n  return (typeof val === 'object' && val) || (typeof val === 'boolean');\n};\n\n","'use strict';\n\nvar Validator = module.exports.Validator = require('./validator');\n\nmodule.exports.ValidatorResult = require('./helpers').ValidatorResult;\nmodule.exports.ValidatorResultError = require('./helpers').ValidatorResultError;\nmodule.exports.ValidationError = require('./helpers').ValidationError;\nmodule.exports.SchemaError = require('./helpers').SchemaError;\nmodule.exports.SchemaScanResult = require('./scan').SchemaScanResult;\nmodule.exports.scan = require('./scan').scan;\n\nmodule.exports.validate = function (instance, schema, options) {\n  var v = new Validator();\n  return v.validate(instance, schema, options);\n};\n","\"use strict\";\n\nvar urilib = require('url');\nvar helpers = require('./helpers');\n\nmodule.exports.SchemaScanResult = SchemaScanResult;\nfunction SchemaScanResult(found, ref){\n  this.id = found;\n  this.ref = ref;\n}\n\n/**\n * Adds a schema with a certain urn to the Validator instance.\n * @param string uri\n * @param object schema\n * @return {Object}\n */\nmodule.exports.scan = function scan(base, schema){\n  function scanSchema(baseuri, schema){\n    if(!schema || typeof schema!='object') return;\n    // Mark all referenced schemas so we can tell later which schemas are referred to, but never defined\n    if(schema.$ref){\n      var resolvedUri = urilib.resolve(baseuri, schema.$ref);\n      ref[resolvedUri] = ref[resolvedUri] ? ref[resolvedUri]+1 : 0;\n      return;\n    }\n    var id = schema.$id || schema.id;\n    var ourBase = id ? urilib.resolve(baseuri, id) : baseuri;\n    if (ourBase) {\n      // If there's no fragment, append an empty one\n      if(ourBase.indexOf('#')<0) ourBase += '#';\n      if(found[ourBase]){\n        if(!helpers.deepCompareStrict(found[ourBase], schema)){\n          throw new Error('Schema <'+ourBase+'> already exists with different definition');\n        }\n        return found[ourBase];\n      }\n      found[ourBase] = schema;\n      // strip trailing fragment\n      if(ourBase[ourBase.length-1]=='#'){\n        found[ourBase.substring(0, ourBase.length-1)] = schema;\n      }\n    }\n    scanArray(ourBase+'/items', (Array.isArray(schema.items)?schema.items:[schema.items]));\n    scanArray(ourBase+'/extends', (Array.isArray(schema.extends)?schema.extends:[schema.extends]));\n    scanSchema(ourBase+'/additionalItems', schema.additionalItems);\n    scanObject(ourBase+'/properties', schema.properties);\n    scanSchema(ourBase+'/additionalProperties', schema.additionalProperties);\n    scanObject(ourBase+'/definitions', schema.definitions);\n    scanObject(ourBase+'/patternProperties', schema.patternProperties);\n    scanObject(ourBase+'/dependencies', schema.dependencies);\n    scanArray(ourBase+'/disallow', schema.disallow);\n    scanArray(ourBase+'/allOf', schema.allOf);\n    scanArray(ourBase+'/anyOf', schema.anyOf);\n    scanArray(ourBase+'/oneOf', schema.oneOf);\n    scanSchema(ourBase+'/not', schema.not);\n  }\n  function scanArray(baseuri, schemas){\n    if(!Array.isArray(schemas)) return;\n    for(var i=0; i<schemas.length; i++){\n      scanSchema(baseuri+'/'+i, schemas[i]);\n    }\n  }\n  function scanObject(baseuri, schemas){\n    if(!schemas || typeof schemas!='object') return;\n    for(var p in schemas){\n      scanSchema(baseuri+'/'+p, schemas[p]);\n    }\n  }\n\n  var found = {};\n  var ref = {};\n  scanSchema(base, schema);\n  return new SchemaScanResult(found, ref);\n};\n","'use strict';\n\nvar urilib = require('url');\n\nvar attribute = require('./attribute');\nvar helpers = require('./helpers');\nvar scanSchema = require('./scan').scan;\nvar ValidatorResult = helpers.ValidatorResult;\nvar ValidatorResultError = helpers.ValidatorResultError;\nvar SchemaError = helpers.SchemaError;\nvar SchemaContext = helpers.SchemaContext;\n//var anonymousBase = 'vnd.jsonschema:///';\nvar anonymousBase = '/';\n\n/**\n * Creates a new Validator object\n * @name Validator\n * @constructor\n */\nvar Validator = function Validator () {\n  // Allow a validator instance to override global custom formats or to have their\n  // own custom formats.\n  this.customFormats = Object.create(Validator.prototype.customFormats);\n  this.schemas = {};\n  this.unresolvedRefs = [];\n\n  // Use Object.create to make this extensible without Validator instances stepping on each other's toes.\n  this.types = Object.create(types);\n  this.attributes = Object.create(attribute.validators);\n};\n\n// Allow formats to be registered globally.\nValidator.prototype.customFormats = {};\n\n// Hint at the presence of a property\nValidator.prototype.schemas = null;\nValidator.prototype.types = null;\nValidator.prototype.attributes = null;\nValidator.prototype.unresolvedRefs = null;\n\n/**\n * Adds a schema with a certain urn to the Validator instance.\n * @param schema\n * @param urn\n * @return {Object}\n */\nValidator.prototype.addSchema = function addSchema (schema, base) {\n  var self = this;\n  if (!schema) {\n    return null;\n  }\n  var scan = scanSchema(base||anonymousBase, schema);\n  var ourUri = base || schema.$id || schema.id;\n  for(var uri in scan.id){\n    this.schemas[uri] = scan.id[uri];\n  }\n  for(var uri in scan.ref){\n    // If this schema is already defined, it will be filtered out by the next step\n    this.unresolvedRefs.push(uri);\n  }\n  // Remove newly defined schemas from unresolvedRefs\n  this.unresolvedRefs = this.unresolvedRefs.filter(function(uri){\n    return typeof self.schemas[uri]==='undefined';\n  });\n  return this.schemas[ourUri];\n};\n\nValidator.prototype.addSubSchemaArray = function addSubSchemaArray(baseuri, schemas) {\n  if(!Array.isArray(schemas)) return;\n  for(var i=0; i<schemas.length; i++){\n    this.addSubSchema(baseuri, schemas[i]);\n  }\n};\n\nValidator.prototype.addSubSchemaObject = function addSubSchemaArray(baseuri, schemas) {\n  if(!schemas || typeof schemas!='object') return;\n  for(var p in schemas){\n    this.addSubSchema(baseuri, schemas[p]);\n  }\n};\n\n\n\n/**\n * Sets all the schemas of the Validator instance.\n * @param schemas\n */\nValidator.prototype.setSchemas = function setSchemas (schemas) {\n  this.schemas = schemas;\n};\n\n/**\n * Returns the schema of a certain urn\n * @param urn\n */\nValidator.prototype.getSchema = function getSchema (urn) {\n  return this.schemas[urn];\n};\n\n/**\n * Validates instance against the provided schema\n * @param instance\n * @param schema\n * @param [options]\n * @param [ctx]\n * @return {Array}\n */\nValidator.prototype.validate = function validate (instance, schema, options, ctx) {\n  if((typeof schema !== 'boolean' && typeof schema !== 'object') || schema === null){\n    throw new SchemaError('Expected `schema` to be an object or boolean');\n  }\n  if (!options) {\n    options = {};\n  }\n  // This section indexes subschemas in the provided schema, so they don't need to be added with Validator#addSchema\n  // This will work so long as the function at uri.resolve() will resolve a relative URI to a relative URI\n  var id = schema.$id || schema.id;\n  var base = urilib.resolve(options.base||anonymousBase, id||'');\n  if(!ctx){\n    ctx = new SchemaContext(schema, options, [], base, Object.create(this.schemas));\n    if (!ctx.schemas[base]) {\n      ctx.schemas[base] = schema;\n    }\n    var found = scanSchema(base, schema);\n    for(var n in found.id){\n      var sch = found.id[n];\n      ctx.schemas[n] = sch;\n    }\n  }\n  if(options.required && instance===undefined){\n    var result = new ValidatorResult(instance, schema, options, ctx);\n    result.addError('is required, but is undefined');\n    return result;\n  }\n  var result = this.validateSchema(instance, schema, options, ctx);\n  if (!result) {\n    throw new Error('Result undefined');\n  }else if(options.throwAll && result.errors.length){\n    throw new ValidatorResultError(result);\n  }\n  return result;\n};\n\n/**\n* @param Object schema\n* @return mixed schema uri or false\n*/\nfunction shouldResolve(schema) {\n  var ref = (typeof schema === 'string') ? schema : schema.$ref;\n  if (typeof ref=='string') return ref;\n  return false;\n}\n\n/**\n * Validates an instance against the schema (the actual work horse)\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @private\n * @return {ValidatorResult}\n */\nValidator.prototype.validateSchema = function validateSchema (instance, schema, options, ctx) {\n  var result = new ValidatorResult(instance, schema, options, ctx);\n\n  // Support for the true/false schemas\n  if(typeof schema==='boolean') {\n    if(schema===true){\n      // `true` is always valid\n      schema = {};\n    }else if(schema===false){\n      // `false` is always invalid\n      schema = {type: []};\n    }\n  }else if(!schema){\n    // This might be a string\n    throw new Error(\"schema is undefined\");\n  }\n\n  if (schema['extends']) {\n    if (Array.isArray(schema['extends'])) {\n      var schemaobj = {schema: schema, ctx: ctx};\n      schema['extends'].forEach(this.schemaTraverser.bind(this, schemaobj));\n      schema = schemaobj.schema;\n      schemaobj.schema = null;\n      schemaobj.ctx = null;\n      schemaobj = null;\n    } else {\n      schema = helpers.deepMerge(schema, this.superResolve(schema['extends'], ctx));\n    }\n  }\n\n  // If passed a string argument, load that schema URI\n  var switchSchema = shouldResolve(schema);\n  if (switchSchema) {\n    var resolved = this.resolve(schema, switchSchema, ctx);\n    var subctx = new SchemaContext(resolved.subschema, options, ctx.path, resolved.switchSchema, ctx.schemas);\n    return this.validateSchema(instance, resolved.subschema, options, subctx);\n  }\n\n  var skipAttributes = options && options.skipAttributes || [];\n  // Validate each schema attribute against the instance\n  for (var key in schema) {\n    if (!attribute.ignoreProperties[key] && skipAttributes.indexOf(key) < 0) {\n      var validatorErr = null;\n      var validator = this.attributes[key];\n      if (validator) {\n        validatorErr = validator.call(this, instance, schema, options, ctx);\n      } else if (options.allowUnknownAttributes === false) {\n        // This represents an error with the schema itself, not an invalid instance\n        throw new SchemaError(\"Unsupported attribute: \" + key, schema);\n      }\n      if (validatorErr) {\n        result.importErrors(validatorErr);\n      }\n    }\n  }\n\n  if (typeof options.rewrite == 'function') {\n    var value = options.rewrite.call(this, instance, schema, options, ctx);\n    result.instance = value;\n  }\n  return result;\n};\n\n/**\n* @private\n* @param Object schema\n* @param SchemaContext ctx\n* @returns Object schema or resolved schema\n*/\nValidator.prototype.schemaTraverser = function schemaTraverser (schemaobj, s) {\n  schemaobj.schema = helpers.deepMerge(schemaobj.schema, this.superResolve(s, schemaobj.ctx));\n};\n\n/**\n* @private\n* @param Object schema\n* @param SchemaContext ctx\n* @returns Object schema or resolved schema\n*/\nValidator.prototype.superResolve = function superResolve (schema, ctx) {\n  var ref = shouldResolve(schema);\n  if(ref) {\n    return this.resolve(schema, ref, ctx).subschema;\n  }\n  return schema;\n};\n\n/**\n* @private\n* @param Object schema\n* @param Object switchSchema\n* @param SchemaContext ctx\n* @return Object resolved schemas {subschema:String, switchSchema: String}\n* @throws SchemaError\n*/\nValidator.prototype.resolve = function resolve (schema, switchSchema, ctx) {\n  switchSchema = ctx.resolve(switchSchema);\n  // First see if the schema exists under the provided URI\n  if (ctx.schemas[switchSchema]) {\n    return {subschema: ctx.schemas[switchSchema], switchSchema: switchSchema};\n  }\n  // Else try walking the property pointer\n  var parsed = urilib.parse(switchSchema);\n  var fragment = parsed && parsed.hash;\n  var document = fragment && fragment.length && switchSchema.substr(0, switchSchema.length - fragment.length);\n  if (!document || !ctx.schemas[document]) {\n    throw new SchemaError(\"no such schema <\" + switchSchema + \">\", schema);\n  }\n  var subschema = helpers.objectGetPath(ctx.schemas[document], fragment.substr(1));\n  if(subschema===undefined){\n    throw new SchemaError(\"no such schema \" + fragment + \" located in <\" + document + \">\", schema);\n  }\n  return {subschema: subschema, switchSchema: switchSchema};\n};\n\n/**\n * Tests whether the instance if of a certain type.\n * @private\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @param type\n * @return {boolean}\n */\nValidator.prototype.testType = function validateType (instance, schema, options, ctx, type) {\n  if(type===undefined){\n    return;\n  }else if(type===null){\n    throw new SchemaError('Unexpected null in \"type\" keyword');\n  }\n  if (typeof this.types[type] == 'function') {\n    return this.types[type].call(this, instance);\n  }\n  if (type && typeof type == 'object') {\n    var res = this.validateSchema(instance, type, options, ctx);\n    return res === undefined || !(res && res.errors.length);\n  }\n  // Undefined or properties not on the list are acceptable, same as not being defined\n  return true;\n};\n\nvar types = Validator.prototype.types = {};\ntypes.string = function testString (instance) {\n  return typeof instance == 'string';\n};\ntypes.number = function testNumber (instance) {\n  // isFinite returns false for NaN, Infinity, and -Infinity\n  return typeof instance == 'number' && isFinite(instance);\n};\ntypes.integer = function testInteger (instance) {\n  return (typeof instance == 'number') && instance % 1 === 0;\n};\ntypes.boolean = function testBoolean (instance) {\n  return typeof instance == 'boolean';\n};\ntypes.array = function testArray (instance) {\n  return Array.isArray(instance);\n};\ntypes['null'] = function testNull (instance) {\n  return instance === null;\n};\ntypes.date = function testDate (instance) {\n  return instance instanceof Date;\n};\ntypes.any = function testAny (instance) {\n  return true;\n};\ntypes.object = function testObject (instance) {\n  // TODO: fix this - see #15\n  return instance && (typeof instance === 'object') && !(Array.isArray(instance)) && !(instance instanceof Date);\n};\n\nmodule.exports = Validator;\n"],"names":["common_1","require","util_1","types_1","util_2","exports","constructor","txData","opts","_opts$allowUnlimitedI","_opts$common","cache","hash","undefined","dataFee","activeCapabilities","DEFAULT_CHAIN","Chain","Mainnet","DEFAULT_HARDFORK","Hardfork","Merge","nonce","gasLimit","to","value","data","v","r","s","type","this","_type","Number","bufferToBigInt","toBuffer","txOptions","toB","vB","rB","sB","length","Address","_validateCannotExceedMaxInteger","createContract","allowUnlimitedInitCodeSize","common","_getCommon","isActivatedEIP","checkMaxInitCodeSize","supports","capability","includes","validate","stringError","arguments","errors","getBaseFee","push","concat","isSigned","verifySignature","_validateYParity","BigInt","msg","_errorMsg","Error","_validateHighS","gteHardfork","SECP256K1_ORDER_DIV_2","txFee","param","fee","getDataFee","toCreationAddress","txCreationFee","txDataZero","txDataNonZero","cost","i","dataLength","Math","ceil","buf","publicKey","getSenderPublicKey","unpadBuffer","e","getSenderAddress","publicToAddress","sign","privateKey","hackApplied","Capability","EIP155ReplayProtection","msgHash","getMessageToSign","ecsign","tx","_processSignature","index","indexOf","splice","chainId","chainIdBigInt","copy","Common","isSupportedChainId","chain","hardfork","custom","name","networkId","baseChain","_common$copy","values","bits","cannotEqual","key","Object","entries","MAX_UINT64","MAX_INTEGER","_validateNotArray","txDataKeys","Array","isArray","_getSharedErrorPostfix","bufferToHex","toString","hf","postfix","rlp_1","keccak_1","baseTransaction_1","TRANSACTION_TYPE_BUFFER","Buffer","from","padStart","FeeMarketEIP1559Transaction","BaseTransaction","_opts$freeze","super","accessList","maxFeePerGas","maxPriorityFeePerGas","accessListData","AccessLists","getAccessListData","AccessListJSON","verifyAccessList","freeze","fromTxData","fromSerializedTx","serialized","slice","equals","arrToBufArr","RLP","decode","fromValuesArray","validateNoLeadingZeroes","getDataFeeEIP2930","isFrozen","getUpfrontCost","baseFee","prio","maxBase","gasPrice","raw","bigIntToUnpaddedBuffer","serialize","base","encode","bufArrToArr","hashMessage","message","keccak256","getMessageToVerifySignature","ecrecover","toJSON","accessListJSON","getAccessListJSON","bigIntToHex","errorStr","AccessListEIP2930Transaction","Uint8Array","_this$accessList$leng","_this$accessList","_txParams","_txParams$gasLimit","txParams","assign","toType","gas","TypeOutput","input","setLengthLeft","eip1559Transaction_1","enumerable","get","eip2930Transaction_1","legacyTransaction_1","Transaction","transactionFactory_1","TransactionFactory","__exportStar","meetsEIP155","_v","chainIdDoubled","_validateTxV","_getMessageToSign","numSub","fromRpc_1","txType","fromSerializedData","fromBlockBodyData","isBuffer","fromEthersProvider","provider","txHash","prov","getProvider","fetchFromProvider","method","params","fromRPCTx","normalizeTxParams","isAccessListBuffer","firstItem","maxInitCodeSize","bufferAccessList","isAccessList","newAccessList","item","addressBuffer","address","storageItems","storageKeys","json","jsonItem","accessListItem","storageSlots","storageSlot","JSONItem","slot","accessListStorageKeyCost","accessListAddressCost","slots","crc_32_1","events_1","goerli","mainnet","rinkeby","ropsten","sepolia","eips_1","enums_1","hardforks_1","utils_1","EventEmitter","_opts$customChains","_this$_chainParams$de","_eips","_customChains","customChains","_chainParams","setChain","defaultHardfork","HARDFORK_CHANGES","hardforks","map","_hardfork","setHardfork","eips","setEIPs","chainParamsOrName","_opts$baseChain","standardChainParams","_getChainParams","CustomChain","PolygonMainnet","PolygonMumbai","ArbitrumRinkebyTestnet","ArbitrumOne","xDaiChain","OptimisticKovan","Berlin","OptimisticEthereum","fromGethGenesis","genesisJson","_ref","_genesisParams$name","genesisHash","mergeForkIdPostMerge","genesisParams","parseGethGenesis","setForkHashes","initializedChains","_getInitializedChains","Boolean","required","block","existing","hfChanges","emit","getHardforkByBlockNumber","blockNumber","td","timestamp","hfs","filter","ttd","mergeIndex","findIndex","hfIndex","reverse","hfStartIndex","reduce","acc","_hf$timestamp","max","_hf$timestamp2","min","setHardforkByBlockNumber","_getHardfork","eip","EIPs","minHF","requiredEIPs","elem","topic","paramByEIP","paramByHardfork","_value","hfEIPs","valueEIP","eipParams","paramByBlock","hardforkIsActiveOnBlock","hfBlock","hardforkBlock","activeOnBlock","hardforkGteHardfork","hardfork1","hardfork2","_hardfork2","posHf1","posHf2","_hardfork3","_this$_getHardfork","hardforkTimestamp","_hardfork4","_this$_getHardfork2","eipBlock","hardforkTTD","_hardfork5","_this$_getHardfork3","isHardforkBlock","_hardfork6","nextHardforkBlockOrTimestamp","_hardfork7","_hfs$hfIndex$timestam","_nextHf$timestamp","currHfTimeOrBlock","nextHf","find","_hf$timestamp3","hfTimeOrBlock","nextHfBlock","nextHardforkBlock","_hardfork8","isNextHardforkBlock","_hardfork9","_calcForkHash","hfBuffer","alloc","prevBlockOrTime","blockOrTime","hfBlockBuffer","inputBuffer","forkhash","intToBuffer","forkHash","_hardfork10","hardforkForForkHash","resArray","_hf$timestamp4","genesis","bootstrapNodes","dnsNetworks","chainName","consensusType","_value2","consensusAlgorithm","_value3","consensusConfig","_ref2","_value4","create","getPrototypeOf","removeAllListeners","names","id","toLowerCase","chains","ConsensusType","ConsensusAlgorithm","chainstart","homestead","dao","tangerineWhistle","spuriousDragon","byzantium","constantinople","petersburg","istanbul","muirGlacier","berlin","london","shanghai","arrowGlacier","grayGlacier","mergeForkIdTransition","merge","shardingFork","parseGethParams","_config$clique$period","_config$clique$epoch","config","difficulty","mixHash","coinbase","baseFeePerGas","extraData","genesisTimestamp","isHexPrefixed","intToHex","parseInt","stripHexPrefix","formatNonce","eip155Block","eip158Block","consensus","clique","algorithm","period","blockperiodseconds","epoch","epochlength","ethash","forkMap","Homestead","Dao","TangerineWhistle","SpuriousDragon","Byzantium","Constantinople","Petersburg","Istanbul","MuirGlacier","London","MergeForkIdTransition","postMerge","Shanghai","isTimestamp","ShardingForkDev","forkMapRev","keys","configHardforkNames","nameBlock","fork","sort","a","b","_a$block","_b$block","Infinity","_a$timestamp","_b$timestamp","terminalTotalDifficulty","mergeConfig","postMergeIndex","_forkMap$hf$name","latestHardfork","unshift","Chainstart","some","field","CHAIN_NAMESPACES","getChainConfig","chainNamespace","finalChainId","getDefaultNetworkId","rpcTarget","displayName","blockExplorer","ticker","tickerName","decimals","getEvmChainConfig","getSolanaChainConfig","Web3AuthError","CustomError","code","_defineProperty","defineProperty","JSON","stringify","WalletInitializationError","fromCode","extraMessage","messages","notFound","notInstalled","notReady","windowBlocked","windowClosed","incompatibleChainNameSpace","duplicateAdapterError","invalidProviderConfigError","providerNotReadyError","rpcConnectionError","invalidParams","invalidNetwork","WalletLoginError","connectionError","disconnectionError","notConnectedError","popupClosed","mfaEnabled","MULTI_CHAIN_ADAPTERS","OPENLOGIN","WALLET_CONNECT_V1","WALLET_CONNECT_V2","SOLANA_ADAPTERS","_objectSpread$1","TORUS_SOLANA","PHANTOM","SOLFLARE","SLOPE","EVM_ADAPTERS","TORUS_EVM","METAMASK","COINBASE","ADAPTER_STATUS","NOT_READY","READY","CONNECTING","CONNECTED","DISCONNECTED","ERRORED","_objectSpread","ADAPTER_DATA_UPDATED","log","loglevel","isHexStrict","hex","test","resemblesAddress","str","createWalletMiddleware","getAccounts","getPrivateKey","processDecryptMessage","processEncryptionPublicKey","processEthSignMessage","processPersonalMessage","processTransaction","processSignTransaction","processTypedMessage","processTypedMessageV3","processTypedMessageV4","async","validateAndNormalizeKeyholder","req","normalizedAccounts","_address","normalizedAddress","ethErrors","rpc","fetchPrivateKey","res","methodNotSupported","result","createScaffoldMiddleware","eth_accounts","createAsyncMiddleware","eth_private_key","private_key","eth_coinbase","accounts","eth_sendTransaction","eth_signTransaction","eth_sign","msgParams","_objectSpread$5","eth_signTypedData","eth_signTypedData_v3","version","eth_signTypedData_v4","personal_sign","firstParam","secondParam","extraParams","warning","eth_getEncryptionPublicKey","eth_decrypt","ciphertext","createEthMiddleware","providerHandlers","mergeMiddleware","eth_syncing","createChainIdMiddleware","next","end","createProviderConfigMiddleware","providerConfig","createJsonRpcClient","fetchMiddleware","createFetchMiddleware","networkMiddleware","WalletConnectProvider","BaseProvider","state","connector","chainConfig","_objectSpread$4","skipLookupNetwork","enable","setupProvider","_providerEngineProxy","request","onConnectorStateUpdate","setupEngine","switchChain","addChain","lookup","currentChainConfig","update","sendCustomRequest","rpcUrls","blockExplorerUrls","nativeCurrency","symbol","error","configure","lookupNetwork","connected","connectedHexChainId","_","sendTransaction","signTransaction","signMessage","signPersonalMessage","signTypedData","getProviderHandlers$1","ethMiddleware","engine","JRPCEngine","providerFromEngine","updateProviderEngineProxy","on","payload","connectedChainId","rpcUrl","maybeConfig","providerFactory","BIG_NUMBER_WEI_MULTIPLIER","BigNumber","BIG_NUMBER_GWEI_MULTIPLIER","BIG_NUMBER_ETH_MULTIPLIER","toBigNumber","n","dec","toNormalizedDenomination","WEI","bigNumber","div","GWEI","ETH","toSpecifiedDenomination","times","dp","ROUND_HALF_UP","baseChange","conversionUtil","fromNumericBase","toNumericBase","fromDenomination","toDenomination","numberOfDecimals","convertedValue","ROUND_HALF_DOWN","converter","decGWEIToHexWEI","decGWEI","hexWEIToDecGWEI","normalizeGWEIDecimalNumbers","validateTypedMessageParams","parameters","activeChainId","_data$domain","assert","isValidAddress","SignTypedDataVersion","V1","parse","typedSignatureHash","V3","V4","primaryType","types","validation","jsonschema","TYPED_MESSAGE_SCHEMA","properties","domain","isNaN","invalidInput","signTx","privKey","txFormatter","finalTxParams","formatTransaction","getCommonConfiguration","getProviderHandlers","getProviderEngineProxy","privateToAddress","providerEngineProxy","signedTx","privKeyBuffer","personalSign","debug","_objectSpread$2","info","getEncryptionPublicKey","stripped","buff","decrypt","encryptedData","bnToHex","inputBn","addHexPrefix","hexToBn","inputHex","BN","TRANSACTION_ENVELOPE_TYPES","TRANSACTION_TYPES","GAS_ESTIMATE_TYPES","TransactionFormatter","providerProxy","init","isEIP1559Compatible","getEIP1559Compatibility","customChainParams","clonedTxParams","defaultGasLimit","getDefaultGasLimit","defaultGasPrice","defaultMaxFeePerGas","defaultMaxPriorityFeePerGas","getDefaultGasFees","BigNumber$1","lt","fetchEthGasPriceEstimate","latestBlock","fetchGasFeeEstimateData","isLegacyGasAPICompatible","gasData","gasFeeEstimates","url","estimates","_objectSpread$3","estimatedBaseFee","low","suggestedMaxPriorityFeePerGas","suggestedMaxFeePerGas","medium","high","fetchEip1159GasEstimates","replace","gasEstimateType","referrer","referrerPolicy","mode","SafeGasPrice","ProposeGasPrice","FastGasPrice","fetchLegacyGasPriceEstimates","estimateTxGas","txMeta","analyzeGasUsage","estimatedGasHex","targetBN","numerator","denominator","numberBN","denomBN","mul","BnMultiplyByFraction","warn","blockGasLimit","addGasBuffer","initialGasLimitHex","blockGasLimitHex","multiplier","initialGasLimitBn","upperGasLimitBn","muln","bufferedGasLimitBn","gt","determineTransactionCategory","txParameters","txCategory","transactionCategory","TWENTY_ONE_THOUSAND","EthereumPrivateKeyProvider","bind","chainSwitchMiddleware","getChainSwitchMiddleware","getAccountMiddleware","updateAccount","network","chainDisconnected","wallet_addEthereumChain","_req$params","chainParams","wallet_switchEthereumChain","_req$params2","createChainSwitchMiddleware","updatePrivatekey","wallet_updateAccount","_req$params3","accountParams","createAccountMiddleware","factory","CRC32","T0","c","table","Int32Array","signed_crc_table","TT","T","out","subarray","slice_by_16_tables","T1","T2","T3","T4","T5","T6","T7","T8","T9","Ta","Tb","Tc","Td","Te","Tf","bstr","seed","C","L","charCodeAt","B","d","DO_NOT_EXPORT_CRC","helpers","ValidatorResult","SchemaError","attribute","validators","testSchemaNoThrow","instance","options","ctx","callback","schema","throwError","throwAll","validateSchema","valid","Function","getEnumerableProperty","object","hasOwnProperty","call","propertyIsEnumerable","testAdditionalProperty","property","additionalProperties","addError","argument","preValidateProperty","makeChild","importErrors","testType","list","$id","anyOf","inner","title","nestedErrors","join","allOf","self","forEach","oneOf","count","if","isSchema","ifValid","then","else","propertyNames","subschema","prop","patternProperties","pattern","regexp","RegExp","_e","minProperties","maxProperties","items","array","every","additionalItems","contains","minimum","number","exclusiveMinimum","maximum","exclusiveMaximum","validateMultipleOfOrDivisbleBy","validationType","errorMessage","validationArgument","instanceDecimals","getDecimalPlaces","divisorDecimals","maxDecimals","pow","round","testArrays","j","len","deepCompareStrict","multipleOf","divisibleBy","string","match","format","disableFormat","isFormat","minLength","hsp","maxLength","minItems","maxItems","uniqueItems","dependencies","dep","childContext","propertyPath","String","not","disallow","notTypes","schemaId","module","uri","ValidationError","path","sum","makeSuffix","stack","prototype","throwFirst","stringizer","ValidatorResultError","captureStackTrace","detail","err","validatorType","SchemaContext","schemas","resolve","target","propertyName","FORMAT_REGEXPS","parseFloat","regex","ipv4","validator","customFormats","deepMerger","dst","deepMerge","copyist","src","copyistWithDeepMerge","pathEncoder","encodeURIComponent","aKeys","bKeys","objectGetPath","o","k","parts","split","shift","decodeURIComponent","encodePath","decimalPlaces","decimalParts","val","Validator","SchemaScanResult","scan","urilib","found","ref","scanSchema","baseuri","$ref","resolvedUri","ourBase","substring","scanArray","extends","scanObject","definitions","p","unresolvedRefs","attributes","shouldResolve","addSchema","ourUri","addSubSchemaArray","addSubSchema","addSubSchemaObject","setSchemas","getSchema","urn","sch","schemaobj","schemaTraverser","superResolve","switchSchema","resolved","subctx","skipAttributes","ignoreProperties","validatorErr","allowUnknownAttributes","rewrite","parsed","fragment","document","substr","isFinite","integer","boolean","date","Date","any"],"sourceRoot":""}