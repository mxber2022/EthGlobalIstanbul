/*! For license information please see 454.b9fe6f82.chunk.js.LICENSE.txt */
(self.webpackChunkethglobalistanbul=self.webpackChunkethglobalistanbul||[]).push([[454],{62502:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BaseTransaction=void 0;const o=r(13602),a=r(28922),i=r(60159),s=r(68828);t.BaseTransaction=class{constructor(e,t){var r,i;this.cache={hash:void 0,dataFee:void 0},this.activeCapabilities=[],this.DEFAULT_CHAIN=o.Chain.Mainnet,this.DEFAULT_HARDFORK=o.Hardfork.Merge;const{nonce:n,gasLimit:c,to:d,value:f,data:l,v:h,r:u,s:m,type:p}=e;this._type=Number((0,a.bufferToBigInt)((0,a.toBuffer)(p))),this.txOptions=t;const g=(0,a.toBuffer)(""===d?"0x":d),b=(0,a.toBuffer)(""===h?"0x":h),v=(0,a.toBuffer)(""===u?"0x":u),k=(0,a.toBuffer)(""===m?"0x":m);this.nonce=(0,a.bufferToBigInt)((0,a.toBuffer)(""===n?"0x":n)),this.gasLimit=(0,a.bufferToBigInt)((0,a.toBuffer)(""===c?"0x":c)),this.to=g.length>0?new a.Address(g):void 0,this.value=(0,a.bufferToBigInt)((0,a.toBuffer)(""===f?"0x":f)),this.data=(0,a.toBuffer)(""===l?"0x":l),this.v=b.length>0?(0,a.bufferToBigInt)(b):void 0,this.r=v.length>0?(0,a.bufferToBigInt)(v):void 0,this.s=k.length>0?(0,a.bufferToBigInt)(k):void 0,this._validateCannotExceedMaxInteger({value:this.value,r:this.r,s:this.s}),this._validateCannotExceedMaxInteger({gasLimit:this.gasLimit},64),this._validateCannotExceedMaxInteger({nonce:this.nonce},64,!0);const y=void 0===this.to||null===this.to,P=null!==(r=t.allowUnlimitedInitCodeSize)&&void 0!==r&&r,E=null!==(i=t.common)&&void 0!==i?i:this._getCommon();y&&E.isActivatedEIP(3860)&&!1===P&&(0,s.checkMaxInitCodeSize)(E,this.data.length)}get type(){return this._type}supports(e){return this.activeCapabilities.includes(e)}validate(){let e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];const t=[];return this.getBaseFee()>this.gasLimit&&t.push("gasLimit is too low. given ".concat(this.gasLimit,", need at least ").concat(this.getBaseFee())),this.isSigned()&&!this.verifySignature()&&t.push("Invalid Signature"),e?t:0===t.length}_validateYParity(){const{v:e}=this;if(void 0!==e&&e!==BigInt(0)&&e!==BigInt(1)){const e=this._errorMsg("The y-parity of the transaction should either be 0 or 1");throw new Error(e)}}_validateHighS(){const{s:e}=this;if(this.common.gteHardfork("homestead")&&void 0!==e&&e>a.SECP256K1_ORDER_DIV_2){const e=this._errorMsg("Invalid Signature: s-values greater than secp256k1n/2 are considered invalid");throw new Error(e)}}getBaseFee(){const e=this.common.param("gasPrices","tx");let t=this.getDataFee();if(e&&(t+=e),this.common.gteHardfork("homestead")&&this.toCreationAddress()){const e=this.common.param("gasPrices","txCreation");e&&(t+=e)}return t}getDataFee(){const e=this.common.param("gasPrices","txDataZero"),t=this.common.param("gasPrices","txDataNonZero");let r=BigInt(0);for(let o=0;o<this.data.length;o++)0===this.data[o]?r+=e:r+=t;if((void 0===this.to||null===this.to)&&this.common.isActivatedEIP(3860)){const e=BigInt(Math.ceil(this.data.length/32));r+=this.common.param("gasPrices","initCodeWordCost")*e}return r}toCreationAddress(){return void 0===this.to||0===this.to.buf.length}isSigned(){const{v:e,r:t,s:r}=this;return void 0!==e&&void 0!==t&&void 0!==r}verifySignature(){try{const e=this.getSenderPublicKey();return 0!==(0,a.unpadBuffer)(e).length}catch(e){return!1}}getSenderAddress(){return new a.Address((0,a.publicToAddress)(this.getSenderPublicKey()))}sign(e){if(32!==e.length){const e=this._errorMsg("Private key must be 32 bytes in length.");throw new Error(e)}let t=!1;0===this.type&&this.common.gteHardfork("spuriousDragon")&&!this.supports(i.Capability.EIP155ReplayProtection)&&(this.activeCapabilities.push(i.Capability.EIP155ReplayProtection),t=!0);const r=this.getMessageToSign(!0),{v:o,r:s,s:n}=(0,a.ecsign)(r,e),c=this._processSignature(o,s,n);if(t){const e=this.activeCapabilities.indexOf(i.Capability.EIP155ReplayProtection);e>-1&&this.activeCapabilities.splice(e,1)}return c}_getCommon(e,t){if(void 0!==t){const r=(0,a.bufferToBigInt)((0,a.toBuffer)(t));if(e){if(e.chainId()!==r){const e=this._errorMsg("The chain ID does not match the chain ID of Common");throw new Error(e)}return e.copy()}return o.Common.isSupportedChainId(r)?new o.Common({chain:r,hardfork:this.DEFAULT_HARDFORK}):o.Common.custom({name:"custom-chain",networkId:r,chainId:r},{baseChain:this.DEFAULT_CHAIN,hardfork:this.DEFAULT_HARDFORK})}var r;return null!==(r=null===e||void 0===e?void 0:e.copy())&&void 0!==r?r:new o.Common({chain:this.DEFAULT_CHAIN,hardfork:this.DEFAULT_HARDFORK})}_validateCannotExceedMaxInteger(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:256,r=arguments.length>2&&void 0!==arguments[2]&&arguments[2];for(const[o,i]of Object.entries(e))switch(t){case 64:if(r){if(void 0!==i&&i>=a.MAX_UINT64){const e=this._errorMsg("".concat(o," cannot equal or exceed MAX_UINT64 (2^64-1), given ").concat(i));throw new Error(e)}}else if(void 0!==i&&i>a.MAX_UINT64){const e=this._errorMsg("".concat(o," cannot exceed MAX_UINT64 (2^64-1), given ").concat(i));throw new Error(e)}break;case 256:if(r){if(void 0!==i&&i>=a.MAX_INTEGER){const e=this._errorMsg("".concat(o," cannot equal or exceed MAX_INTEGER (2^256-1), given ").concat(i));throw new Error(e)}}else if(void 0!==i&&i>a.MAX_INTEGER){const e=this._errorMsg("".concat(o," cannot exceed MAX_INTEGER (2^256-1), given ").concat(i));throw new Error(e)}break;default:{const e=this._errorMsg("unimplemented bits value");throw new Error(e)}}}static _validateNotArray(e){const t=["nonce","gasPrice","gasLimit","to","value","data","v","r","s","type","baseFee","maxFeePerGas","chainId"];for(const[r,o]of Object.entries(e))if(t.includes(r)&&Array.isArray(o))throw new Error("".concat(r," cannot be an array"))}_getSharedErrorPostfix(){let e="";try{e=this.isSigned()?(0,a.bufferToHex)(this.hash()):"not available (unsigned)"}catch(i){e="error"}let t="";try{t=this.isSigned().toString()}catch(i){e="error"}let r="";try{r=this.common.hardfork()}catch(i){r="error"}let o="tx type=".concat(this.type," hash=").concat(e," nonce=").concat(this.nonce," value=").concat(this.value," ");return o+="signed=".concat(t," hf=").concat(r),o}}},74011:(e,t,r)=>{"use strict";var o=r(19778).Buffer;Object.defineProperty(t,"__esModule",{value:!0}),t.FeeMarketEIP1559Transaction=void 0;const a=r(42956),i=r(28922),s=r(7285),n=r(62502),c=r(68828),d=o.from(2..toString(16).padStart(2,"0"),"hex");class f extends n.BaseTransaction{constructor(e){var t;let r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};super({...e,type:2},r),this.DEFAULT_HARDFORK="london";const{chainId:o,accessList:a,maxFeePerGas:s,maxPriorityFeePerGas:d}=e;if(this.common=this._getCommon(r.common,o),this.chainId=this.common.chainId(),!1===this.common.isActivatedEIP(1559))throw new Error("EIP-1559 not enabled on Common");this.activeCapabilities=this.activeCapabilities.concat([1559,2718,2930]);const f=c.AccessLists.getAccessListData(null!==a&&void 0!==a?a:[]);if(this.accessList=f.accessList,this.AccessListJSON=f.AccessListJSON,c.AccessLists.verifyAccessList(this.accessList),this.maxFeePerGas=(0,i.bufferToBigInt)((0,i.toBuffer)(""===s?"0x":s)),this.maxPriorityFeePerGas=(0,i.bufferToBigInt)((0,i.toBuffer)(""===d?"0x":d)),this._validateCannotExceedMaxInteger({maxFeePerGas:this.maxFeePerGas,maxPriorityFeePerGas:this.maxPriorityFeePerGas}),n.BaseTransaction._validateNotArray(e),this.gasLimit*this.maxFeePerGas>i.MAX_INTEGER){const e=this._errorMsg("gasLimit * maxFeePerGas cannot exceed MAX_INTEGER (2^256-1)");throw new Error(e)}if(this.maxFeePerGas<this.maxPriorityFeePerGas){const e=this._errorMsg("maxFeePerGas cannot be less than maxPriorityFeePerGas (The total must be the larger of the two)");throw new Error(e)}this._validateYParity(),this._validateHighS();(null===(t=null===r||void 0===r?void 0:r.freeze)||void 0===t||t)&&Object.freeze(this)}static fromTxData(e){return new f(e,arguments.length>1&&void 0!==arguments[1]?arguments[1]:{})}static fromSerializedTx(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!e.slice(0,1).equals(d))throw new Error("Invalid serialized tx input: not an EIP-1559 transaction (wrong tx type, expected: ".concat(2,", received: ").concat(e.slice(0,1).toString("hex")));const r=(0,i.arrToBufArr)(a.RLP.decode(e.slice(1)));if(!Array.isArray(r))throw new Error("Invalid serialized tx input: must be array");return f.fromValuesArray(r,t)}static fromValuesArray(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(9!==e.length&&12!==e.length)throw new Error("Invalid EIP-1559 transaction. Only expecting 9 values (for unsigned tx) or 12 values (for signed tx).");const[r,o,a,s,n,c,d,l,h,u,m,p]=e;return this._validateNotArray({chainId:r,v:u}),(0,i.validateNoLeadingZeroes)({nonce:o,maxPriorityFeePerGas:a,maxFeePerGas:s,gasLimit:n,value:d,v:u,r:m,s:p}),new f({chainId:(0,i.bufferToBigInt)(r),nonce:o,maxPriorityFeePerGas:a,maxFeePerGas:s,gasLimit:n,to:c,value:d,data:l,accessList:null!==h&&void 0!==h?h:[],v:void 0!==u?(0,i.bufferToBigInt)(u):void 0,r:m,s:p},t)}getDataFee(){if(this.cache.dataFee&&this.cache.dataFee.hardfork===this.common.hardfork())return this.cache.dataFee.value;let e=super.getDataFee();return e+=BigInt(c.AccessLists.getDataFeeEIP2930(this.accessList,this.common)),Object.isFrozen(this)&&(this.cache.dataFee={value:e,hardfork:this.common.hardfork()}),e}getUpfrontCost(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:BigInt(0);const t=this.maxPriorityFeePerGas,r=this.maxFeePerGas-e,o=(t<r?t:r)+e;return this.gasLimit*o+this.value}raw(){return[(0,i.bigIntToUnpaddedBuffer)(this.chainId),(0,i.bigIntToUnpaddedBuffer)(this.nonce),(0,i.bigIntToUnpaddedBuffer)(this.maxPriorityFeePerGas),(0,i.bigIntToUnpaddedBuffer)(this.maxFeePerGas),(0,i.bigIntToUnpaddedBuffer)(this.gasLimit),void 0!==this.to?this.to.buf:o.from([]),(0,i.bigIntToUnpaddedBuffer)(this.value),this.data,this.accessList,void 0!==this.v?(0,i.bigIntToUnpaddedBuffer)(this.v):o.from([]),void 0!==this.r?(0,i.bigIntToUnpaddedBuffer)(this.r):o.from([]),void 0!==this.s?(0,i.bigIntToUnpaddedBuffer)(this.s):o.from([])]}serialize(){const e=this.raw();return o.concat([d,o.from(a.RLP.encode((0,i.bufArrToArr)(e)))])}getMessageToSign(){let e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];const t=this.raw().slice(0,9),r=o.concat([d,o.from(a.RLP.encode((0,i.bufArrToArr)(t)))]);return e?o.from((0,s.keccak256)(r)):r}hash(){if(!this.isSigned()){const e=this._errorMsg("Cannot call hash method if transaction is not signed");throw new Error(e)}return Object.isFrozen(this)?(this.cache.hash||(this.cache.hash=o.from((0,s.keccak256)(this.serialize()))),this.cache.hash):o.from((0,s.keccak256)(this.serialize()))}getMessageToVerifySignature(){return this.getMessageToSign()}getSenderPublicKey(){if(!this.isSigned()){const e=this._errorMsg("Cannot call this method if transaction is not signed");throw new Error(e)}const e=this.getMessageToVerifySignature(),{v:t,r:r,s:o}=this;this._validateHighS();try{return(0,i.ecrecover)(e,t+BigInt(27),(0,i.bigIntToUnpaddedBuffer)(r),(0,i.bigIntToUnpaddedBuffer)(o))}catch(a){const e=this._errorMsg("Invalid Signature");throw new Error(e)}}_processSignature(e,t,r){const o={...this.txOptions,common:this.common};return f.fromTxData({chainId:this.chainId,nonce:this.nonce,maxPriorityFeePerGas:this.maxPriorityFeePerGas,maxFeePerGas:this.maxFeePerGas,gasLimit:this.gasLimit,to:this.to,value:this.value,data:this.data,accessList:this.accessList,v:e-BigInt(27),r:(0,i.bufferToBigInt)(t),s:(0,i.bufferToBigInt)(r)},o)}toJSON(){const e=c.AccessLists.getAccessListJSON(this.accessList);return{chainId:(0,i.bigIntToHex)(this.chainId),nonce:(0,i.bigIntToHex)(this.nonce),maxPriorityFeePerGas:(0,i.bigIntToHex)(this.maxPriorityFeePerGas),maxFeePerGas:(0,i.bigIntToHex)(this.maxFeePerGas),gasLimit:(0,i.bigIntToHex)(this.gasLimit),to:void 0!==this.to?this.to.toString():void 0,value:(0,i.bigIntToHex)(this.value),data:"0x"+this.data.toString("hex"),accessList:e,v:void 0!==this.v?(0,i.bigIntToHex)(this.v):void 0,r:void 0!==this.r?(0,i.bigIntToHex)(this.r):void 0,s:void 0!==this.s?(0,i.bigIntToHex)(this.s):void 0}}errorStr(){let e=this._getSharedErrorPostfix();return e+=" maxFeePerGas=".concat(this.maxFeePerGas," maxPriorityFeePerGas=").concat(this.maxPriorityFeePerGas),e}_errorMsg(e){return"".concat(e," (").concat(this.errorStr(),")")}}t.FeeMarketEIP1559Transaction=f},43475:(e,t,r)=>{"use strict";var o=r(19778).Buffer;Object.defineProperty(t,"__esModule",{value:!0}),t.AccessListEIP2930Transaction=void 0;const a=r(42956),i=r(28922),s=r(7285),n=r(62502),c=r(68828),d=o.from(1..toString(16).padStart(2,"0"),"hex");class f extends n.BaseTransaction{constructor(e){var t;let r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};super({...e,type:1},r),this.DEFAULT_HARDFORK="berlin";const{chainId:o,accessList:a,gasPrice:s}=e;if(this.common=this._getCommon(r.common,o),this.chainId=this.common.chainId(),!this.common.isActivatedEIP(2930))throw new Error("EIP-2930 not enabled on Common");this.activeCapabilities=this.activeCapabilities.concat([2718,2930]);const d=c.AccessLists.getAccessListData(null!==a&&void 0!==a?a:[]);if(this.accessList=d.accessList,this.AccessListJSON=d.AccessListJSON,c.AccessLists.verifyAccessList(this.accessList),this.gasPrice=(0,i.bufferToBigInt)((0,i.toBuffer)(""===s?"0x":s)),this._validateCannotExceedMaxInteger({gasPrice:this.gasPrice}),n.BaseTransaction._validateNotArray(e),this.gasPrice*this.gasLimit>i.MAX_INTEGER){const e=this._errorMsg("gasLimit * gasPrice cannot exceed MAX_INTEGER");throw new Error(e)}this._validateYParity(),this._validateHighS();(null===(t=null===r||void 0===r?void 0:r.freeze)||void 0===t||t)&&Object.freeze(this)}static fromTxData(e){return new f(e,arguments.length>1&&void 0!==arguments[1]?arguments[1]:{})}static fromSerializedTx(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!e.slice(0,1).equals(d))throw new Error("Invalid serialized tx input: not an EIP-2930 transaction (wrong tx type, expected: ".concat(1,", received: ").concat(e.slice(0,1).toString("hex")));const r=(0,i.arrToBufArr)(a.RLP.decode(Uint8Array.from(e.slice(1))));if(!Array.isArray(r))throw new Error("Invalid serialized tx input: must be array");return f.fromValuesArray(r,t)}static fromValuesArray(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(8!==e.length&&11!==e.length)throw new Error("Invalid EIP-2930 transaction. Only expecting 8 values (for unsigned tx) or 11 values (for signed tx).");const[r,o,a,s,n,c,d,l,h,u,m]=e;this._validateNotArray({chainId:r,v:h}),(0,i.validateNoLeadingZeroes)({nonce:o,gasPrice:a,gasLimit:s,value:c,v:h,r:u,s:m});return new f({chainId:(0,i.bufferToBigInt)(r),nonce:o,gasPrice:a,gasLimit:s,to:n,value:c,data:d,accessList:null!==l&&void 0!==l?l:[],v:void 0!==h?(0,i.bufferToBigInt)(h):void 0,r:u,s:m},t)}getDataFee(){if(this.cache.dataFee&&this.cache.dataFee.hardfork===this.common.hardfork())return this.cache.dataFee.value;let e=super.getDataFee();return e+=BigInt(c.AccessLists.getDataFeeEIP2930(this.accessList,this.common)),Object.isFrozen(this)&&(this.cache.dataFee={value:e,hardfork:this.common.hardfork()}),e}getUpfrontCost(){return this.gasLimit*this.gasPrice+this.value}raw(){return[(0,i.bigIntToUnpaddedBuffer)(this.chainId),(0,i.bigIntToUnpaddedBuffer)(this.nonce),(0,i.bigIntToUnpaddedBuffer)(this.gasPrice),(0,i.bigIntToUnpaddedBuffer)(this.gasLimit),void 0!==this.to?this.to.buf:o.from([]),(0,i.bigIntToUnpaddedBuffer)(this.value),this.data,this.accessList,void 0!==this.v?(0,i.bigIntToUnpaddedBuffer)(this.v):o.from([]),void 0!==this.r?(0,i.bigIntToUnpaddedBuffer)(this.r):o.from([]),void 0!==this.s?(0,i.bigIntToUnpaddedBuffer)(this.s):o.from([])]}serialize(){const e=this.raw();return o.concat([d,o.from(a.RLP.encode((0,i.bufArrToArr)(e)))])}getMessageToSign(){let e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];const t=this.raw().slice(0,8),r=o.concat([d,o.from(a.RLP.encode((0,i.bufArrToArr)(t)))]);return e?o.from((0,s.keccak256)(r)):r}hash(){if(!this.isSigned()){const e=this._errorMsg("Cannot call hash method if transaction is not signed");throw new Error(e)}return Object.isFrozen(this)?(this.cache.hash||(this.cache.hash=o.from((0,s.keccak256)(this.serialize()))),this.cache.hash):o.from((0,s.keccak256)(this.serialize()))}getMessageToVerifySignature(){return this.getMessageToSign()}getSenderPublicKey(){if(!this.isSigned()){const e=this._errorMsg("Cannot call this method if transaction is not signed");throw new Error(e)}const e=this.getMessageToVerifySignature(),{v:t,r:r,s:o}=this;this._validateHighS();try{return(0,i.ecrecover)(e,t+BigInt(27),(0,i.bigIntToUnpaddedBuffer)(r),(0,i.bigIntToUnpaddedBuffer)(o))}catch(a){const e=this._errorMsg("Invalid Signature");throw new Error(e)}}_processSignature(e,t,r){const o={...this.txOptions,common:this.common};return f.fromTxData({chainId:this.chainId,nonce:this.nonce,gasPrice:this.gasPrice,gasLimit:this.gasLimit,to:this.to,value:this.value,data:this.data,accessList:this.accessList,v:e-BigInt(27),r:(0,i.bufferToBigInt)(t),s:(0,i.bufferToBigInt)(r)},o)}toJSON(){const e=c.AccessLists.getAccessListJSON(this.accessList);return{chainId:(0,i.bigIntToHex)(this.chainId),nonce:(0,i.bigIntToHex)(this.nonce),gasPrice:(0,i.bigIntToHex)(this.gasPrice),gasLimit:(0,i.bigIntToHex)(this.gasLimit),to:void 0!==this.to?this.to.toString():void 0,value:(0,i.bigIntToHex)(this.value),data:"0x"+this.data.toString("hex"),accessList:e,v:void 0!==this.v?(0,i.bigIntToHex)(this.v):void 0,r:void 0!==this.r?(0,i.bigIntToHex)(this.r):void 0,s:void 0!==this.s?(0,i.bigIntToHex)(this.s):void 0}}errorStr(){var e,t;let r=this._getSharedErrorPostfix();return r+=" gasPrice=".concat(this.gasPrice," accessListCount=").concat(null!==(e=null===(t=this.accessList)||void 0===t?void 0:t.length)&&void 0!==e?e:0),r}_errorMsg(e){return"".concat(e," (").concat(this.errorStr(),")")}}t.AccessListEIP2930Transaction=f},99019:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.normalizeTxParams=void 0;const o=r(28922);t.normalizeTxParams=e=>{var t;const r=Object.assign({},e);return r.gasLimit=(0,o.toType)(null!==(t=r.gasLimit)&&void 0!==t?t:r.gas,o.TypeOutput.BigInt),r.data=void 0===r.data?r.input:r.data,r.gasPrice=void 0!==r.gasPrice?BigInt(r.gasPrice):void 0,r.value=void 0!==r.value?BigInt(r.value):void 0,r.to=null!==r.to&&void 0!==r.to?(0,o.setLengthLeft)((0,o.toBuffer)(r.to),20):null,r.v="0x0"===r.v?"0x":r.v,r.r="0x0"===r.r?"0x":r.r,r.s="0x0"===r.s?"0x":r.s,"0x"!==r.v&&(r.v=(0,o.toType)(r.v,o.TypeOutput.BigInt)),r}},38791:function(e,t,r){"use strict";var o=this&&this.__createBinding||(Object.create?function(e,t,r,o){void 0===o&&(o=r);var a=Object.getOwnPropertyDescriptor(t,r);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,o,a)}:function(e,t,r,o){void 0===o&&(o=r),e[o]=t[r]}),a=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||o(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),t.TransactionFactory=t.Transaction=t.AccessListEIP2930Transaction=t.FeeMarketEIP1559Transaction=void 0;var i=r(74011);Object.defineProperty(t,"FeeMarketEIP1559Transaction",{enumerable:!0,get:function(){return i.FeeMarketEIP1559Transaction}});var s=r(43475);Object.defineProperty(t,"AccessListEIP2930Transaction",{enumerable:!0,get:function(){return s.AccessListEIP2930Transaction}});var n=r(34861);Object.defineProperty(t,"Transaction",{enumerable:!0,get:function(){return n.Transaction}});var c=r(90219);Object.defineProperty(t,"TransactionFactory",{enumerable:!0,get:function(){return c.TransactionFactory}}),a(r(60159),t)},34861:(e,t,r)=>{"use strict";var o=r(19778).Buffer;Object.defineProperty(t,"__esModule",{value:!0}),t.Transaction=void 0;const a=r(42956),i=r(28922),s=r(7285),n=r(62502),c=r(60159);function d(e,t){const r=Number(e),o=2*Number(t);return r===o+35||r===o+36}class f extends n.BaseTransaction{constructor(e){var t;let r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(super({...e,type:0},r),this.common=this._validateTxV(this.v,r.common),this.gasPrice=(0,i.bufferToBigInt)((0,i.toBuffer)(""===e.gasPrice?"0x":e.gasPrice)),this.gasPrice*this.gasLimit>i.MAX_INTEGER){const e=this._errorMsg("gas limit * gasPrice cannot exceed MAX_INTEGER (2^256-1)");throw new Error(e)}this._validateCannotExceedMaxInteger({gasPrice:this.gasPrice}),n.BaseTransaction._validateNotArray(e),this.common.gteHardfork("spuriousDragon")&&(this.isSigned()?d(this.v,this.common.chainId())&&this.activeCapabilities.push(c.Capability.EIP155ReplayProtection):this.activeCapabilities.push(c.Capability.EIP155ReplayProtection));(null===(t=null===r||void 0===r?void 0:r.freeze)||void 0===t||t)&&Object.freeze(this)}static fromTxData(e){return new f(e,arguments.length>1&&void 0!==arguments[1]?arguments[1]:{})}static fromSerializedTx(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};const r=(0,i.arrToBufArr)(a.RLP.decode(Uint8Array.from(e)));if(!Array.isArray(r))throw new Error("Invalid serialized tx input. Must be array");return this.fromValuesArray(r,t)}static fromValuesArray(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(6!==e.length&&9!==e.length)throw new Error("Invalid transaction. Only expecting 6 values (for unsigned tx) or 9 values (for signed tx).");const[r,o,a,s,n,c,d,l,h]=e;return(0,i.validateNoLeadingZeroes)({nonce:r,gasPrice:o,gasLimit:a,value:n,v:d,r:l,s:h}),new f({nonce:r,gasPrice:o,gasLimit:a,to:s,value:n,data:c,v:d,r:l,s:h},t)}raw(){return[(0,i.bigIntToUnpaddedBuffer)(this.nonce),(0,i.bigIntToUnpaddedBuffer)(this.gasPrice),(0,i.bigIntToUnpaddedBuffer)(this.gasLimit),void 0!==this.to?this.to.buf:o.from([]),(0,i.bigIntToUnpaddedBuffer)(this.value),this.data,void 0!==this.v?(0,i.bigIntToUnpaddedBuffer)(this.v):o.from([]),void 0!==this.r?(0,i.bigIntToUnpaddedBuffer)(this.r):o.from([]),void 0!==this.s?(0,i.bigIntToUnpaddedBuffer)(this.s):o.from([])]}serialize(){return o.from(a.RLP.encode((0,i.bufArrToArr)(this.raw())))}_getMessageToSign(){const e=[(0,i.bigIntToUnpaddedBuffer)(this.nonce),(0,i.bigIntToUnpaddedBuffer)(this.gasPrice),(0,i.bigIntToUnpaddedBuffer)(this.gasLimit),void 0!==this.to?this.to.buf:o.from([]),(0,i.bigIntToUnpaddedBuffer)(this.value),this.data];return this.supports(c.Capability.EIP155ReplayProtection)&&(e.push((0,i.bigIntToUnpaddedBuffer)(this.common.chainId())),e.push((0,i.unpadBuffer)((0,i.toBuffer)(0))),e.push((0,i.unpadBuffer)((0,i.toBuffer)(0)))),e}getMessageToSign(){let e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];const t=this._getMessageToSign();return e?o.from((0,s.keccak256)(a.RLP.encode((0,i.bufArrToArr)(t)))):t}getDataFee(){return this.cache.dataFee&&this.cache.dataFee.hardfork===this.common.hardfork()?this.cache.dataFee.value:(Object.isFrozen(this)&&(this.cache.dataFee={value:super.getDataFee(),hardfork:this.common.hardfork()}),super.getDataFee())}getUpfrontCost(){return this.gasLimit*this.gasPrice+this.value}hash(){if(!this.isSigned()){const e=this._errorMsg("Cannot call hash method if transaction is not signed");throw new Error(e)}return Object.isFrozen(this)?(this.cache.hash||(this.cache.hash=o.from((0,s.keccak256)(a.RLP.encode((0,i.bufArrToArr)(this.raw()))))),this.cache.hash):o.from((0,s.keccak256)(a.RLP.encode((0,i.bufArrToArr)(this.raw()))))}getMessageToVerifySignature(){if(!this.isSigned()){const e=this._errorMsg("This transaction is not signed");throw new Error(e)}const e=this._getMessageToSign();return o.from((0,s.keccak256)(a.RLP.encode((0,i.bufArrToArr)(e))))}getSenderPublicKey(){const e=this.getMessageToVerifySignature(),{v:t,r:r,s:o}=this;this._validateHighS();try{return(0,i.ecrecover)(e,t,(0,i.bigIntToUnpaddedBuffer)(r),(0,i.bigIntToUnpaddedBuffer)(o),this.supports(c.Capability.EIP155ReplayProtection)?this.common.chainId():void 0)}catch(a){const e=this._errorMsg("Invalid Signature");throw new Error(e)}}_processSignature(e,t,r){this.supports(c.Capability.EIP155ReplayProtection)&&(e+=this.common.chainId()*BigInt(2)+BigInt(8));const o={...this.txOptions,common:this.common};return f.fromTxData({nonce:this.nonce,gasPrice:this.gasPrice,gasLimit:this.gasLimit,to:this.to,value:this.value,data:this.data,v:e,r:(0,i.bufferToBigInt)(t),s:(0,i.bufferToBigInt)(r)},o)}toJSON(){return{nonce:(0,i.bigIntToHex)(this.nonce),gasPrice:(0,i.bigIntToHex)(this.gasPrice),gasLimit:(0,i.bigIntToHex)(this.gasLimit),to:void 0!==this.to?this.to.toString():void 0,value:(0,i.bigIntToHex)(this.value),data:"0x"+this.data.toString("hex"),v:void 0!==this.v?(0,i.bigIntToHex)(this.v):void 0,r:void 0!==this.r?(0,i.bigIntToHex)(this.r):void 0,s:void 0!==this.s?(0,i.bigIntToHex)(this.s):void 0}}_validateTxV(e,t){let r;const o=void 0!==e?Number(e):void 0;if(void 0!==o&&o<37&&27!==o&&28!==o)throw new Error("Legacy txs need either v = 27/28 or v >= 37 (EIP-155 replay protection), got v = ".concat(o));if(void 0!==o&&0!==o&&(!t||t.gteHardfork("spuriousDragon"))&&27!==o&&28!==o)if(t){if(!d(BigInt(o),t.chainId()))throw new Error("Incompatible EIP155-based V ".concat(o," and chain id ").concat(t.chainId(),". See the Common parameter of the Transaction constructor to set the chain id."))}else{let e;e=(o-35)%2===0?35:36,r=BigInt(o-e)/BigInt(2)}return this._getCommon(t,r)}errorStr(){let e=this._getSharedErrorPostfix();return e+=" gasPrice=".concat(this.gasPrice),e}_errorMsg(e){return"".concat(e," (").concat(this.errorStr(),")")}}t.Transaction=f},90219:(e,t,r)=>{"use strict";var o=r(19778).Buffer;Object.defineProperty(t,"__esModule",{value:!0}),t.TransactionFactory=void 0;const a=r(28922),i=r(74011),s=r(43475),n=r(99019),c=r(34861);class d{constructor(){}static fromTxData(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if("type"in e&&void 0!==e.type){const r=Number((0,a.bufferToBigInt)((0,a.toBuffer)(e.type)));if(0===r)return c.Transaction.fromTxData(e,t);if(1===r)return s.AccessListEIP2930Transaction.fromTxData(e,t);if(2===r)return i.FeeMarketEIP1559Transaction.fromTxData(e,t);throw new Error("Tx instantiation with type ".concat(r," not supported"))}return c.Transaction.fromTxData(e,t)}static fromSerializedData(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!(e[0]<=127))return c.Transaction.fromSerializedTx(e,t);switch(e[0]){case 1:return s.AccessListEIP2930Transaction.fromSerializedTx(e,t);case 2:return i.FeeMarketEIP1559Transaction.fromSerializedTx(e,t);default:throw new Error("TypedTransaction with ID ".concat(e[0]," unknown"))}}static fromBlockBodyData(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(o.isBuffer(e))return this.fromSerializedData(e,t);if(Array.isArray(e))return c.Transaction.fromValuesArray(e,t);throw new Error("Cannot decode transaction: unknown type input")}static async fromEthersProvider(e,t,r){const o=(0,a.getProvider)(e),i=await(0,a.fetchFromProvider)(o,{method:"eth_getTransactionByHash",params:[t]});if(null===i)throw new Error("No data returned from provider");return d.fromRPCTx(i,r)}static async fromRPCTx(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return d.fromTxData((0,n.normalizeTxParams)(e),t)}}t.TransactionFactory=d},60159:(e,t)=>{"use strict";function r(e){if(0===e.length)return!0;const t=e[0];return!!Array.isArray(t)}Object.defineProperty(t,"__esModule",{value:!0}),t.isAccessList=t.isAccessListBuffer=t.Capability=void 0,function(e){e[e.EIP155ReplayProtection=155]="EIP155ReplayProtection",e[e.EIP1559FeeMarket=1559]="EIP1559FeeMarket",e[e.EIP2718TypedTransaction=2718]="EIP2718TypedTransaction",e[e.EIP2930AccessLists=2930]="EIP2930AccessLists"}(t.Capability||(t.Capability={})),t.isAccessListBuffer=r,t.isAccessList=function(e){return!r(e)}},68828:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.AccessLists=t.checkMaxInitCodeSize=void 0;const o=r(28922),a=r(60159);t.checkMaxInitCodeSize=function(e,t){const r=e.param("vm","maxInitCodeSize");if(r&&BigInt(t)>r)throw new Error("the initcode size of this transaction is too large: it is ".concat(t," while the max is ").concat(e.param("vm","maxInitCodeSize")))};t.AccessLists=class{static getAccessListData(e){let t,r;if((0,a.isAccessList)(e)){t=e;const a=[];for(let t=0;t<e.length;t++){const r=e[t],i=(0,o.toBuffer)(r.address),s=[];for(let e=0;e<r.storageKeys.length;e++)s.push((0,o.toBuffer)(r.storageKeys[e]));a.push([i,s])}r=a}else{r=null!==e&&void 0!==e?e:[];const a=[];for(let e=0;e<r.length;e++){const t=r[e],i=(0,o.bufferToHex)(t[0]),s=[];for(let e=0;e<t[1].length;e++)s.push((0,o.bufferToHex)(t[1][e]));const n={address:i,storageKeys:s};a.push(n)}t=a}return{AccessListJSON:t,accessList:r}}static verifyAccessList(e){for(let t=0;t<e.length;t++){const r=e[t],o=r[0],a=r[1];if(void 0!==r[2])throw new Error("Access list item cannot have 3 elements. It can only have an address, and an array of storage slots.");if(20!==o.length)throw new Error("Invalid EIP-2930 transaction: address length should be 20 bytes");for(let e=0;e<a.length;e++)if(32!==a[e].length)throw new Error("Invalid EIP-2930 transaction: storage slot length should be 32 bytes")}}static getAccessListJSON(e){const t=[];for(let r=0;r<e.length;r++){const a=e[r],i={address:"0x"+(0,o.setLengthLeft)(a[0],20).toString("hex"),storageKeys:[]},s=a[1];for(let e=0;e<s.length;e++){const t=s[e];i.storageKeys.push("0x"+(0,o.setLengthLeft)(t,32).toString("hex"))}t.push(i)}return t}static getDataFeeEIP2930(e,t){const r=t.param("gasPrices","accessListStorageKeyCost"),o=t.param("gasPrices","accessListAddressCost");let a=0;for(let i=0;i<e.length;i++){a+=e[i][1].length}return e.length*Number(o)+a*Number(r)}}},34083:(e,t,r)=>{"use strict";var o=r(19778).Buffer;Object.defineProperty(t,"__esModule",{value:!0}),t.Common=void 0;const a=r(28922),i=r(33685),s=r(47465),n=r(35228),c=r(95941),d=r(70785),f=r(65100),l=r(59848),h=r(3614),u=r(35490),m=r(72761),p=r(94205);class g extends s.EventEmitter{constructor(e){var t,r;super(),this._eips=[],this._customChains=null!==(t=e.customChains)&&void 0!==t?t:[],this._chainParams=this.setChain(e.chain),this.DEFAULT_HARDFORK=null!==(r=this._chainParams.defaultHardfork)&&void 0!==r?r:u.Hardfork.Merge,this.HARDFORK_CHANGES=this.hardforks().map((e=>[e.name,m.hardforks[e.name]])),this._hardfork=this.DEFAULT_HARDFORK,void 0!==e.hardfork&&this.setHardfork(e.hardfork),e.eips&&this.setEIPs(e.eips)}static custom(e){var t;let r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};const o=null!==(t=r.baseChain)&&void 0!==t?t:"mainnet",a={...g._getChainParams(o)};if(a.name="custom-chain","string"!==typeof e)return new g({chain:{...a,...e},...r});if(e===u.CustomChain.PolygonMainnet)return g.custom({name:u.CustomChain.PolygonMainnet,chainId:137,networkId:137},r);if(e===u.CustomChain.PolygonMumbai)return g.custom({name:u.CustomChain.PolygonMumbai,chainId:80001,networkId:80001},r);if(e===u.CustomChain.ArbitrumRinkebyTestnet)return g.custom({name:u.CustomChain.ArbitrumRinkebyTestnet,chainId:421611,networkId:421611},r);if(e===u.CustomChain.ArbitrumOne)return g.custom({name:u.CustomChain.ArbitrumOne,chainId:42161,networkId:42161},r);if(e===u.CustomChain.xDaiChain)return g.custom({name:u.CustomChain.xDaiChain,chainId:100,networkId:100},r);if(e===u.CustomChain.OptimisticKovan)return g.custom({name:u.CustomChain.OptimisticKovan,chainId:69,networkId:69},{hardfork:u.Hardfork.Berlin,...r});if(e===u.CustomChain.OptimisticEthereum)return g.custom({name:u.CustomChain.OptimisticEthereum,chainId:10,networkId:10},{hardfork:u.Hardfork.Berlin,...r});throw new Error("Custom chain ".concat(e," not supported"))}static fromGethGenesis(e,t){var r;let{chain:o,eips:a,genesisHash:i,hardfork:s,mergeForkIdPostMerge:n}=t;const c=(0,p.parseGethGenesis)(e,o,n),d=new g({chain:null!==(r=c.name)&&void 0!==r?r:"custom",customChains:[c],eips:a,hardfork:null!==s&&void 0!==s?s:c.hardfork});return void 0!==i&&d.setForkHashes(i),d}static isSupportedChainId(e){const t=this._getInitializedChains();return Boolean(t.names[e.toString()])}static _getChainParams(e,t){const r=this._getInitializedChains(t);if("number"===typeof e||"bigint"===typeof e){if(e=e.toString(),r.names[e]){return r[r.names[e]]}throw new Error("Chain with ID ".concat(e," not supported"))}if(void 0!==r[e])return r[e];throw new Error("Chain with name ".concat(e," not supported"))}setChain(e){if("number"===typeof e||"bigint"===typeof e||"string"===typeof e)this._chainParams=g._getChainParams(e,this._customChains);else{if("object"!==typeof e)throw new Error("Wrong input format");{if(this._customChains.length>0)throw new Error("Chain must be a string, number, or bigint when initialized with customChains passed in");const t=["networkId","genesis","hardforks","bootstrapNodes"];for(const r of t)if(!(r in e))throw new Error("Missing required chain parameter: ".concat(r));this._chainParams=e}}for(const t of this.hardforks())if(void 0===t.block)throw new Error("Hardfork cannot have undefined block number");return this._chainParams}setHardfork(e){let t=!1;for(const r of this.HARDFORK_CHANGES)r[0]===e&&(this._hardfork!==e&&(this._hardfork=e,this.emit("hardforkChanged",e)),t=!0);if(!t)throw new Error("Hardfork with name ".concat(e," not supported"))}getHardforkByBlockNumber(e,t,r){e=(0,a.toType)(e,a.TypeOutput.BigInt),t=(0,a.toType)(t,a.TypeOutput.BigInt),r=(0,a.toType)(r,a.TypeOutput.Number);const o=this.hardforks().filter((e=>null!==e.block||null!==e.ttd&&void 0!==e.ttd||void 0!==e.timestamp)),i=o.findIndex((e=>null!==e.ttd&&void 0!==e.ttd));if(o.slice(i+1).findIndex((e=>null!==e.ttd&&void 0!==e.ttd))>=0)throw Error("More than one merge hardforks found with ttd specified");let s=o.findIndex((t=>null!==t.block&&t.block>e||void 0!==r&&Number(t.timestamp)>r));if(-1===s)s=o.length;else if(0===s)throw Error("Must have at least one hardfork at block 0");if(void 0===r){s-=o.slice(0,s).reverse().findIndex((e=>null!==e.block||void 0!==e.ttd))}if(s-=1,null===o[s].block&&void 0===o[s].timestamp)(void 0===t||null===t||BigInt(o[s].ttd)>t)&&(s-=1);else if(i>=0&&void 0!==t&&null!==t){if(s>=i&&BigInt(o[i].ttd)>t)throw Error("Maximum HF determined by total difficulty is lower than the block number HF");if(s<i&&BigInt(o[i].ttd)<=t)throw Error("HF determined by block number is lower than the minimum total difficulty HF")}const n=s;for(;s<o.length-1&&(o[s].block===o[s+1].block&&o[s].timestamp===o[s+1].timestamp);s++);if(r){if(o.slice(0,n).reduce(((e,t)=>{var r;return Math.max(Number(null!==(r=t.timestamp)&&void 0!==r?r:"0"),e)}),0)>r)throw Error("Maximum HF determined by timestamp is lower than the block number/ttd HF");if(o.slice(s+1).reduce(((e,t)=>{var o;return Math.min(Number(null!==(o=t.timestamp)&&void 0!==o?o:r),e)}),r)<r)throw Error("Maximum HF determined by block number/ttd is lower than timestamp HF")}return o[s].name}setHardforkByBlockNumber(e,t,r){const o=this.getHardforkByBlockNumber(e,t,r);return this.setHardfork(o),o}_getHardfork(e){const t=this.hardforks();for(const r of t)if(r.name===e)return r;return null}setEIPs(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];for(const t of e){if(!(t in h.EIPs))throw new Error("".concat(t," not supported"));const r=this.gteHardfork(h.EIPs[t].minimumHardfork);if(!r)throw new Error("".concat(t," cannot be activated on hardfork ").concat(this.hardfork(),", minimumHardfork: ").concat(r));if(void 0!==h.EIPs[t].requiredEIPs)for(const o of h.EIPs[t].requiredEIPs)if(!e.includes(o)&&!this.isActivatedEIP(o))throw new Error("".concat(t," requires EIP ").concat(o,", but is not included in the EIP list"))}this._eips=e}param(e,t){let r;for(const o of this._eips)if(r=this.paramByEIP(e,t,o),void 0!==r)return r;return this.paramByHardfork(e,t,this._hardfork)}paramByHardfork(e,t,r){var o;let a=null;for(const i of this.HARDFORK_CHANGES){if("eips"in i[1]){const r=i[1].eips;for(const o of r){const r=this.paramByEIP(e,t,o);a="bigint"===typeof r?r:a}}else{if(void 0===i[1][e])throw new Error("Topic ".concat(e," not defined"));void 0!==i[1][e][t]&&(a=i[1][e][t].v)}if(i[0]===r)break}return BigInt(null!==(o=a)&&void 0!==o?o:0)}paramByEIP(e,t,r){if(!(r in h.EIPs))throw new Error("".concat(r," not supported"));const o=h.EIPs[r];if(!(e in o))throw new Error("Topic ".concat(e," not defined"));if(void 0===o[e][t])return;const a=o[e][t].v;return BigInt(a)}paramByBlock(e,t,r,o,a){const i=this.getHardforkByBlockNumber(r,o,a);return this.paramByHardfork(e,t,i)}isActivatedEIP(e){if(this.eips().includes(e))return!0;for(const t of this.HARDFORK_CHANGES){const r=t[1];if(this.gteHardfork(r.name)&&"eips"in r&&r.eips.includes(e))return!0}return!1}hardforkIsActiveOnBlock(e,t){var r;t=(0,a.toType)(t,a.TypeOutput.BigInt),e=null!==(r=e)&&void 0!==r?r:this._hardfork;const o=this.hardforkBlock(e);return"bigint"===typeof o&&o!==BigInt(0)&&t>=o}activeOnBlock(e){return this.hardforkIsActiveOnBlock(null,e)}hardforkGteHardfork(e,t){var r;e=null!==(r=e)&&void 0!==r?r:this._hardfork;const o=this.hardforks();let a=-1,i=-1,s=0;for(const n of o)n.name===e&&(a=s),n.name===t&&(i=s),s+=1;return a>=i&&-1!==i}gteHardfork(e){return this.hardforkGteHardfork(null,e)}hardforkBlock(e){var t,r;e=null!==(t=e)&&void 0!==t?t:this._hardfork;const o=null===(r=this._getHardfork(e))||void 0===r?void 0:r.block;return void 0===o||null===o?null:BigInt(o)}hardforkTimestamp(e){var t,r;e=null!==(t=e)&&void 0!==t?t:this._hardfork;const o=null===(r=this._getHardfork(e))||void 0===r?void 0:r.timestamp;return void 0===o||null===o?null:BigInt(o)}eipBlock(e){for(const t of this.HARDFORK_CHANGES){const r=t[1];if("eips"in r&&r.eips.includes(e))return this.hardforkBlock(t[0])}return null}hardforkTTD(e){var t,r;e=null!==(t=e)&&void 0!==t?t:this._hardfork;const o=null===(r=this._getHardfork(e))||void 0===r?void 0:r.ttd;return void 0===o||null===o?null:BigInt(o)}isHardforkBlock(e,t){var r;e=(0,a.toType)(e,a.TypeOutput.BigInt),t=null!==(r=t)&&void 0!==r?r:this._hardfork;const o=this.hardforkBlock(t);return"bigint"===typeof o&&o!==BigInt(0)&&o===e}nextHardforkBlockOrTimestamp(e){var t,r,o;e=null!==(t=e)&&void 0!==t?t:this._hardfork;const a=this.hardforks();let i=a.findIndex((t=>t.name===e));if(e===u.Hardfork.Merge&&(i-=1),i<0)return null;let s=null!==(r=a[i].timestamp)&&void 0!==r?r:a[i].block;s=null!==s&&void 0!==s?Number(s):null;const n=a.slice(i+1).find((e=>{var t;let r=null!==(t=e.timestamp)&&void 0!==t?t:e.block;return r=null!==r&&void 0!==r?Number(r):null,e.name!==u.Hardfork.Merge&&null!==r&&void 0!==r&&r!==s}));if(void 0===n)return null;const c=null!==(o=n.timestamp)&&void 0!==o?o:n.block;return null===c||void 0===c?null:BigInt(c)}nextHardforkBlock(e){var t;e=null!==(t=e)&&void 0!==t?t:this._hardfork;let r=this.hardforkBlock(e);if(null===r&&e===u.Hardfork.Merge){const e=this.hardforks(),t=e.findIndex((e=>null!==e.ttd&&void 0!==e.ttd));if(t<0)throw Error("Merge hardfork should have been found");r=this.hardforkBlock(e[t-1].name)}if(null===r)return null;return this.hardforks().reduce(((e,t)=>{const o=BigInt(null===t.block||void 0!==t.ttd&&null!==t.ttd?0:t.block);return o>r&&null===e?o:e}),null)}isNextHardforkBlock(e,t){var r;e=(0,a.toType)(e,a.TypeOutput.BigInt),t=null!==(r=t)&&void 0!==r?r:this._hardfork;const o=this.nextHardforkBlock(t);return null!==o&&o===e}_calcForkHash(e,t){let r=o.alloc(0),s=0;for(const a of this.hardforks()){const{block:t,timestamp:i,name:n}=a;let c=null!==i&&void 0!==i?i:t;if(c=null!==c?Number(c):null,"number"===typeof c&&0!==c&&c!==s&&n!==u.Hardfork.Merge){const e=o.from(c.toString(16).padStart(16,"0"),"hex");r=o.concat([r,e]),s=c}if(a.name===e)break}const n=o.concat([t,r]),c=(0,a.intToBuffer)((0,i.buf)(n)>>>0).toString("hex");return"0x".concat(c)}forkHash(e,t){var r;e=null!==(r=e)&&void 0!==r?r:this._hardfork;const o=this._getHardfork(e);if(null===o||null===(null===o||void 0===o?void 0:o.block)&&void 0===(null===o||void 0===o?void 0:o.timestamp)&&void 0===(null===o||void 0===o?void 0:o.ttd)){throw new Error("No fork hash calculation possible for future hardfork")}if(null!==(null===o||void 0===o?void 0:o.forkHash)&&void 0!==(null===o||void 0===o?void 0:o.forkHash))return o.forkHash;if(!t)throw new Error("genesisHash required for forkHash calculation");return this._calcForkHash(e,t)}hardforkForForkHash(e){const t=this.hardforks().filter((t=>t.forkHash===e));return t.length>=1?t[t.length-1]:null}setForkHashes(e){for(const r of this.hardforks()){var t;const o=null!==(t=r.timestamp)&&void 0!==t?t:r.block;null!==r.forkHash&&void 0!==r.forkHash||(null===o||void 0===o)&&"undefined"===typeof r.ttd||(r.forkHash=this.forkHash(r.name,e))}}genesis(){return this._chainParams.genesis}hardforks(){return this._chainParams.hardforks}bootstrapNodes(){return this._chainParams.bootstrapNodes}dnsNetworks(){return this._chainParams.dnsNetworks}hardfork(){return this._hardfork}chainId(){return BigInt(this._chainParams.chainId)}chainName(){return this._chainParams.name}networkId(){return BigInt(this._chainParams.networkId)}eips(){return this._eips}consensusType(){var e;const t=this.hardfork();let r;for(const o of this.HARDFORK_CHANGES)if("consensus"in o[1]&&(r=o[1].consensus.type),o[0]===t)break;return null!==(e=r)&&void 0!==e?e:this._chainParams.consensus.type}consensusAlgorithm(){var e;const t=this.hardfork();let r;for(const o of this.HARDFORK_CHANGES)if("consensus"in o[1]&&(r=o[1].consensus.algorithm),o[0]===t)break;return null!==(e=r)&&void 0!==e?e:this._chainParams.consensus.algorithm}consensusConfig(){var e,t;const r=this.hardfork();let o;for(const a of this.HARDFORK_CHANGES)if("consensus"in a[1]&&(o=a[1].consensus[a[1].consensus.algorithm]),a[0]===r)break;return null!==(e=null!==(t=o)&&void 0!==t?t:this._chainParams.consensus[this.consensusAlgorithm()])&&void 0!==e?e:{}}copy(){const e=Object.assign(Object.create(Object.getPrototypeOf(this)),this);return e.removeAllListeners(),e}static _getInitializedChains(e){const t={};for(const[o,a]of Object.entries(u.Chain))t[a]=o.toLowerCase();const r={mainnet:c,ropsten:f,rinkeby:d,goerli:n,sepolia:l};if(e)for(const o of e){const{name:e}=o;t[o.chainId.toString()]=e,r[e]=o}return r.names=t,r}}t.Common=g},3614:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.EIPs=void 0,t.EIPs={1153:r(10076),1559:r(22946),2315:r(85628),2537:r(23969),2565:r(30295),2718:r(1016),2929:r(73563),2930:r(82969),3074:r(37427),3198:r(69841),3529:r(43300),3540:r(85460),3541:r(42040),3554:r(90152),3607:r(62699),3651:r(95737),3670:r(97819),3675:r(58039),3855:r(97620),3860:r(24795),4345:r(49768),4399:r(83146),4844:r(20123),4895:r(44476),5133:r(60105)}},35490:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CustomChain=t.ConsensusAlgorithm=t.ConsensusType=t.Hardfork=t.Chain=void 0,function(e){e[e.Mainnet=1]="Mainnet",e[e.Ropsten=3]="Ropsten",e[e.Rinkeby=4]="Rinkeby",e[e.Goerli=5]="Goerli",e[e.Sepolia=11155111]="Sepolia"}(t.Chain||(t.Chain={})),function(e){e.Chainstart="chainstart",e.Homestead="homestead",e.Dao="dao",e.TangerineWhistle="tangerineWhistle",e.SpuriousDragon="spuriousDragon",e.Byzantium="byzantium",e.Constantinople="constantinople",e.Petersburg="petersburg",e.Istanbul="istanbul",e.MuirGlacier="muirGlacier",e.Berlin="berlin",e.London="london",e.ArrowGlacier="arrowGlacier",e.GrayGlacier="grayGlacier",e.MergeForkIdTransition="mergeForkIdTransition",e.Merge="merge",e.Shanghai="shanghai",e.ShardingForkDev="shardingFork"}(t.Hardfork||(t.Hardfork={})),function(e){e.ProofOfStake="pos",e.ProofOfWork="pow",e.ProofOfAuthority="poa"}(t.ConsensusType||(t.ConsensusType={})),function(e){e.Ethash="ethash",e.Clique="clique",e.Casper="casper"}(t.ConsensusAlgorithm||(t.ConsensusAlgorithm={})),function(e){e.PolygonMainnet="polygon-mainnet",e.PolygonMumbai="polygon-mumbai",e.ArbitrumRinkebyTestnet="arbitrum-rinkeby-testnet",e.ArbitrumOne="arbitrum-one",e.xDaiChain="x-dai-chain",e.OptimisticKovan="optimistic-kovan",e.OptimisticEthereum="optimistic-ethereum"}(t.CustomChain||(t.CustomChain={}))},72761:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.hardforks=void 0,t.hardforks={chainstart:r(52593),homestead:r(47582),dao:r(28953),tangerineWhistle:r(47295),spuriousDragon:r(81759),byzantium:r(89903),constantinople:r(90188),petersburg:r(48612),istanbul:r(20619),muirGlacier:r(33450),berlin:r(46667),london:r(67857),shanghai:r(71787),arrowGlacier:r(93754),grayGlacier:r(80228),mergeForkIdTransition:r(64580),merge:r(18387),shardingFork:r(74718)}},13602:function(e,t,r){"use strict";var o=this&&this.__createBinding||(Object.create?function(e,t,r,o){void 0===o&&(o=r);var a=Object.getOwnPropertyDescriptor(t,r);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,o,a)}:function(e,t,r,o){void 0===o&&(o=r),e[o]=t[r]}),a=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||o(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),a(r(34083),t),a(r(35490),t),a(r(9722),t),a(r(94205),t)},9722:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},94205:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.parseGethGenesis=void 0;const o=r(28922),a=r(35490);function i(e){var t,r;let i=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];const{name:s,config:n,difficulty:c,mixHash:d,gasLimit:f,coinbase:l,baseFeePerGas:h}=e;let{extraData:u,timestamp:m,nonce:p}=e;const g=Number(m),{chainId:b}=n;if(""===u&&(u="0x"),(0,o.isHexPrefixed)(m)||(m=(0,o.intToHex)(parseInt(m))),18!==p.length&&(p=function(e){return e&&"0x0"!==e?(0,o.isHexPrefixed)(e)?"0x"+(0,o.stripHexPrefix)(e).padStart(16,"0"):"0x"+e.padStart(16,"0"):"0x0000000000000000"}(p)),n.eip155Block!==n.eip158Block)throw new Error("EIP155 block number must equal EIP 158 block number since both are part of SpuriousDragon hardfork and the client only supports activating the full hardfork");const v={name:s,chainId:b,networkId:b,genesis:{timestamp:m,gasLimit:parseInt(f),difficulty:parseInt(c),nonce:p,extraData:u,mixHash:d,coinbase:l,baseFeePerGas:h},hardfork:void 0,hardforks:[],bootstrapNodes:[],consensus:void 0!==n.clique?{type:"poa",algorithm:"clique",clique:{period:null!==(t=n.clique.period)&&void 0!==t?t:n.clique.blockperiodseconds,epoch:null!==(r=n.clique.epoch)&&void 0!==r?r:n.clique.epochlength}}:{type:"pow",algorithm:"ethash",ethash:{}}},k={[a.Hardfork.Homestead]:{name:"homesteadBlock"},[a.Hardfork.Dao]:{name:"daoForkBlock"},[a.Hardfork.TangerineWhistle]:{name:"eip150Block"},[a.Hardfork.SpuriousDragon]:{name:"eip155Block"},[a.Hardfork.Byzantium]:{name:"byzantiumBlock"},[a.Hardfork.Constantinople]:{name:"constantinopleBlock"},[a.Hardfork.Petersburg]:{name:"petersburgBlock"},[a.Hardfork.Istanbul]:{name:"istanbulBlock"},[a.Hardfork.MuirGlacier]:{name:"muirGlacierBlock"},[a.Hardfork.Berlin]:{name:"berlinBlock"},[a.Hardfork.London]:{name:"londonBlock"},[a.Hardfork.MergeForkIdTransition]:{name:"mergeForkBlock",postMerge:i},[a.Hardfork.Shanghai]:{name:"shanghaiTime",postMerge:!0,isTimestamp:!0},[a.Hardfork.ShardingForkDev]:{name:"shardingForkTime",postMerge:!0,isTimestamp:!0}},y=Object.keys(k).reduce(((e,t)=>(e[k[t].name]=t,e)),{}),P=Object.keys(n).filter((e=>void 0!==y[e]&&void 0!==n[e]&&null!==n[e]));if(v.hardforks=P.map((e=>({name:y[e],block:!0===k[y[e]].isTimestamp||"number"!==typeof n[e]?null:n[e],timestamp:!0===k[y[e]].isTimestamp&&"number"===typeof n[e]?n[e]:void 0}))).filter((e=>null!==e.block||void 0!==e.timestamp)),v.hardforks.sort((function(e,t){var r,o;return(null!==(r=e.block)&&void 0!==r?r:1/0)-(null!==(o=t.block)&&void 0!==o?o:1/0)})),v.hardforks.sort((function(e,t){var r,o;return(null!==(r=e.timestamp)&&void 0!==r?r:g)-(null!==(o=t.timestamp)&&void 0!==o?o:g)})),void 0!==n.terminalTotalDifficulty){const e={name:a.Hardfork.Merge,ttd:n.terminalTotalDifficulty,block:null},t=v.hardforks.findIndex((e=>{var t;return!0===(null===(t=k[e.name])||void 0===t?void 0:t.postMerge)}));-1!==t?v.hardforks.splice(t,0,e):v.hardforks.push(e)}const E=v.hardforks.length>0?v.hardforks.slice(-1)[0]:void 0;return v.hardfork=null===E||void 0===E?void 0:E.name,v.hardforks.unshift({name:a.Hardfork.Chainstart,block:0}),v}t.parseGethGenesis=function(e,t,r){try{if(["config","difficulty","gasLimit","alloc"].some((t=>!(t in e))))throw new Error("Invalid format, expected geth genesis fields missing");return void 0!==t&&(e.name=t),i(e,r)}catch(o){throw new Error("Error parsing parameters file: ".concat(o.message))}}},58454:(e,t,r)=>{"use strict";r.r(t),r.d(t,{EthereumPrivateKeyProvider:()=>Ce,TransactionFormatter:()=>Oe,WalletConnectProvider:()=>W,getProviderHandlers:()=>me});var o=r(4942),a=r(3869),i=r(65957),s=(r(13453),r(688)),n=r(58489),c=(r(30456),r(62895)),d=r.n(c);const f="eip155",l="solana",h="other",u=(e,t)=>{if(e===h)return null;const r=t?"number"===typeof t?t:parseInt(t,16):(e=>{if(e===f)return 1;if(e===l)return 1;throw new Error("Chain namespace ".concat(e," is not supported"))})(e);return e===f?(e=>1===e?{chainNamespace:f,chainId:"0x1",rpcTarget:"https://rpc.ankr.com/eth",displayName:"Ethereum Mainnet",blockExplorer:"https://etherscan.io/",ticker:"ETH",tickerName:"Ethereum",decimals:18}:3===e?{chainNamespace:f,chainId:"0x3",rpcTarget:"https://rpc.ankr.com/eth_ropsten",displayName:"Ropsten Testnet",blockExplorer:"https://ropsten.etherscan.io/",ticker:"ETH",tickerName:"Ethereum",decimals:18}:4===e?{chainNamespace:f,chainId:"0x4",rpcTarget:"https://rpc.ankr.com/eth_rinkeby",displayName:"Rinkeby Testnet",blockExplorer:"https://rinkeby.etherscan.io/",ticker:"ETH",tickerName:"Ethereum",decimals:18}:5===e?{chainNamespace:f,chainId:"0x5",rpcTarget:"https://rpc.ankr.com/eth_goerli",displayName:"Goerli Testnet",blockExplorer:"https://goerli.etherscan.io/",ticker:"ETH",tickerName:"Ethereum",decimals:18}:137===e?{chainNamespace:f,chainId:"0x89",rpcTarget:"https://rpc.ankr.com/polygon",displayName:"Polygon Mainnet",blockExplorer:"https://polygonscan.com",ticker:"MATIC",tickerName:"Polygon"}:80001===e?{chainNamespace:f,chainId:"0x13881",rpcTarget:"https://rpc.ankr.com/polygon_mumbai",displayName:"Polygon Mumbai Testnet",blockExplorer:"https://mumbai.polygonscan.com/",ticker:"MATIC",tickerName:"Polygon",decimals:18}:56===e?{chainNamespace:f,chainId:"0x38",rpcTarget:"https://rpc.ankr.com/bsc",displayName:"Binance SmartChain Mainnet",blockExplorer:"https://bscscan.com",ticker:"BNB",tickerName:"Binance SmartChain",decimals:18}:97===e?{chainNamespace:f,chainId:"0x61",rpcTarget:"https://rpc.ankr.com/bsc_testnet_chapel",displayName:"Binance SmartChain Testnet",blockExplorer:"https://testnet.bscscan.com",ticker:"BNB",tickerName:"Binance SmartChain",decimals:18}:25===e?{chainNamespace:f,chainId:"0x19",rpcTarget:"https://rpc.cronos.org",displayName:"Cronos Mainnet",blockExplorer:"https://cronoscan.com/",ticker:"CRO",tickerName:"Cronos"}:338===e?{chainNamespace:f,chainId:"0x152",rpcTarget:"https://rpc-t3.cronos.org/",displayName:"Cronos Testnet",blockExplorer:"https://cronoscan.com/",ticker:"CRO",tickerName:"Cronos",decimals:18}:8217===e?{chainNamespace:f,chainId:"0x2019",rpcTarget:"https://public-node-api.klaytnapi.com/v1/cypress",displayName:"Klaytn Mainnet",blockExplorer:"https://scope.klaytn.com",ticker:"KLAY",tickerName:"Klaytn",decimals:18}:null)(r):e===l?(e=>1===e?{chainNamespace:l,chainId:"0x1",rpcTarget:"https://rpc.ankr.com/solana",displayName:"Solana Mainnet",blockExplorer:"https://explorer.solana.com",ticker:"SOL",tickerName:"Solana",decimals:9}:2===e?{chainNamespace:l,chainId:"0x2",rpcTarget:"https://api.testnet.solana.com",displayName:"Solana Testnet",blockExplorer:"https://explorer.solana.com?cluster=testnet",ticker:"SOL",tickerName:"Solana",decimals:9}:3===e?{chainNamespace:l,chainId:"0x3",rpcTarget:"https://api.devnet.solana.com",displayName:"Solana Devnet",blockExplorer:"https://explorer.solana.com?cluster=devnet",ticker:"SOL",tickerName:"Solana",decimals:9}:null)(r):null};class m extends s.s{constructor(e,t){super(t),(0,o.Z)(this,"code",void 0),(0,o.Z)(this,"message",void 0),this.code=e,this.message=t||"",Object.defineProperty(this,"name",{value:"Web3AuthError"})}toJSON(){return{name:this.name,code:this.code,message:this.message}}toString(){return JSON.stringify(this.toJSON())}}class p extends m{constructor(e,t){super(e,t),Object.defineProperty(this,"name",{value:"WalletInitializationError"})}static fromCode(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";return new p(e,"".concat(p.messages[e],", ").concat(t))}static notFound(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return p.fromCode(5001,e)}static notInstalled(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return p.fromCode(5002,e)}static notReady(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return p.fromCode(5003,e)}static windowBlocked(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return p.fromCode(5004,e)}static windowClosed(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return p.fromCode(5005,e)}static incompatibleChainNameSpace(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return p.fromCode(5006,e)}static duplicateAdapterError(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return p.fromCode(5007,e)}static invalidProviderConfigError(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return p.fromCode(5008,e)}static providerNotReadyError(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return p.fromCode(5009,e)}static rpcConnectionError(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return p.fromCode(5010,e)}static invalidParams(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return p.fromCode(5011,e)}static invalidNetwork(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return p.fromCode(5013,e)}}(0,o.Z)(p,"messages",{5e3:"Custom",5001:"Wallet is not found",5002:"Wallet is not installed",5003:"Wallet is not ready yet",5004:"Wallet window is blocked",5005:"Wallet window has been closed by the user",5006:"Incompatible chain namespace provided",5007:"Adapter has already been included",5008:"Invalid provider Config",5009:"Provider is not ready yet",5010:"Failed to connect with rpc url",5011:"Invalid params passed in",5013:"Invalid network provided"});class g extends m{constructor(e,t){super(e,t),Object.defineProperty(this,"name",{value:"WalletLoginError"})}static fromCode(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";return new g(e,"".concat(g.messages[e],". ").concat(t))}static connectionError(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return g.fromCode(5111,e)}static disconnectionError(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return g.fromCode(5112,e)}static notConnectedError(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return g.fromCode(5113,e)}static popupClosed(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return g.fromCode(5114,e)}static mfaEnabled(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return g.fromCode(5115,e)}}function b(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function v(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?b(Object(r),!0).forEach((function(t){(0,o.Z)(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):b(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}(0,o.Z)(g,"messages",{5e3:"Custom",5111:"Failed to connect with wallet",5112:"Failed to disconnect from wallet",5113:"Wallet is not connected",5114:"Wallet popup has been closed by the user",5115:"User has already enabled mfa, please use the @web3auth/web3auth-web sdk for login with mfa"});const k={OPENLOGIN:"openlogin",WALLET_CONNECT_V1:"wallet-connect-v1",WALLET_CONNECT_V2:"wallet-connect-v2"},y=v({TORUS_SOLANA:"torus-solana",PHANTOM:"phantom",SOLFLARE:"solflare",SLOPE:"slope"},k),P=v({TORUS_EVM:"torus-evm",METAMASK:"metamask",COINBASE:"coinbase"},k);v(v({},P),y),y.TORUS_SOLANA,y.PHANTOM,y.SOLFLARE,y.SLOPE,P.TORUS_EVM,P.METAMASK,P.COINBASE;function E(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function w(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?E(Object(r),!0).forEach((function(t){(0,o.Z)(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):E(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}const x={NOT_READY:"not_ready",READY:"ready",CONNECTING:"connecting",CONNECTED:"connected",DISCONNECTED:"disconnected",ERRORED:"errored"};w(w({},x),{},{ADAPTER_DATA_UPDATED:"adapter_data_updated"});var I=d().getLogger("web3auth-logger");const S=e=>("string"===typeof e||"number"===typeof e)&&/^(-)?0x[0-9a-f]*$/i.test(e);var O=r(12169),A=r(27037),T=r(38791),C=r(28922),B=r(1766),F=r(88093),H=r.n(F),D=r(34984),N=r(84471),_=r(22924),L=r(80518),G=r.n(L),M=r(19778).Buffer;function R(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function z(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?R(Object(r),!0).forEach((function(t){(0,o.Z)(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):R(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function j(e){return 42===e.length}function U(e){let{getAccounts:t,getPrivateKey:r,processDecryptMessage:o,processEncryptionPublicKey:a,processEthSignMessage:s,processPersonalMessage:n,processTransaction:c,processSignTransaction:d,processTypedMessage:f,processTypedMessageV3:l,processTypedMessageV4:h}=e;if(!t)throw new Error("opts.getAccounts is required");async function u(e,r){if("string"===typeof e&&e.length>0){const o=(await t(r)).map((e=>e.toLowerCase())),a=e.toLowerCase();if(o.includes(a))return a}throw A.ethErrors.rpc.invalidParams({message:"Invalid parameters: must provide an Ethereum address."})}async function m(e,t){if(!r)throw A.ethErrors.rpc.methodNotSupported();t.result=r(e)}return(0,i.v0)({eth_accounts:(0,i.Pk)((async function(e,r){r.result=await t(e)})),eth_private_key:(0,i.Pk)(m),private_key:(0,i.Pk)(m),eth_coinbase:(0,i.Pk)((async function(e,r){const o=await t(e);r.result=o[0]||null})),eth_sendTransaction:(0,i.Pk)((async function(e,t){if(!c)throw A.ethErrors.rpc.methodNotSupported();const r=e.params[0]||{from:""};r.from=await u(r.from,e),t.result=await c(r,e)})),eth_signTransaction:(0,i.Pk)((async function(e,t){if(!d)throw A.ethErrors.rpc.methodNotSupported();const r=e.params[0]||{from:""};r.from=await u(r.from,e),t.result=await d(r,e)})),eth_sign:(0,i.Pk)((async function(e,t){if(!s)throw A.ethErrors.rpc.methodNotSupported();const r=await u(e.params[0],e),o=e.params[1],a=z(z({},e.params[2]||{}),{},{from:r,data:o});t.result=await s(a,e)})),eth_signTypedData:(0,i.Pk)((async function(e,t){if(!f)throw A.ethErrors.rpc.methodNotSupported();const r=e.params[0],o=await u(e.params[1],e),a=z(z({},e.params[2]||{}),{},{from:o,data:r});t.result=await f(a,e,"V1")})),eth_signTypedData_v3:(0,i.Pk)((async function(e,t){if(!l)throw A.ethErrors.rpc.methodNotSupported();const r=await u(e.params[0],e),o={data:e.params[1],from:r,version:"V3"};t.result=await l(o,e,"V3")})),eth_signTypedData_v4:(0,i.Pk)((async function(e,t){if(!h)throw A.ethErrors.rpc.methodNotSupported();const r=await u(e.params[0],e),o={data:e.params[1],from:r,version:"V4"};t.result=await h(o,e,"V4")})),personal_sign:(0,i.Pk)((async function(e,t){if(!n)throw A.ethErrors.rpc.methodNotSupported();const r=e.params[0],o=e.params[1],a=e.params[2]||{};let i,s;if(j(r)&&!j(o)){let e="The eth_personalSign method requires params ordered ";e+="[message, address]. This was previously handled incorrectly, ",e+="and has been corrected automatically. ",e+="Please switch this param order for smooth behavior in the future.",t.warning=e,i=r,s=o}else s=r,i=o;i=await u(i,e);const c=z(z({},a),{},{from:i,data:s});t.result=await n(c,e)})),eth_getEncryptionPublicKey:(0,i.Pk)((async function(e,t){if(!a)throw A.ethErrors.rpc.methodNotSupported();const r=await u(e.params[0],e);t.result=await a(r,e)})),eth_decrypt:(0,i.Pk)((async function(e,t){if(!o)throw A.ethErrors.rpc.methodNotSupported();const r=e.params[0],a=await u(e.params[1],e),i=z(z({},e.params[2]||{}),{},{from:a,data:r});t.result=o(i,e)}))})}function Z(e){const{getAccounts:t,getPrivateKey:r,processTransaction:o,processSignTransaction:a,processEthSignMessage:s,processTypedMessage:n,processTypedMessageV3:c,processTypedMessageV4:d,processPersonalMessage:f,processEncryptionPublicKey:l,processDecryptMessage:h}=e;return(0,i.UZ)([(0,i.v0)({eth_syncing:!1}),U({getAccounts:t,getPrivateKey:r,processTransaction:o,processEthSignMessage:s,processSignTransaction:a,processTypedMessage:n,processTypedMessageV3:c,processTypedMessageV4:d,processPersonalMessage:f,processEncryptionPublicKey:l,processDecryptMessage:h})])}function J(e){return(t,r,o,a)=>"eth_chainId"===t.method?(r.result=e,a()):o()}function q(e){return(t,r,o,a)=>"eth_provider_config"===t.method?(r.result=e,a()):o()}function V(e){const{chainId:t,rpcTarget:r}=e,o=(0,a.v$)({rpcTarget:r});return{networkMiddleware:(0,i.UZ)([J(t),q(e),o]),fetchMiddleware:o}}function K(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function $(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?K(Object(r),!0).forEach((function(t){(0,o.Z)(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):K(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}class W extends O.Zk{constructor(e){let{config:t,state:r,connector:a}=e;super({config:{chainConfig:$($({},t.chainConfig),{},{chainNamespace:f}),skipLookupNetwork:!!t.skipLookupNetwork},state:$($({},r||{}),{},{chainId:"loading",accounts:[]})}),(0,o.Z)(this,"connector",null),this.connector=a||null}async enable(){if(!this.connector)throw A.ethErrors.provider.custom({message:"Connector is not initialized, pass wallet connect connector in constructor",code:4902});return await this.setupProvider(this.connector),this._providerEngineProxy.request({method:"eth_accounts"})}async setupProvider(e){this.onConnectorStateUpdate(e),await this.setupEngine(e)}async switchChain(e){let{chainId:t,addChain:r=!0,lookup:o=!0}=e;if(!this.connector)throw A.ethErrors.provider.custom({message:"Connector is not initialized, pass wallet connect connector in constructor",code:4902});const a=this.getChainConfig(t);this.update({chainId:"loading"});const{rpcTarget:i,displayName:s}=a;if(r)try{await this.connector.sendCustomRequest({method:"wallet_addEthereumChain",params:[{chainId:t,chainName:s,rpcUrls:[i],blockExplorerUrls:[a.blockExplorer],nativeCurrency:{name:a.tickerName,symbol:a.ticker,decimals:a.decimals||18}}]})}catch(n){I.error(n)}try{await this.connector.sendCustomRequest({method:"wallet_switchEthereumChain",params:[{chainId:t}]})}catch(n){if(I.error(n),"JSON RPC response format is invalid"!==n.message)throw n}this.configure({chainConfig:a}),o&&await this.lookupNetwork(this.connector)}async addChain(e){if(!this.connector)throw p.notReady("Wallet adapter is not ready yet");const{rpcTarget:t,displayName:r}=e;try{await this.connector.sendCustomRequest({method:"wallet_addEthereumChain",params:[{chainId:e.chainId,chainName:r,rpcUrls:[t],blockExplorerUrls:[e.blockExplorer],nativeCurrency:{name:e.tickerName,symbol:e.ticker,decimals:e.decimals||18}}]}),super.addChain(e)}catch(o){throw I.error(o),o}}async lookupNetwork(e){if(!e.connected)throw g.notConnectedError("Wallet connect connector is not connected");if(!this.provider)throw A.ethErrors.provider.custom({message:"Provider is not initialized",code:4902});const{chainId:t}=this.config.chainConfig,r=S(e.chainId.toString())?e.chainId:"0x".concat(e.chainId.toString(16));if(t!==r)throw p.rpcConnectionError("Invalid network, net_version is: ".concat(r,", expected: ").concat(t));return this.provider.emit("connect",{chainId:t}),this.provider.emit("chainChanged",this.state.chainId),r}async setupEngine(e){const t=function(e){let{connector:t}=e;return{getPrivateKey:async()=>{throw A.ethErrors.rpc.methodNotSupported()},getAccounts:async e=>{const{accounts:r}=t;if(r&&r.length)return r;throw new Error("Failed to get accounts")},processTransaction:async(e,r)=>await t.sendTransaction(e),processSignTransaction:async(e,r)=>await t.signTransaction(e),processEthSignMessage:async(e,r)=>await t.signMessage([e.from,e.data]),processPersonalMessage:async(e,r)=>await t.signPersonalMessage([e.data,e.from]),processTypedMessage:async(e,r)=>await t.signTypedData([e.from,e.data]),processTypedMessageV3:async e=>await t.signTypedData([e.from,e.data]),processTypedMessageV4:async e=>await t.signTypedData([e.from,e.data]),processEncryptionPublicKey:async e=>{throw A.ethErrors.rpc.methodNotSupported()},processDecryptMessage:e=>{throw A.ethErrors.rpc.methodNotSupported()}}}({connector:e});this.update({accounts:e.accounts||[]});const r=Z(t),o=new i.eI,{networkMiddleware:s}=V(this.config.chainConfig);o.push(r),o.push(s);const n=(0,a.Xj)(o);this.updateProviderEngineProxy(n),this.config.skipLookupNetwork||await this.lookupNetwork(e)}async onConnectorStateUpdate(e){e.on("session_update",(async(t,r)=>{if(!this.provider)throw g.notConnectedError("Wallet connect connector is not connected");if(t)return void this.provider.emit("error",t);const{accounts:o,chainId:a,rpcUrl:i}=r.params[0];null!==o&&void 0!==o&&o.length&&this.state.accounts[0]!==o[0]&&(this.update({accounts:o}),this.provider.emit("accountsChanged",o));const s="0x".concat(a.toString(16));if(a&&this.state.chainId!==s){const t=u(f,a)||{};this.configure({chainConfig:$($({},t),{},{chainId:s,rpcTarget:i,chainNamespace:f})}),await this.setupEngine(e)}}))}}(0,o.Z)(W,"getProviderInstance",(async e=>{const t=new W({config:{chainConfig:e.chainConfig,skipLookupNetwork:e.skipLookupNetwork}});return await t.setupProvider(e.connector),t}));const Y=new N.Z("1e18"),X=new N.Z("1e9"),Q=new N.Z("1"),ee={hex:e=>"string"===typeof e?new N.Z((0,C.stripHexPrefix)(e),16):new N.Z(e,16),dec:e=>new N.Z(e,10)},te={WEI:e=>e.div(Y),GWEI:e=>e.div(X),ETH:e=>e.div(Q)},re={WEI:e=>e.times(Y).dp(0,N.Z.ROUND_HALF_UP),GWEI:e=>e.times(X).dp(9,N.Z.ROUND_HALF_UP),ETH:e=>e.times(Q).dp(9,N.Z.ROUND_HALF_UP)},oe={hex:e=>e.toString(16),dec:e=>new N.Z(e).toString(10)},ae=(e,t)=>{let{fromNumericBase:r="hex",toNumericBase:o,fromDenomination:a,toDenomination:i,numberOfDecimals:s}=t;return(e=>{const{value:t,fromNumericBase:r,fromDenomination:o,toNumericBase:a,toDenomination:i,numberOfDecimals:s}=e;let n=ee[r](t);return o&&(n=te[o](n)),i&&(n=re[i](n)),s&&(n=n.dp(s,N.Z.ROUND_HALF_DOWN)),a&&(n=oe[a](n)),n})({fromNumericBase:r,toNumericBase:o,fromDenomination:a,toDenomination:i,numberOfDecimals:s,value:e||"0"})};function ie(e){return ae(e,{fromNumericBase:"dec",toNumericBase:"hex",fromDenomination:"GWEI",toDenomination:"WEI"})}function se(e){return ae(e,{fromNumericBase:"hex",toNumericBase:"dec",fromDenomination:"WEI",toDenomination:"GWEI"})}function ne(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function ce(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?ne(Object(r),!0).forEach((function(t){(0,o.Z)(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):ne(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function de(e){return se(ie(e))}const fe=(e,t)=>{var r;try{H().ok(e&&"object"===typeof e,"Params must be an object."),H().ok("data"in e,'Params must include a "data" field.'),H().ok("from"in e,'Params must include a "from" field.'),H().ok("string"===typeof e.from&&(0,C.isValidAddress)(e.from),'"from" field must be a valid, lowercase, hexadecimal Ethereum address string.');let o=null,a=null;switch(e.version){case B.SignTypedDataVersion.V1:"string"===typeof e.data?H().doesNotThrow((()=>{o=JSON.parse(e.data)}),'"data" must be a valid JSON string.'):o=e.data,H().ok(Array.isArray(o),"params.data must be an array."),H().doesNotThrow((()=>{(0,B.typedSignatureHash)(o)}),"Signing data must be valid EIP-712 typed data.");break;case B.SignTypedDataVersion.V3:case B.SignTypedDataVersion.V4:"string"===typeof e.data?H().doesNotThrow((()=>{o=JSON.parse(e.data)}),'"data" must be a valid JSON string.'):o=e.data,H().ok(o.primaryType in o.types,'Primary type of "'.concat(o.primaryType,'" has no type definition.'));const i=D.validate(o,B.TYPED_MESSAGE_SCHEMA.properties);H().strictEqual(i.errors.length,0,"Signing data must conform to EIP-712 schema. See https://git.io/fNtcx."),a=null===(r=o.domain)||void 0===r?void 0:r.chainId,a&&(H().ok(!Number.isNaN(t),'Cannot sign messages for chainId "'.concat(a,'", because Web3Auth is switching networks.')),"string"===typeof a&&(a=Number.parseInt(a,S(a)?16:10)),H().strictEqual(a,t,'Provided chainId "'.concat(a,'" must match the active chainId "').concat(t,'"')));break;default:H().fail('Unknown typed data version "'.concat(e.version,'"'))}}catch(o){throw A.ethErrors.rpc.invalidInput({message:null===o||void 0===o?void 0:o.message})}};function le(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function he(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?le(Object(r),!0).forEach((function(t){(0,o.Z)(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):le(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}async function ue(e,t,r){const o=await r.formatTransaction(e),a=await r.getCommonConfiguration();return T.TransactionFactory.fromTxData(o,{common:a}).sign(M.from(t,"hex")).serialize()}function me(e){let{txFormatter:t,privKey:r,getProviderEngineProxy:o}=e;return{getAccounts:async e=>["0x".concat((0,C.privateToAddress)(M.from(r,"hex")).toString("hex"))],getPrivateKey:async e=>r,processTransaction:async(e,a)=>{const i=o();if(!i)throw A.ethErrors.provider.custom({message:"Provider is not initialized",code:4902});const s=await ue(e,r,t);return await i.request({method:"eth_sendRawTransaction",params:["0x".concat(s.toString("hex"))]})},processSignTransaction:async(e,a)=>{if(!o())throw A.ethErrors.provider.custom({message:"Provider is not initialized",code:4902});const i=await ue(e,r,t);return"0x".concat(i.toString("hex"))},processEthSignMessage:async(e,t)=>(0,a.l)(r,e.data),processPersonalMessage:async(e,t)=>{const o=M.from(r,"hex");return(0,B.personalSign)({privateKey:o,data:e.data})},processTypedMessage:async(e,t)=>{I.debug("processTypedMessage",e);const a=M.from(r,"hex"),i=o();if(!i)throw A.ethErrors.provider.custom({message:"Provider is not initialized",code:4902});const s=await i.request({method:"eth_chainId"}),n=Number.parseInt(s,S(s)?16:10),c=he(he({},e),{},{version:B.SignTypedDataVersion.V1});fe(c,n);const d="string"===typeof c.data?JSON.parse(c.data):c.data;return(0,B.signTypedData)({privateKey:a,data:d,version:B.SignTypedDataVersion.V1})},processTypedMessageV3:async(e,t)=>{I.debug("processTypedMessageV3",e);const a=M.from(r,"hex"),i=o();if(!i)throw A.ethErrors.provider.custom({message:"Provider is not initialized",code:4902});const s=await i.request({method:"eth_chainId"}),n=Number.parseInt(s,S(s)?16:10);fe(e,n);const c="string"===typeof e.data?JSON.parse(e.data):e.data;return(0,B.signTypedData)({privateKey:a,data:c,version:B.SignTypedDataVersion.V3})},processTypedMessageV4:async(e,t)=>{I.debug("processTypedMessageV4",e);const a=M.from(r,"hex"),i=o();if(!i)throw A.ethErrors.provider.custom({message:"Provider is not initialized",code:4902});const s=await i.request({method:"eth_chainId"}),n=Number.parseInt(s,S(s)?16:10);fe(e,n);const c="string"===typeof e.data?JSON.parse(e.data):e.data;return(0,B.signTypedData)({privateKey:a,data:c,version:B.SignTypedDataVersion.V4})},processEncryptionPublicKey:async(e,t)=>(I.info("processEncryptionPublicKey",e),(0,B.getEncryptionPublicKey)(r)),processDecryptMessage:(e,t)=>{I.info("processDecryptMessage",e);const o=(0,C.stripHexPrefix)(e.data),a=M.from(o,"hex");return(0,B.decrypt)({encryptedData:JSON.parse(a.toString("utf8")),privateKey:r})}}}function pe(e){return(0,C.addHexPrefix)(e.toString(16))}function ge(e){return G().isBN(e)?e:new(G())((0,C.stripHexPrefix)(e),16)}const be="0x0",ve="0x2",ke="sentEther",ye="contractInteraction",Pe="contractDeployment",Ee="fee-market",we="legacy",xe="eth_gasPrice";function Ie(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function Se(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?Ie(Object(r),!0).forEach((function(t){(0,o.Z)(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):Ie(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}class Oe{constructor(e){let{getProviderEngineProxy:t}=e;(0,o.Z)(this,"chainConfig",null),(0,o.Z)(this,"getProviderEngineProxy",void 0),(0,o.Z)(this,"isEIP1559Compatible",!1),this.getProviderEngineProxy=t}get providerProxy(){return this.getProviderEngineProxy()}async init(){this.chainConfig=await this.providerProxy.request({method:"eth_provider_config",params:[]}),this.isEIP1559Compatible=await this.getEIP1559Compatibility()}async getCommonConfiguration(){if(!this.chainConfig)throw new Error("Chain config not initialized");const{displayName:e,chainId:t}=this.chainConfig,r=this.isEIP1559Compatible?_.Hardfork.London:_.Hardfork.Berlin,o={name:e,chainId:"loading"===t?0:Number.parseInt(t,16),networkId:"loading"===t?0:Number.parseInt(t,16),defaultHardfork:r};return _.Common.custom(o)}async formatTransaction(e){if(!this.chainConfig)throw new Error("Chain config not initialized");const t=Se({},e);if(void 0===t.nonce&&(t.nonce=await this.providerProxy.request({method:"eth_getTransactionCount",params:[e.from,"latest"]})),!this.isEIP1559Compatible&&t.gasPrice){if(t.maxFeePerGas&&delete t.maxFeePerGas,t.maxPriorityFeePerGas&&delete t.maxPriorityFeePerGas,t.gas)t.gasLimit=t.gas;else{const e=await this.getDefaultGasLimit(t);e&&(t.gasLimit=e)}return t}if(t.gas)t.gasLimit=t.gas;else{const e=await this.getDefaultGasLimit(t);e&&(t.gasLimit=e)}const{gasPrice:r,maxFeePerGas:o,maxPriorityFeePerGas:a}=await this.getDefaultGasFees(t);var i,s;return this.isEIP1559Compatible?(!t.gasPrice||t.maxFeePerGas||t.maxPriorityFeePerGas?(o&&!t.maxFeePerGas&&(t.maxFeePerGas=o),a&&!t.maxPriorityFeePerGas&&(t.maxPriorityFeePerGas=a),r&&!t.maxFeePerGas&&(t.maxFeePerGas=r),t.maxFeePerGas&&!t.maxPriorityFeePerGas&&(t.maxPriorityFeePerGas=t.maxFeePerGas)):(t.maxFeePerGas=t.gasPrice,t.maxPriorityFeePerGas=(i="string"===typeof a?(0,C.stripHexPrefix)(a):a,s="string"===typeof t.gasPrice?(0,C.stripHexPrefix)(t.gasPrice):t.gasPrice,null!==i&&void 0!==i&&null!==s&&void 0!==s&&new N.O(i,10).lt(s,10)?a:t.gasPrice)),delete t.gasPrice):(delete t.maxPriorityFeePerGas,delete t.maxFeePerGas),!r||t.gasPrice||t.maxPriorityFeePerGas||t.maxFeePerGas||(t.gasPrice=r),t.type=this.isEIP1559Compatible?ve:be,t.chainId=this.chainConfig.chainId,t}async fetchEthGasPriceEstimate(){return{gasPrice:se(await this.providerProxy.request({method:"eth_gasPrice",params:[]})).toString()}}async getEIP1559Compatibility(){const e=await this.providerProxy.request({method:"eth_getBlockByNumber",params:["latest",!1]});return!!(e&&void 0!==e.baseFeePerGas)}async fetchGasFeeEstimateData(){if(!this.chainConfig)throw new Error("Chain config not initialized");const e="0x1"===this.chainConfig.chainId,t=Number.parseInt(this.chainConfig.chainId,16);let r;try{if(this.isEIP1559Compatible){r={gasFeeEstimates:await async function(e){const t=await(0,n.U2)(e);return ce(ce({},t),{},{estimatedBaseFee:de(t.estimatedBaseFee),low:ce(ce({},t.low),{},{suggestedMaxPriorityFeePerGas:de(t.low.suggestedMaxPriorityFeePerGas),suggestedMaxFeePerGas:de(t.low.suggestedMaxFeePerGas)}),medium:ce(ce({},t.medium),{},{suggestedMaxPriorityFeePerGas:de(t.medium.suggestedMaxPriorityFeePerGas),suggestedMaxFeePerGas:de(t.medium.suggestedMaxFeePerGas)}),high:ce(ce({},t.high),{},{suggestedMaxPriorityFeePerGas:de(t.high.suggestedMaxPriorityFeePerGas),suggestedMaxFeePerGas:de(t.high.suggestedMaxFeePerGas)})})}("https://gas-api.metaswap.codefi.network/networks/<chain_id>/suggestedGasFees".replace("<chain_id>","".concat(t))),gasEstimateType:Ee}}else{if(!e)throw new Error("Main gas fee/price estimation failed. Use fallback");r={gasFeeEstimates:await async function(e){const t=await(0,n.U2)(e,{referrer:e,referrerPolicy:"no-referrer-when-downgrade",method:"GET",mode:"cors"});return{low:t.SafeGasPrice,medium:t.ProposeGasPrice,high:t.FastGasPrice}}("https://gas-api.metaswap.codefi.network/networks/<chain_id>/gasPrices".replace("<chain_id>","".concat(t))),gasEstimateType:we}}}catch(o){try{r={gasFeeEstimates:await this.fetchEthGasPriceEstimate(),gasEstimateType:xe}}catch(a){throw new Error("Gas fee/price estimation failed. Message: ".concat(a.message))}}return r}async getDefaultGasFees(e){if(!this.isEIP1559Compatible&&e.gasPrice||this.isEIP1559Compatible&&e.maxFeePerGas&&e.maxPriorityFeePerGas)return{};try{const{gasFeeEstimates:e,gasEstimateType:t}=await this.fetchGasFeeEstimateData();if(this.isEIP1559Compatible&&t===Ee){const{medium:{suggestedMaxPriorityFeePerGas:t,suggestedMaxFeePerGas:r}={}}=e;if(t&&r)return{maxFeePerGas:(0,C.addHexPrefix)(ie(r)),maxPriorityFeePerGas:(0,C.addHexPrefix)(ie(t))}}else{if(t===we)return{gasPrice:(0,C.addHexPrefix)(ie(e.medium))};if(t===xe)return{gasPrice:(0,C.addHexPrefix)(ie(e.gasPrice))}}}catch(r){I.error(r)}const{gasPrice:t}=await this.fetchEthGasPriceEstimate();return{gasPrice:(0,C.addHexPrefix)(ie(t))}}async estimateTxGas(e){const t=Se({},e);delete t.gasPrice,delete t.maxFeePerGas,delete t.maxPriorityFeePerGas;return await this.providerProxy.request({method:"eth_estimateGas",params:[t]})}async analyzeGasUsage(e){const t=await this.providerProxy.request({method:"eth_getBlockByNumber",params:["latest",!1]});let r=pe(function(e,t,r){const o=new(G())(t),a=new(G())(r);return e.mul(o).div(a)}(ge(t.gasLimit),19,20));try{r=await this.estimateTxGas(e)}catch(o){I.warn(o)}return{blockGasLimit:t.gasLimit,estimatedGasHex:r}}addGasBuffer(e,t){let r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1.5;const o=ge(e),a=ge(t).muln(.9),i=o.muln(r);return o.gt(a)?pe(o):i.lt(a)?pe(i):pe(a)}async determineTransactionCategory(e){const{data:t,to:r}=e;let o,a="";if(t&&!r)o=Pe;else{try{a=await this.providerProxy.request({method:"eth_getCode",params:[r,"latest"]})}catch(i){I.warn(i)}o=!a||"0x"===a||"0x0"===a?ke:ye}return{transactionCategory:o,code:a}}async getDefaultGasLimit(e){const{transactionCategory:t}=await this.determineTransactionCategory(Se({},e));if(e.gas)return e.gas;if(e.to&&t===ke){if(e.data)throw Error("TxGasUtil - Trying to call a function on a non-contract address");const t=21e3;return(0,C.addHexPrefix)(t.toString(16))}const{blockGasLimit:r,estimatedGasHex:o}=await this.analyzeGasUsage(e);return this.addGasBuffer((0,C.addHexPrefix)(o),r)}}function Ae(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function Te(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?Ae(Object(r),!0).forEach((function(t){(0,o.Z)(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):Ae(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}class Ce extends O.Zk{constructor(e){let{config:t,state:r}=e;super({config:{chainConfig:Te(Te({},t.chainConfig),{},{chainNamespace:f})},state:r})}async enable(){if(!this.state.privateKey)throw A.ethErrors.provider.custom({message:"Private key is not found in state, plz pass it in constructor state param",code:4902});return await this.setupProvider(this.state.privateKey),this._providerEngineProxy.request({method:"eth_accounts"})}async setupProvider(e){const t=new Oe({getProviderEngineProxy:this.getProviderEngineProxy.bind(this)}),r=Z(me({txFormatter:t,privKey:e,getProviderEngineProxy:this.getProviderEngineProxy.bind(this)})),o=this.getChainSwitchMiddleware(),s=new i.eI,{networkMiddleware:n}=V(this.config.chainConfig);s.push(r),s.push(o),s.push(this.getAccountMiddleware()),s.push(n);const c=(0,a.Xj)(s);this.updateProviderEngineProxy(c),await t.init(),await this.lookupNetwork()}async updateAccount(e){if(!this._providerEngineProxy)throw A.ethErrors.provider.custom({message:"Provider is not initialized",code:4902});await this._providerEngineProxy.request({method:"eth_private_key"})!==e.privateKey&&(await this.setupProvider(e.privateKey),this._providerEngineProxy.emit("accountsChanged",{accounts:await this._providerEngineProxy.request({method:"eth_accounts"})}))}async switchChain(e){if(!this._providerEngineProxy)throw A.ethErrors.provider.custom({message:"Provider is not initialized",code:4902});const t=this.getChainConfig(e.chainId);this.update({chainId:"loading"}),this.configure({chainConfig:t});const r=await this._providerEngineProxy.request({method:"eth_private_key"});await this.setupProvider(r)}async lookupNetwork(){if(!this._providerEngineProxy)throw A.ethErrors.provider.custom({message:"Provider is not initialized",code:4902});const{chainId:e}=this.config.chainConfig;if(!e)throw A.ethErrors.rpc.invalidParams("chainId is required while lookupNetwork");const t=await this._providerEngineProxy.request({method:"net_version",params:[]});if(parseInt(e,16)!==parseInt(t,10))throw A.ethErrors.provider.chainDisconnected("Invalid network, net_version is: ".concat(t));return this.state.chainId!==e&&(this._providerEngineProxy.emit("chainChanged",e),this._providerEngineProxy.emit("connect",{chainId:e})),this.update({chainId:e}),t}getChainSwitchMiddleware(){return function(e){let{addChain:t,switchChain:r}=e;return(0,i.v0)({wallet_addEthereumChain:(0,i.Pk)((async function(e,r){var o;const a=null!==(o=e.params)&&void 0!==o&&o.length?e.params[0]:void 0;if(!a)throw A.ethErrors.rpc.invalidParams("Missing chain params");if(!a.chainId)throw A.ethErrors.rpc.invalidParams("Missing chainId in chainParams");if(!a.rpcUrls||0===a.rpcUrls.length)throw A.ethErrors.rpc.invalidParams("Missing rpcUrls in chainParams");if(!a.nativeCurrency)throw A.ethErrors.rpc.invalidParams("Missing nativeCurrency in chainParams");r.result=await t(a)})),wallet_switchEthereumChain:(0,i.Pk)((async function(e,t){var o;const a=null!==(o=e.params)&&void 0!==o&&o.length?e.params[0]:void 0;if(!a)throw A.ethErrors.rpc.invalidParams("Missing chainId");t.result=await r(a)}))})}({addChain:async e=>{const{chainId:t,chainName:r,rpcUrls:o,blockExplorerUrls:a,nativeCurrency:i}=e;this.addChain({chainNamespace:"eip155",chainId:t,ticker:(null===i||void 0===i?void 0:i.symbol)||"ETH",tickerName:(null===i||void 0===i?void 0:i.name)||"Ether",displayName:r,rpcTarget:o[0],blockExplorer:(null===a||void 0===a?void 0:a[0])||"",decimals:(null===i||void 0===i?void 0:i.decimals)||18})},switchChain:async e=>{const{chainId:t}=e;await this.switchChain({chainId:t})}})}getAccountMiddleware(){return function(e){let{updatePrivatekey:t}=e;return(0,i.v0)({wallet_updateAccount:(0,i.Pk)((async function(e,r){var o;const a=null!==(o=e.params)&&void 0!==o&&o.length?e.params[0]:void 0;if(null===a||void 0===a||!a.privateKey)throw A.ethErrors.rpc.invalidParams("Missing privateKey");r.result=await t(a)}))})}({updatePrivatekey:async e=>{const{privateKey:t}=e;await this.updateAccount({privateKey:t})}})}}(0,o.Z)(Ce,"getProviderInstance",(async e=>{const t=new Ce({config:{chainConfig:e.chainConfig}});return await t.setupProvider(e.privKey),t}))},99275:(e,t,r)=>{"use strict";var o=r(19778).Buffer;Object.defineProperty(t,"__esModule",{value:!0}),t.Common=void 0;const a=r(28922),i=r(33685),s=r(47465),n=r(50746),c=r(6331),d=r(54135),f=r(35358),l=r(6956),h=r(64709),u=r(1184),m=r(59097),p=r(35078);class g extends s.EventEmitter{constructor(e){var t,r;super(),this._eips=[],this._customChains=null!==(t=e.customChains)&&void 0!==t?t:[],this._chainParams=this.setChain(e.chain),this.DEFAULT_HARDFORK=null!==(r=this._chainParams.defaultHardfork)&&void 0!==r?r:u.Hardfork.Merge,this.HARDFORK_CHANGES=this.hardforks().map((e=>[e.name,m.hardforks[e.name]])),this._hardfork=this.DEFAULT_HARDFORK,void 0!==e.hardfork&&this.setHardfork(e.hardfork),e.eips&&this.setEIPs(e.eips)}static custom(e){var t;let r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};const o=null!==(t=r.baseChain)&&void 0!==t?t:"mainnet",a={...g._getChainParams(o)};if(a.name="custom-chain","string"!==typeof e)return new g({chain:{...a,...e},...r});if(e===u.CustomChain.PolygonMainnet)return g.custom({name:u.CustomChain.PolygonMainnet,chainId:137,networkId:137},r);if(e===u.CustomChain.PolygonMumbai)return g.custom({name:u.CustomChain.PolygonMumbai,chainId:80001,networkId:80001},r);if(e===u.CustomChain.ArbitrumRinkebyTestnet)return g.custom({name:u.CustomChain.ArbitrumRinkebyTestnet,chainId:421611,networkId:421611},r);if(e===u.CustomChain.ArbitrumOne)return g.custom({name:u.CustomChain.ArbitrumOne,chainId:42161,networkId:42161},r);if(e===u.CustomChain.xDaiChain)return g.custom({name:u.CustomChain.xDaiChain,chainId:100,networkId:100},r);if(e===u.CustomChain.OptimisticKovan)return g.custom({name:u.CustomChain.OptimisticKovan,chainId:69,networkId:69},{hardfork:u.Hardfork.Berlin,...r});if(e===u.CustomChain.OptimisticEthereum)return g.custom({name:u.CustomChain.OptimisticEthereum,chainId:10,networkId:10},{hardfork:u.Hardfork.Berlin,...r});throw new Error("Custom chain ".concat(e," not supported"))}static fromGethGenesis(e,t){var r;let{chain:o,eips:a,genesisHash:i,hardfork:s,mergeForkIdPostMerge:n}=t;const c=(0,p.parseGethGenesis)(e,o,n),d=new g({chain:null!==(r=c.name)&&void 0!==r?r:"custom",customChains:[c],eips:a,hardfork:null!==s&&void 0!==s?s:c.hardfork});return void 0!==i&&d.setForkHashes(i),d}static isSupportedChainId(e){const t=this._getInitializedChains();return Boolean(t.names[e.toString()])}static _getChainParams(e,t){const r=this._getInitializedChains(t);if("number"===typeof e||"bigint"===typeof e){if(e=e.toString(),r.names[e]){return r[r.names[e]]}throw new Error("Chain with ID ".concat(e," not supported"))}if(void 0!==r[e])return r[e];throw new Error("Chain with name ".concat(e," not supported"))}setChain(e){if("number"===typeof e||"bigint"===typeof e||"string"===typeof e)this._chainParams=g._getChainParams(e,this._customChains);else{if("object"!==typeof e)throw new Error("Wrong input format");{if(this._customChains.length>0)throw new Error("Chain must be a string, number, or bigint when initialized with customChains passed in");const t=["networkId","genesis","hardforks","bootstrapNodes"];for(const r of t)if(!(r in e))throw new Error("Missing required chain parameter: ".concat(r));this._chainParams=e}}for(const t of this.hardforks())if(void 0===t.block)throw new Error("Hardfork cannot have undefined block number");return this._chainParams}setHardfork(e){let t=!1;for(const r of this.HARDFORK_CHANGES)r[0]===e&&(this._hardfork!==e&&(this._hardfork=e,this.emit("hardforkChanged",e)),t=!0);if(!t)throw new Error("Hardfork with name ".concat(e," not supported"))}getHardforkByBlockNumber(e,t,r){e=(0,a.toType)(e,a.TypeOutput.BigInt),t=(0,a.toType)(t,a.TypeOutput.BigInt),r=(0,a.toType)(r,a.TypeOutput.Number);const o=this.hardforks().filter((e=>null!==e.block||null!==e.ttd&&void 0!==e.ttd||void 0!==e.timestamp)),i=o.findIndex((e=>null!==e.ttd&&void 0!==e.ttd));if(o.slice(i+1).findIndex((e=>null!==e.ttd&&void 0!==e.ttd))>=0)throw Error("More than one merge hardforks found with ttd specified");let s=o.findIndex((t=>null!==t.block&&t.block>e||void 0!==r&&Number(t.timestamp)>r));if(-1===s)s=o.length;else if(0===s)throw Error("Must have at least one hardfork at block 0");if(void 0===r){s-=o.slice(0,s).reverse().findIndex((e=>null!==e.block||void 0!==e.ttd))}if(s-=1,null===o[s].block&&void 0===o[s].timestamp)(void 0===t||null===t||BigInt(o[s].ttd)>t)&&(s-=1);else if(i>=0&&void 0!==t&&null!==t){if(s>=i&&BigInt(o[i].ttd)>t)throw Error("Maximum HF determined by total difficulty is lower than the block number HF");if(s<i&&BigInt(o[i].ttd)<=t)throw Error("HF determined by block number is lower than the minimum total difficulty HF")}const n=s;for(;s<o.length-1&&(o[s].block===o[s+1].block&&o[s].timestamp===o[s+1].timestamp);s++);if(r){if(o.slice(0,n).reduce(((e,t)=>{var r;return Math.max(Number(null!==(r=t.timestamp)&&void 0!==r?r:"0"),e)}),0)>r)throw Error("Maximum HF determined by timestamp is lower than the block number/ttd HF");if(o.slice(s+1).reduce(((e,t)=>{var o;return Math.min(Number(null!==(o=t.timestamp)&&void 0!==o?o:r),e)}),r)<r)throw Error("Maximum HF determined by block number/ttd is lower than timestamp HF")}return o[s].name}setHardforkByBlockNumber(e,t,r){const o=this.getHardforkByBlockNumber(e,t,r);return this.setHardfork(o),o}_getHardfork(e){const t=this.hardforks();for(const r of t)if(r.name===e)return r;return null}setEIPs(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];for(const t of e){if(!(t in h.EIPs))throw new Error("".concat(t," not supported"));const r=this.gteHardfork(h.EIPs[t].minimumHardfork);if(!r)throw new Error("".concat(t," cannot be activated on hardfork ").concat(this.hardfork(),", minimumHardfork: ").concat(r));if(void 0!==h.EIPs[t].requiredEIPs)for(const o of h.EIPs[t].requiredEIPs)if(!e.includes(o)&&!this.isActivatedEIP(o))throw new Error("".concat(t," requires EIP ").concat(o,", but is not included in the EIP list"))}this._eips=e}param(e,t){let r;for(const o of this._eips)if(r=this.paramByEIP(e,t,o),void 0!==r)return r;return this.paramByHardfork(e,t,this._hardfork)}paramByHardfork(e,t,r){var o;let a=null;for(const i of this.HARDFORK_CHANGES){if("eips"in i[1]){const r=i[1].eips;for(const o of r){const r=this.paramByEIP(e,t,o);a="bigint"===typeof r?r:a}}else{if(void 0===i[1][e])throw new Error("Topic ".concat(e," not defined"));void 0!==i[1][e][t]&&(a=i[1][e][t].v)}if(i[0]===r)break}return BigInt(null!==(o=a)&&void 0!==o?o:0)}paramByEIP(e,t,r){if(!(r in h.EIPs))throw new Error("".concat(r," not supported"));const o=h.EIPs[r];if(!(e in o))throw new Error("Topic ".concat(e," not defined"));if(void 0===o[e][t])return;const a=o[e][t].v;return BigInt(a)}paramByBlock(e,t,r,o,a){const i=this.getHardforkByBlockNumber(r,o,a);return this.paramByHardfork(e,t,i)}isActivatedEIP(e){if(this.eips().includes(e))return!0;for(const t of this.HARDFORK_CHANGES){const r=t[1];if(this.gteHardfork(r.name)&&"eips"in r&&r.eips.includes(e))return!0}return!1}hardforkIsActiveOnBlock(e,t){var r;t=(0,a.toType)(t,a.TypeOutput.BigInt),e=null!==(r=e)&&void 0!==r?r:this._hardfork;const o=this.hardforkBlock(e);return"bigint"===typeof o&&o!==BigInt(0)&&t>=o}activeOnBlock(e){return this.hardforkIsActiveOnBlock(null,e)}hardforkGteHardfork(e,t){var r;e=null!==(r=e)&&void 0!==r?r:this._hardfork;const o=this.hardforks();let a=-1,i=-1,s=0;for(const n of o)n.name===e&&(a=s),n.name===t&&(i=s),s+=1;return a>=i&&-1!==i}gteHardfork(e){return this.hardforkGteHardfork(null,e)}hardforkBlock(e){var t,r;e=null!==(t=e)&&void 0!==t?t:this._hardfork;const o=null===(r=this._getHardfork(e))||void 0===r?void 0:r.block;return void 0===o||null===o?null:BigInt(o)}hardforkTimestamp(e){var t,r;e=null!==(t=e)&&void 0!==t?t:this._hardfork;const o=null===(r=this._getHardfork(e))||void 0===r?void 0:r.timestamp;return void 0===o||null===o?null:BigInt(o)}eipBlock(e){for(const t of this.HARDFORK_CHANGES){const r=t[1];if("eips"in r&&r.eips.includes(e))return this.hardforkBlock(t[0])}return null}hardforkTTD(e){var t,r;e=null!==(t=e)&&void 0!==t?t:this._hardfork;const o=null===(r=this._getHardfork(e))||void 0===r?void 0:r.ttd;return void 0===o||null===o?null:BigInt(o)}isHardforkBlock(e,t){var r;e=(0,a.toType)(e,a.TypeOutput.BigInt),t=null!==(r=t)&&void 0!==r?r:this._hardfork;const o=this.hardforkBlock(t);return"bigint"===typeof o&&o!==BigInt(0)&&o===e}nextHardforkBlockOrTimestamp(e){var t,r,o;e=null!==(t=e)&&void 0!==t?t:this._hardfork;const a=this.hardforks();let i=a.findIndex((t=>t.name===e));if(e===u.Hardfork.Merge&&(i-=1),i<0)return null;let s=null!==(r=a[i].timestamp)&&void 0!==r?r:a[i].block;s=null!==s&&void 0!==s?Number(s):null;const n=a.slice(i+1).find((e=>{var t;let r=null!==(t=e.timestamp)&&void 0!==t?t:e.block;return r=null!==r&&void 0!==r?Number(r):null,e.name!==u.Hardfork.Merge&&null!==r&&void 0!==r&&r!==s}));if(void 0===n)return null;const c=null!==(o=n.timestamp)&&void 0!==o?o:n.block;return null===c||void 0===c?null:BigInt(c)}nextHardforkBlock(e){var t;e=null!==(t=e)&&void 0!==t?t:this._hardfork;let r=this.hardforkBlock(e);if(null===r&&e===u.Hardfork.Merge){const e=this.hardforks(),t=e.findIndex((e=>null!==e.ttd&&void 0!==e.ttd));if(t<0)throw Error("Merge hardfork should have been found");r=this.hardforkBlock(e[t-1].name)}if(null===r)return null;return this.hardforks().reduce(((e,t)=>{const o=BigInt(null===t.block||void 0!==t.ttd&&null!==t.ttd?0:t.block);return o>r&&null===e?o:e}),null)}isNextHardforkBlock(e,t){var r;e=(0,a.toType)(e,a.TypeOutput.BigInt),t=null!==(r=t)&&void 0!==r?r:this._hardfork;const o=this.nextHardforkBlock(t);return null!==o&&o===e}_calcForkHash(e,t){let r=o.alloc(0),s=0;for(const a of this.hardforks()){const{block:t,timestamp:i,name:n}=a;let c=null!==i&&void 0!==i?i:t;if(c=null!==c?Number(c):null,"number"===typeof c&&0!==c&&c!==s&&n!==u.Hardfork.Merge){const e=o.from(c.toString(16).padStart(16,"0"),"hex");r=o.concat([r,e]),s=c}if(a.name===e)break}const n=o.concat([t,r]),c=(0,a.intToBuffer)((0,i.buf)(n)>>>0).toString("hex");return"0x".concat(c)}forkHash(e,t){var r;e=null!==(r=e)&&void 0!==r?r:this._hardfork;const o=this._getHardfork(e);if(null===o||null===(null===o||void 0===o?void 0:o.block)&&void 0===(null===o||void 0===o?void 0:o.timestamp)&&void 0===(null===o||void 0===o?void 0:o.ttd)){throw new Error("No fork hash calculation possible for future hardfork")}if(null!==(null===o||void 0===o?void 0:o.forkHash)&&void 0!==(null===o||void 0===o?void 0:o.forkHash))return o.forkHash;if(!t)throw new Error("genesisHash required for forkHash calculation");return this._calcForkHash(e,t)}hardforkForForkHash(e){const t=this.hardforks().filter((t=>t.forkHash===e));return t.length>=1?t[t.length-1]:null}setForkHashes(e){for(const r of this.hardforks()){var t;const o=null!==(t=r.timestamp)&&void 0!==t?t:r.block;null!==r.forkHash&&void 0!==r.forkHash||(null===o||void 0===o)&&"undefined"===typeof r.ttd||(r.forkHash=this.forkHash(r.name,e))}}genesis(){return this._chainParams.genesis}hardforks(){return this._chainParams.hardforks}bootstrapNodes(){return this._chainParams.bootstrapNodes}dnsNetworks(){return this._chainParams.dnsNetworks}hardfork(){return this._hardfork}chainId(){return BigInt(this._chainParams.chainId)}chainName(){return this._chainParams.name}networkId(){return BigInt(this._chainParams.networkId)}eips(){return this._eips}consensusType(){var e;const t=this.hardfork();let r;for(const o of this.HARDFORK_CHANGES)if("consensus"in o[1]&&(r=o[1].consensus.type),o[0]===t)break;return null!==(e=r)&&void 0!==e?e:this._chainParams.consensus.type}consensusAlgorithm(){var e;const t=this.hardfork();let r;for(const o of this.HARDFORK_CHANGES)if("consensus"in o[1]&&(r=o[1].consensus.algorithm),o[0]===t)break;return null!==(e=r)&&void 0!==e?e:this._chainParams.consensus.algorithm}consensusConfig(){var e,t;const r=this.hardfork();let o;for(const a of this.HARDFORK_CHANGES)if("consensus"in a[1]&&(o=a[1].consensus[a[1].consensus.algorithm]),a[0]===r)break;return null!==(e=null!==(t=o)&&void 0!==t?t:this._chainParams.consensus[this.consensusAlgorithm()])&&void 0!==e?e:{}}copy(){const e=Object.assign(Object.create(Object.getPrototypeOf(this)),this);return e.removeAllListeners(),e}static _getInitializedChains(e){const t={};for(const[o,a]of Object.entries(u.Chain))t[a]=o.toLowerCase();const r={mainnet:c,ropsten:f,rinkeby:d,goerli:n,sepolia:l};if(e)for(const o of e){const{name:e}=o;t[o.chainId.toString()]=e,r[e]=o}return r.names=t,r}}t.Common=g},64709:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.EIPs=void 0,t.EIPs={1153:r(27303),1559:r(57346),2315:r(39774),2537:r(16928),2565:r(78143),2718:r(45620),2929:r(93689),2930:r(58631),3074:r(16234),3198:r(37079),3529:r(88179),3540:r(48803),3541:r(812),3554:r(81884),3607:r(12887),3651:r(99349),3670:r(92914),3675:r(6131),3855:r(86035),3860:r(19331),4345:r(85878),4399:r(84648),4844:r(16786),4895:r(1391),5133:r(21471)}},1184:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CustomChain=t.ConsensusAlgorithm=t.ConsensusType=t.Hardfork=t.Chain=void 0,function(e){e[e.Mainnet=1]="Mainnet",e[e.Ropsten=3]="Ropsten",e[e.Rinkeby=4]="Rinkeby",e[e.Goerli=5]="Goerli",e[e.Sepolia=11155111]="Sepolia"}(t.Chain||(t.Chain={})),function(e){e.Chainstart="chainstart",e.Homestead="homestead",e.Dao="dao",e.TangerineWhistle="tangerineWhistle",e.SpuriousDragon="spuriousDragon",e.Byzantium="byzantium",e.Constantinople="constantinople",e.Petersburg="petersburg",e.Istanbul="istanbul",e.MuirGlacier="muirGlacier",e.Berlin="berlin",e.London="london",e.ArrowGlacier="arrowGlacier",e.GrayGlacier="grayGlacier",e.MergeForkIdTransition="mergeForkIdTransition",e.Merge="merge",e.Shanghai="shanghai",e.ShardingForkDev="shardingFork"}(t.Hardfork||(t.Hardfork={})),function(e){e.ProofOfStake="pos",e.ProofOfWork="pow",e.ProofOfAuthority="poa"}(t.ConsensusType||(t.ConsensusType={})),function(e){e.Ethash="ethash",e.Clique="clique",e.Casper="casper"}(t.ConsensusAlgorithm||(t.ConsensusAlgorithm={})),function(e){e.PolygonMainnet="polygon-mainnet",e.PolygonMumbai="polygon-mumbai",e.ArbitrumRinkebyTestnet="arbitrum-rinkeby-testnet",e.ArbitrumOne="arbitrum-one",e.xDaiChain="x-dai-chain",e.OptimisticKovan="optimistic-kovan",e.OptimisticEthereum="optimistic-ethereum"}(t.CustomChain||(t.CustomChain={}))},59097:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.hardforks=void 0,t.hardforks={chainstart:r(41220),homestead:r(35109),dao:r(39684),tangerineWhistle:r(28092),spuriousDragon:r(47466),byzantium:r(25239),constantinople:r(72175),petersburg:r(73983),istanbul:r(97947),muirGlacier:r(42119),berlin:r(63430),london:r(22354),shanghai:r(9988),arrowGlacier:r(28748),grayGlacier:r(37713),mergeForkIdTransition:r(70953),merge:r(71722),shardingFork:r(2732)}},22924:function(e,t,r){"use strict";var o=this&&this.__createBinding||(Object.create?function(e,t,r,o){void 0===o&&(o=r);var a=Object.getOwnPropertyDescriptor(t,r);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,o,a)}:function(e,t,r,o){void 0===o&&(o=r),e[o]=t[r]}),a=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||o(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),a(r(99275),t),a(r(1184),t),a(r(12753),t),a(r(35078),t)},12753:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},35078:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.parseGethGenesis=void 0;const o=r(28922),a=r(1184);function i(e){var t,r;let i=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];const{name:s,config:n,difficulty:c,mixHash:d,gasLimit:f,coinbase:l,baseFeePerGas:h}=e;let{extraData:u,timestamp:m,nonce:p}=e;const g=Number(m),{chainId:b}=n;if(""===u&&(u="0x"),(0,o.isHexPrefixed)(m)||(m=(0,o.intToHex)(parseInt(m))),18!==p.length&&(p=function(e){return e&&"0x0"!==e?(0,o.isHexPrefixed)(e)?"0x"+(0,o.stripHexPrefix)(e).padStart(16,"0"):"0x"+e.padStart(16,"0"):"0x0000000000000000"}(p)),n.eip155Block!==n.eip158Block)throw new Error("EIP155 block number must equal EIP 158 block number since both are part of SpuriousDragon hardfork and the client only supports activating the full hardfork");const v={name:s,chainId:b,networkId:b,genesis:{timestamp:m,gasLimit:parseInt(f),difficulty:parseInt(c),nonce:p,extraData:u,mixHash:d,coinbase:l,baseFeePerGas:h},hardfork:void 0,hardforks:[],bootstrapNodes:[],consensus:void 0!==n.clique?{type:"poa",algorithm:"clique",clique:{period:null!==(t=n.clique.period)&&void 0!==t?t:n.clique.blockperiodseconds,epoch:null!==(r=n.clique.epoch)&&void 0!==r?r:n.clique.epochlength}}:{type:"pow",algorithm:"ethash",ethash:{}}},k={[a.Hardfork.Homestead]:{name:"homesteadBlock"},[a.Hardfork.Dao]:{name:"daoForkBlock"},[a.Hardfork.TangerineWhistle]:{name:"eip150Block"},[a.Hardfork.SpuriousDragon]:{name:"eip155Block"},[a.Hardfork.Byzantium]:{name:"byzantiumBlock"},[a.Hardfork.Constantinople]:{name:"constantinopleBlock"},[a.Hardfork.Petersburg]:{name:"petersburgBlock"},[a.Hardfork.Istanbul]:{name:"istanbulBlock"},[a.Hardfork.MuirGlacier]:{name:"muirGlacierBlock"},[a.Hardfork.Berlin]:{name:"berlinBlock"},[a.Hardfork.London]:{name:"londonBlock"},[a.Hardfork.MergeForkIdTransition]:{name:"mergeForkBlock",postMerge:i},[a.Hardfork.Shanghai]:{name:"shanghaiTime",postMerge:!0,isTimestamp:!0},[a.Hardfork.ShardingForkDev]:{name:"shardingForkTime",postMerge:!0,isTimestamp:!0}},y=Object.keys(k).reduce(((e,t)=>(e[k[t].name]=t,e)),{}),P=Object.keys(n).filter((e=>void 0!==y[e]&&void 0!==n[e]&&null!==n[e]));if(v.hardforks=P.map((e=>({name:y[e],block:!0===k[y[e]].isTimestamp||"number"!==typeof n[e]?null:n[e],timestamp:!0===k[y[e]].isTimestamp&&"number"===typeof n[e]?n[e]:void 0}))).filter((e=>null!==e.block||void 0!==e.timestamp)),v.hardforks.sort((function(e,t){var r,o;return(null!==(r=e.block)&&void 0!==r?r:1/0)-(null!==(o=t.block)&&void 0!==o?o:1/0)})),v.hardforks.sort((function(e,t){var r,o;return(null!==(r=e.timestamp)&&void 0!==r?r:g)-(null!==(o=t.timestamp)&&void 0!==o?o:g)})),void 0!==n.terminalTotalDifficulty){const e={name:a.Hardfork.Merge,ttd:n.terminalTotalDifficulty,block:null},t=v.hardforks.findIndex((e=>{var t;return!0===(null===(t=k[e.name])||void 0===t?void 0:t.postMerge)}));-1!==t?v.hardforks.splice(t,0,e):v.hardforks.push(e)}const E=v.hardforks.length>0?v.hardforks.slice(-1)[0]:void 0;return v.hardfork=null===E||void 0===E?void 0:E.name,v.hardforks.unshift({name:a.Hardfork.Chainstart,block:0}),v}t.parseGethGenesis=function(e,t,r){try{if(["config","difficulty","gasLimit","alloc"].some((t=>!(t in e))))throw new Error("Invalid format, expected geth genesis fields missing");return void 0!==t&&(e.name=t),i(e,r)}catch(o){throw new Error("Error parsing parameters file: ".concat(o.message))}}},33685:(e,t)=>{var r;r=function(e){e.version="1.2.2";var t=function(){for(var e=0,t=new Array(256),r=0;256!=r;++r)e=1&(e=1&(e=1&(e=1&(e=1&(e=1&(e=1&(e=1&(e=r)?-306674912^e>>>1:e>>>1)?-306674912^e>>>1:e>>>1)?-306674912^e>>>1:e>>>1)?-306674912^e>>>1:e>>>1)?-306674912^e>>>1:e>>>1)?-306674912^e>>>1:e>>>1)?-306674912^e>>>1:e>>>1)?-306674912^e>>>1:e>>>1,t[r]=e;return"undefined"!==typeof Int32Array?new Int32Array(t):t}(),r=function(e){var t=0,r=0,o=0,a="undefined"!==typeof Int32Array?new Int32Array(4096):new Array(4096);for(o=0;256!=o;++o)a[o]=e[o];for(o=0;256!=o;++o)for(r=e[o],t=256+o;t<4096;t+=256)r=a[t]=r>>>8^e[255&r];var i=[];for(o=1;16!=o;++o)i[o-1]="undefined"!==typeof Int32Array?a.subarray(256*o,256*o+256):a.slice(256*o,256*o+256);return i}(t),o=r[0],a=r[1],i=r[2],s=r[3],n=r[4],c=r[5],d=r[6],f=r[7],l=r[8],h=r[9],u=r[10],m=r[11],p=r[12],g=r[13],b=r[14];e.table=t,e.bstr=function(e,r){for(var o=-1^r,a=0,i=e.length;a<i;)o=o>>>8^t[255&(o^e.charCodeAt(a++))];return~o},e.buf=function(e,r){for(var v=-1^r,k=e.length-15,y=0;y<k;)v=b[e[y++]^255&v]^g[e[y++]^v>>8&255]^p[e[y++]^v>>16&255]^m[e[y++]^v>>>24]^u[e[y++]]^h[e[y++]]^l[e[y++]]^f[e[y++]]^d[e[y++]]^c[e[y++]]^n[e[y++]]^s[e[y++]]^i[e[y++]]^a[e[y++]]^o[e[y++]]^t[e[y++]];for(k+=15;y<k;)v=v>>>8^t[255&(v^e[y++])];return~v},e.str=function(e,r){for(var o=-1^r,a=0,i=e.length,s=0,n=0;a<i;)(s=e.charCodeAt(a++))<128?o=o>>>8^t[255&(o^s)]:s<2048?o=(o=o>>>8^t[255&(o^(192|s>>6&31))])>>>8^t[255&(o^(128|63&s))]:s>=55296&&s<57344?(s=64+(1023&s),n=1023&e.charCodeAt(a++),o=(o=(o=(o=o>>>8^t[255&(o^(240|s>>8&7))])>>>8^t[255&(o^(128|s>>2&63))])>>>8^t[255&(o^(128|n>>6&15|(3&s)<<4))])>>>8^t[255&(o^(128|63&n))]):o=(o=(o=o>>>8^t[255&(o^(224|s>>12&15))])>>>8^t[255&(o^(128|s>>6&63))])>>>8^t[255&(o^(128|63&s))];return~o}},"undefined"===typeof DO_NOT_EXPORT_CRC?r(t):r({})},50109:(e,t,r)=>{"use strict";var o=r(53137),a=o.ValidatorResult,i=o.SchemaError,s={ignoreProperties:{id:!0,default:!0,description:!0,title:!0,additionalItems:!0,then:!0,else:!0,$schema:!0,$ref:!0,extends:!0}},n=s.validators={};function c(e,t,r,o,a){var i=t.throwError,s=t.throwAll;t.throwError=!1,t.throwAll=!1;var n=this.validateSchema(e,a,t,r);return t.throwError=i,t.throwAll=s,!n.valid&&o instanceof Function&&o(n),n.valid}function d(e,t){if(Object.hasOwnProperty.call(e,t))return e[t];if(t in e)for(;e=Object.getPrototypeOf(e);)if(Object.propertyIsEnumerable.call(e,t))return e[t]}function f(e,t,r,o,a,i){if(this.types.object(e)&&(!t.properties||void 0===t.properties[a]))if(!1===t.additionalProperties)i.addError({name:"additionalProperties",argument:a,message:"is not allowed to have the additional property "+JSON.stringify(a)});else{var s=t.additionalProperties||{};"function"==typeof r.preValidateProperty&&r.preValidateProperty(e,a,s,r,o);var n=this.validateSchema(e[a],s,r,o.makeChild(s,a));n.instance!==i.instance[a]&&(i.instance[a]=n.instance),i.importErrors(n)}}n.type=function(e,t,r,o){if(void 0===e)return null;var i=new a(e,t,r,o),s=Array.isArray(t.type)?t.type:[t.type];if(!s.some(this.testType.bind(this,e,t,r,o))){var n=s.map((function(e){if(e){var t=e.$id||e.id;return t?"<"+t+">":e+""}}));i.addError({name:"type",argument:n,message:"is not of a type(s) "+n})}return i},n.anyOf=function(e,t,r,o){if(void 0===e)return null;var s=new a(e,t,r,o),n=new a(e,t,r,o);if(!Array.isArray(t.anyOf))throw new i("anyOf must be an array");if(!t.anyOf.some(c.bind(this,e,r,o,(function(e){n.importErrors(e)})))){var d=t.anyOf.map((function(e,t){var r=e.$id||e.id;return r?"<"+r+">":e.title&&JSON.stringify(e.title)||e.$ref&&"<"+e.$ref+">"||"[subschema "+t+"]"}));r.nestedErrors&&s.importErrors(n),s.addError({name:"anyOf",argument:d,message:"is not any of "+d.join(",")})}return s},n.allOf=function(e,t,r,o){if(void 0===e)return null;if(!Array.isArray(t.allOf))throw new i("allOf must be an array");var s=new a(e,t,r,o),n=this;return t.allOf.forEach((function(t,a){var i=n.validateSchema(e,t,r,o);if(!i.valid){var c=t.$id||t.id||t.title&&JSON.stringify(t.title)||t.$ref&&"<"+t.$ref+">"||"[subschema "+a+"]";s.addError({name:"allOf",argument:{id:c,length:i.errors.length,valid:i},message:"does not match allOf schema "+c+" with "+i.errors.length+" error[s]:"}),s.importErrors(i)}})),s},n.oneOf=function(e,t,r,o){if(void 0===e)return null;if(!Array.isArray(t.oneOf))throw new i("oneOf must be an array");var s=new a(e,t,r,o),n=new a(e,t,r,o),d=t.oneOf.filter(c.bind(this,e,r,o,(function(e){n.importErrors(e)}))).length,f=t.oneOf.map((function(e,t){return e.$id||e.id||e.title&&JSON.stringify(e.title)||e.$ref&&"<"+e.$ref+">"||"[subschema "+t+"]"}));return 1!==d&&(r.nestedErrors&&s.importErrors(n),s.addError({name:"oneOf",argument:f,message:"is not exactly one from "+f.join(",")})),s},n.if=function(e,t,r,i){if(void 0===e)return null;if(!o.isSchema(t.if))throw new Error('Expected "if" keyword to be a schema');var s,n=c.call(this,e,r,i,null,t.if),d=new a(e,t,r,i);if(n){if(void 0===t.then)return;if(!o.isSchema(t.then))throw new Error('Expected "then" keyword to be a schema');s=this.validateSchema(e,t.then,r,i.makeChild(t.then)),d.importErrors(s)}else{if(void 0===t.else)return;if(!o.isSchema(t.else))throw new Error('Expected "else" keyword to be a schema');s=this.validateSchema(e,t.else,r,i.makeChild(t.else)),d.importErrors(s)}return d},n.propertyNames=function(e,t,r,s){if(this.types.object(e)){var n=new a(e,t,r,s),c=void 0!==t.propertyNames?t.propertyNames:{};if(!o.isSchema(c))throw new i('Expected "propertyNames" to be a schema (object or boolean)');for(var f in e)if(void 0!==d(e,f)){var l=this.validateSchema(f,c,r,s.makeChild(c));n.importErrors(l)}return n}},n.properties=function(e,t,r,o){if(this.types.object(e)){var s=new a(e,t,r,o),n=t.properties||{};for(var c in n){var f=n[c];if(void 0!==f){if(null===f)throw new i('Unexpected null, expected schema in "properties"');"function"==typeof r.preValidateProperty&&r.preValidateProperty(e,c,f,r,o);var l=d(e,c),h=this.validateSchema(l,f,r,o.makeChild(f,c));h.instance!==s.instance[c]&&(s.instance[c]=h.instance),s.importErrors(h)}}return s}},n.patternProperties=function(e,t,r,o){if(this.types.object(e)){var s=new a(e,t,r,o),n=t.patternProperties||{};for(var c in e){var d=!0;for(var l in n){var h=n[l];if(void 0!==h){if(null===h)throw new i('Unexpected null, expected schema in "patternProperties"');try{var u=new RegExp(l,"u")}catch(p){u=new RegExp(l)}if(u.test(c)){d=!1,"function"==typeof r.preValidateProperty&&r.preValidateProperty(e,c,h,r,o);var m=this.validateSchema(e[c],h,r,o.makeChild(h,c));m.instance!==s.instance[c]&&(s.instance[c]=m.instance),s.importErrors(m)}}}d&&f.call(this,e,t,r,o,c,s)}return s}},n.additionalProperties=function(e,t,r,o){if(this.types.object(e)){if(t.patternProperties)return null;var i=new a(e,t,r,o);for(var s in e)f.call(this,e,t,r,o,s,i);return i}},n.minProperties=function(e,t,r,o){if(this.types.object(e)){var i=new a(e,t,r,o);return Object.keys(e).length>=t.minProperties||i.addError({name:"minProperties",argument:t.minProperties,message:"does not meet minimum property length of "+t.minProperties}),i}},n.maxProperties=function(e,t,r,o){if(this.types.object(e)){var i=new a(e,t,r,o);return Object.keys(e).length<=t.maxProperties||i.addError({name:"maxProperties",argument:t.maxProperties,message:"does not meet maximum property length of "+t.maxProperties}),i}},n.items=function(e,t,r,o){var i=this;if(this.types.array(e)&&void 0!==t.items){var s=new a(e,t,r,o);return e.every((function(e,a){if(Array.isArray(t.items))var n=void 0===t.items[a]?t.additionalItems:t.items[a];else n=t.items;if(void 0===n)return!0;if(!1===n)return s.addError({name:"items",message:"additionalItems not permitted"}),!1;var c=i.validateSchema(e,n,r,o.makeChild(n,a));return c.instance!==s.instance[a]&&(s.instance[a]=c.instance),s.importErrors(c),!0})),s}},n.contains=function(e,t,r,i){var s=this;if(this.types.array(e)&&void 0!==t.contains){if(!o.isSchema(t.contains))throw new Error('Expected "contains" keyword to be a schema');var n=new a(e,t,r,i);return!1===e.some((function(e,o){return 0===s.validateSchema(e,t.contains,r,i.makeChild(t.contains,o)).errors.length}))&&n.addError({name:"contains",argument:t.contains,message:"must contain an item matching given schema"}),n}},n.minimum=function(e,t,r,o){if(this.types.number(e)){var i=new a(e,t,r,o);return t.exclusiveMinimum&&!0===t.exclusiveMinimum?e>t.minimum||i.addError({name:"minimum",argument:t.minimum,message:"must be greater than "+t.minimum}):e>=t.minimum||i.addError({name:"minimum",argument:t.minimum,message:"must be greater than or equal to "+t.minimum}),i}},n.maximum=function(e,t,r,o){if(this.types.number(e)){var i=new a(e,t,r,o);return t.exclusiveMaximum&&!0===t.exclusiveMaximum?e<t.maximum||i.addError({name:"maximum",argument:t.maximum,message:"must be less than "+t.maximum}):e<=t.maximum||i.addError({name:"maximum",argument:t.maximum,message:"must be less than or equal to "+t.maximum}),i}},n.exclusiveMinimum=function(e,t,r,o){if("boolean"!==typeof t.exclusiveMinimum&&this.types.number(e)){var i=new a(e,t,r,o);return e>t.exclusiveMinimum||i.addError({name:"exclusiveMinimum",argument:t.exclusiveMinimum,message:"must be strictly greater than "+t.exclusiveMinimum}),i}},n.exclusiveMaximum=function(e,t,r,o){if("boolean"!==typeof t.exclusiveMaximum&&this.types.number(e)){var i=new a(e,t,r,o);return e<t.exclusiveMaximum||i.addError({name:"exclusiveMaximum",argument:t.exclusiveMaximum,message:"must be strictly less than "+t.exclusiveMaximum}),i}};var l=function(e,t,r,s,n,c){if(this.types.number(e)){var d=t[n];if(0==d)throw new i(n+" cannot be zero");var f=new a(e,t,r,s),l=o.getDecimalPlaces(e),h=o.getDecimalPlaces(d),u=Math.max(l,h),m=Math.pow(10,u);return Math.round(e*m)%Math.round(d*m)!==0&&f.addError({name:n,argument:d,message:c+JSON.stringify(d)}),f}};function h(e,t,r){var a,i=r.length;for(a=t+1;a<i;a++)if(o.deepCompareStrict(e,r[a]))return!1;return!0}n.multipleOf=function(e,t,r,o){return l.call(this,e,t,r,o,"multipleOf","is not a multiple of (divisible by) ")},n.divisibleBy=function(e,t,r,o){return l.call(this,e,t,r,o,"divisibleBy","is not divisible by (multiple of) ")},n.required=function(e,t,r,o){var i=new a(e,t,r,o);return void 0===e&&!0===t.required?i.addError({name:"required",message:"is required"}):this.types.object(e)&&Array.isArray(t.required)&&t.required.forEach((function(t){void 0===d(e,t)&&i.addError({name:"required",argument:t,message:"requires property "+JSON.stringify(t)})})),i},n.pattern=function(e,t,r,o){if(this.types.string(e)){var i=new a(e,t,r,o),s=t.pattern;try{var n=new RegExp(s,"u")}catch(c){n=new RegExp(s)}return e.match(n)||i.addError({name:"pattern",argument:t.pattern,message:"does not match pattern "+JSON.stringify(t.pattern.toString())}),i}},n.format=function(e,t,r,i){if(void 0!==e){var s=new a(e,t,r,i);return s.disableFormat||o.isFormat(e,t.format,this)||s.addError({name:"format",argument:t.format,message:"does not conform to the "+JSON.stringify(t.format)+" format"}),s}},n.minLength=function(e,t,r,o){if(this.types.string(e)){var i=new a(e,t,r,o),s=e.match(/[\uDC00-\uDFFF]/g);return e.length-(s?s.length:0)>=t.minLength||i.addError({name:"minLength",argument:t.minLength,message:"does not meet minimum length of "+t.minLength}),i}},n.maxLength=function(e,t,r,o){if(this.types.string(e)){var i=new a(e,t,r,o),s=e.match(/[\uDC00-\uDFFF]/g);return e.length-(s?s.length:0)<=t.maxLength||i.addError({name:"maxLength",argument:t.maxLength,message:"does not meet maximum length of "+t.maxLength}),i}},n.minItems=function(e,t,r,o){if(this.types.array(e)){var i=new a(e,t,r,o);return e.length>=t.minItems||i.addError({name:"minItems",argument:t.minItems,message:"does not meet minimum length of "+t.minItems}),i}},n.maxItems=function(e,t,r,o){if(this.types.array(e)){var i=new a(e,t,r,o);return e.length<=t.maxItems||i.addError({name:"maxItems",argument:t.maxItems,message:"does not meet maximum length of "+t.maxItems}),i}},n.uniqueItems=function(e,t,r,o){if(!0===t.uniqueItems&&this.types.array(e)){var i=new a(e,t,r,o);return e.every(h)||i.addError({name:"uniqueItems",message:"contains duplicate item"}),i}},n.dependencies=function(e,t,r,o){if(this.types.object(e)){var i=new a(e,t,r,o);for(var s in t.dependencies)if(void 0!==e[s]){var n=t.dependencies[s],c=o.makeChild(n,s);if("string"==typeof n&&(n=[n]),Array.isArray(n))n.forEach((function(t){void 0===e[t]&&i.addError({name:"dependencies",argument:c.propertyPath,message:"property "+t+" not found, required by "+c.propertyPath})}));else{var d=this.validateSchema(e,n,r,c);i.instance!==d.instance&&(i.instance=d.instance),d&&d.errors.length&&(i.addError({name:"dependencies",argument:c.propertyPath,message:"does not meet dependency required by "+c.propertyPath}),i.importErrors(d))}}return i}},n.enum=function(e,t,r,s){if(void 0===e)return null;if(!Array.isArray(t.enum))throw new i("enum expects an array",t);var n=new a(e,t,r,s);return t.enum.some(o.deepCompareStrict.bind(null,e))||n.addError({name:"enum",argument:t.enum,message:"is not one of enum values: "+t.enum.map(String).join(",")}),n},n.const=function(e,t,r,i){if(void 0===e)return null;var s=new a(e,t,r,i);return o.deepCompareStrict(t.const,e)||s.addError({name:"const",argument:t.const,message:"does not exactly match expected constant: "+t.const}),s},n.not=n.disallow=function(e,t,r,o){var i=this;if(void 0===e)return null;var s=new a(e,t,r,o),n=t.not||t.disallow;return n?(Array.isArray(n)||(n=[n]),n.forEach((function(a){if(i.testType(e,t,r,o,a)){var n=a&&(a.$id||a.id)||a;s.addError({name:"not",argument:n,message:"is of prohibited type "+n})}})),s):null},e.exports=s},53137:(e,t,r)=>{"use strict";var o=r(12114),a=t.ValidationError=function(e,t,r,o,a,i){if(Array.isArray(o)?(this.path=o,this.property=o.reduce((function(e,t){return e+l(t)}),"instance")):void 0!==o&&(this.property=o),e&&(this.message=e),r){var s=r.$id||r.id;this.schema=s||r}void 0!==t&&(this.instance=t),this.name=a,this.argument=i,this.stack=this.toString()};a.prototype.toString=function(){return this.property+" "+this.message};var i=t.ValidatorResult=function(e,t,r,o){this.instance=e,this.schema=t,this.options=r,this.path=o.path,this.propertyPath=o.propertyPath,this.errors=[],this.throwError=r&&r.throwError,this.throwFirst=r&&r.throwFirst,this.throwAll=r&&r.throwAll,this.disableFormat=r&&!0===r.disableFormat};function s(e,t){return t+": "+e.toString()+"\n"}function n(e){Error.captureStackTrace&&Error.captureStackTrace(this,n),this.instance=e.instance,this.schema=e.schema,this.options=e.options,this.errors=e.errors}i.prototype.addError=function(e){var t;if("string"==typeof e)t=new a(e,this.instance,this.schema,this.path);else{if(!e)throw new Error("Missing error detail");if(!e.message)throw new Error("Missing error message");if(!e.name)throw new Error("Missing validator type");t=new a(e.message,this.instance,this.schema,this.path,e.name,e.argument)}if(this.errors.push(t),this.throwFirst)throw new n(this);if(this.throwError)throw t;return t},i.prototype.importErrors=function(e){"string"==typeof e||e&&e.validatorType?this.addError(e):e&&e.errors&&(this.errors=this.errors.concat(e.errors))},i.prototype.toString=function(e){return this.errors.map(s).join("")},Object.defineProperty(i.prototype,"valid",{get:function(){return!this.errors.length}}),e.exports.ValidatorResultError=n,n.prototype=new Error,n.prototype.constructor=n,n.prototype.name="Validation Error";var c=t.SchemaError=function e(t,r){this.message=t,this.schema=r,Error.call(this,t),Error.captureStackTrace(this,e)};c.prototype=Object.create(Error.prototype,{constructor:{value:c,enumerable:!1},name:{value:"SchemaError",enumerable:!1}});var d=t.SchemaContext=function(e,t,r,o,a){this.schema=e,this.options=t,Array.isArray(r)?(this.path=r,this.propertyPath=r.reduce((function(e,t){return e+l(t)}),"instance")):this.propertyPath=r,this.base=o,this.schemas=a};d.prototype.resolve=function(e){return o.resolve(this.base,e)},d.prototype.makeChild=function(e,t){var r=void 0===t?this.path:this.path.concat([t]),a=e.$id||e.id,i=o.resolve(this.base,a||""),s=new d(e,this.options,r,i,Object.create(this.schemas));return a&&!s.schemas[i]&&(s.schemas[i]=e),s};var f=t.FORMAT_REGEXPS={"date-time":/^\d{4}-(?:0[0-9]{1}|1[0-2]{1})-(3[01]|0[1-9]|[12][0-9])[tT ](2[0-4]|[01][0-9]):([0-5][0-9]):(60|[0-5][0-9])(\.\d+)?([zZ]|[+-]([0-5][0-9]):(60|[0-5][0-9]))$/,date:/^\d{4}-(?:0[0-9]{1}|1[0-2]{1})-(3[01]|0[1-9]|[12][0-9])$/,time:/^(2[0-4]|[01][0-9]):([0-5][0-9]):(60|[0-5][0-9])$/,duration:/P(T\d+(H(\d+M(\d+S)?)?|M(\d+S)?|S)|\d+(D|M(\d+D)?|Y(\d+M(\d+D)?)?)(T\d+(H(\d+M(\d+S)?)?|M(\d+S)?|S))?|\d+W)/i,email:/^(?:[\w\!\#\$\%\&\'\*\+\-\/\=\?\^\`\{\|\}\~]+\.)*[\w\!\#\$\%\&\'\*\+\-\/\=\?\^\`\{\|\}\~]+@(?:(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9\-](?!\.)){0,61}[a-zA-Z0-9]?\.)+[a-zA-Z0-9](?:[a-zA-Z0-9\-](?!$)){0,61}[a-zA-Z0-9]?)|(?:\[(?:(?:[01]?\d{1,2}|2[0-4]\d|25[0-5])\.){3}(?:[01]?\d{1,2}|2[0-4]\d|25[0-5])\]))$/,"idn-email":/^("(?:[!#-\[\]-\u{10FFFF}]|\\[\t -\u{10FFFF}])*"|[!#-'*+\-/-9=?A-Z\^-\u{10FFFF}](?:\.?[!#-'*+\-/-9=?A-Z\^-\u{10FFFF}])*)@([!#-'*+\-/-9=?A-Z\^-\u{10FFFF}](?:\.?[!#-'*+\-/-9=?A-Z\^-\u{10FFFF}])*|\[[!-Z\^-\u{10FFFF}]*\])$/u,"ip-address":/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/,ipv6:/^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$/,uri:/^[a-zA-Z][a-zA-Z0-9+.-]*:[^\s]*$/,"uri-reference":/^(((([A-Za-z][+\-.0-9A-Za-z]*(:%[0-9A-Fa-f]{2}|:[!$&-.0-;=?-Z_a-z~]|[/?])|\?)(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*|([A-Za-z][+\-.0-9A-Za-z]*:?)?)|([A-Za-z][+\-.0-9A-Za-z]*:)?\/((%[0-9A-Fa-f]{2}|\/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~])+|(\[(([Vv][0-9A-Fa-f]+\.[!$&-.0-;=A-Z_a-z~]+)?|[.0-:A-Fa-f]+)\])?)(:\d*)?[/?]|[!$&-.0-;=?-Z_a-z~])(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*|(\/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~])+|(\[(([Vv][0-9A-Fa-f]+\.[!$&-.0-;=A-Z_a-z~]+)?|[.0-:A-Fa-f]+)\])?)(:\d*)?)?))#(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*|(([A-Za-z][+\-.0-9A-Za-z]*)?%[0-9A-Fa-f]{2}|[!$&-.0-9;=@_~]|[A-Za-z][+\-.0-9A-Za-z]*[!$&-*,;=@_~])(%[0-9A-Fa-f]{2}|[!$&-.0-9;=@-Z_a-z~])*((([/?](%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*)?#|[/?])(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*)?|([A-Za-z][+\-.0-9A-Za-z]*(:%[0-9A-Fa-f]{2}|:[!$&-.0-;=?-Z_a-z~]|[/?])|\?)(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*|([A-Za-z][+\-.0-9A-Za-z]*:)?\/((%[0-9A-Fa-f]{2}|\/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~])+|(\[(([Vv][0-9A-Fa-f]+\.[!$&-.0-;=A-Z_a-z~]+)?|[.0-:A-Fa-f]+)\])?)(:\d*)?[/?]|[!$&-.0-;=?-Z_a-z~])(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*|\/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~])+(:\d*)?|(\[(([Vv][0-9A-Fa-f]+\.[!$&-.0-;=A-Z_a-z~]+)?|[.0-:A-Fa-f]+)\])?:\d*|\[(([Vv][0-9A-Fa-f]+\.[!$&-.0-;=A-Z_a-z~]+)?|[.0-:A-Fa-f]+)\])?)?|[A-Za-z][+\-.0-9A-Za-z]*:?)?$/,iri:/^[a-zA-Z][a-zA-Z0-9+.-]*:[^\s]*$/,"iri-reference":/^(((([A-Za-z][+\-.0-9A-Za-z]*(:%[0-9A-Fa-f]{2}|:[!$&-.0-;=?-Z_a-z~-\u{10FFFF}]|[/?])|\?)(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~-\u{10FFFF}])*|([A-Za-z][+\-.0-9A-Za-z]*:?)?)|([A-Za-z][+\-.0-9A-Za-z]*:)?\/((%[0-9A-Fa-f]{2}|\/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~-\u{10FFFF}])+|(\[(([Vv][0-9A-Fa-f]+\.[!$&-.0-;=A-Z_a-z~-\u{10FFFF}]+)?|[.0-:A-Fa-f]+)\])?)(:\d*)?[/?]|[!$&-.0-;=?-Z_a-z~-\u{10FFFF}])(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~-\u{10FFFF}])*|(\/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~-\u{10FFFF}])+|(\[(([Vv][0-9A-Fa-f]+\.[!$&-.0-;=A-Z_a-z~-\u{10FFFF}]+)?|[.0-:A-Fa-f]+)\])?)(:\d*)?)?))#(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~-\u{10FFFF}])*|(([A-Za-z][+\-.0-9A-Za-z]*)?%[0-9A-Fa-f]{2}|[!$&-.0-9;=@_~-\u{10FFFF}]|[A-Za-z][+\-.0-9A-Za-z]*[!$&-*,;=@_~-\u{10FFFF}])(%[0-9A-Fa-f]{2}|[!$&-.0-9;=@-Z_a-z~-\u{10FFFF}])*((([/?](%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~-\u{10FFFF}])*)?#|[/?])(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~-\u{10FFFF}])*)?|([A-Za-z][+\-.0-9A-Za-z]*(:%[0-9A-Fa-f]{2}|:[!$&-.0-;=?-Z_a-z~-\u{10FFFF}]|[/?])|\?)(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~-\u{10FFFF}])*|([A-Za-z][+\-.0-9A-Za-z]*:)?\/((%[0-9A-Fa-f]{2}|\/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~-\u{10FFFF}])+|(\[(([Vv][0-9A-Fa-f]+\.[!$&-.0-;=A-Z_a-z~-\u{10FFFF}]+)?|[.0-:A-Fa-f]+)\])?)(:\d*)?[/?]|[!$&-.0-;=?-Z_a-z~-\u{10FFFF}])(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~-\u{10FFFF}])*|\/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~-\u{10FFFF}])+(:\d*)?|(\[(([Vv][0-9A-Fa-f]+\.[!$&-.0-;=A-Z_a-z~-\u{10FFFF}]+)?|[.0-:A-Fa-f]+)\])?:\d*|\[(([Vv][0-9A-Fa-f]+\.[!$&-.0-;=A-Z_a-z~-\u{10FFFF}]+)?|[.0-:A-Fa-f]+)\])?)?|[A-Za-z][+\-.0-9A-Za-z]*:?)?$/u,uuid:/^[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}$/i,"uri-template":/(%[0-9a-f]{2}|[!#$&(-;=?@\[\]_a-z~]|\{[!#&+,./;=?@|]?(%[0-9a-f]{2}|[0-9_a-z])(\.?(%[0-9a-f]{2}|[0-9_a-z]))*(:[1-9]\d{0,3}|\*)?(,(%[0-9a-f]{2}|[0-9_a-z])(\.?(%[0-9a-f]{2}|[0-9_a-z]))*(:[1-9]\d{0,3}|\*)?)*\})*/iu,"json-pointer":/^(\/([\x00-\x2e0-@\[-}\x7f]|~[01])*)*$/iu,"relative-json-pointer":/^\d+(#|(\/([\x00-\x2e0-@\[-}\x7f]|~[01])*)*)$/iu,hostname:/^(?=.{1,255}$)[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?(?:\.[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?)*\.?$/,"host-name":/^(?=.{1,255}$)[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?(?:\.[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?)*\.?$/,"utc-millisec":function(e){return"string"===typeof e&&parseFloat(e)===parseInt(e,10)&&!isNaN(e)},regex:function(e){var t=!0;try{new RegExp(e)}catch(r){t=!1}return t},style:/[\r\n\t ]*[^\r\n\t ][^:]*:[\r\n\t ]*[^\r\n\t ;]*[\r\n\t ]*;?/,color:/^(#?([0-9A-Fa-f]{3}){1,2}\b|aqua|black|blue|fuchsia|gray|green|lime|maroon|navy|olive|orange|purple|red|silver|teal|white|yellow|(rgb\(\s*\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\b\s*,\s*\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\b\s*,\s*\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\b\s*\))|(rgb\(\s*(\d?\d%|100%)+\s*,\s*(\d?\d%|100%)+\s*,\s*(\d?\d%|100%)+\s*\)))$/,phone:/^\+(?:[0-9] ?){6,14}[0-9]$/,alpha:/^[a-zA-Z]+$/,alphanumeric:/^[a-zA-Z0-9]+$/};f.regexp=f.regex,f.pattern=f.regex,f.ipv4=f["ip-address"],t.isFormat=function(e,t,r){if("string"===typeof e&&void 0!==f[t]){if(f[t]instanceof RegExp)return f[t].test(e);if("function"===typeof f[t])return f[t](e)}else if(r&&r.customFormats&&"function"===typeof r.customFormats[t])return r.customFormats[t](e);return!0};var l=t.makeSuffix=function(e){return(e=e.toString()).match(/[.\s\[\]]/)||e.match(/^[\d]/)?e.match(/^\d+$/)?"["+e+"]":"["+JSON.stringify(e)+"]":"."+e};function h(e,t,r,o){"object"===typeof r?t[o]=p(e[o],r):-1===e.indexOf(r)&&t.push(r)}function u(e,t,r){t[r]=e[r]}function m(e,t,r,o){"object"===typeof t[o]&&t[o]&&e[o]?r[o]=p(e[o],t[o]):r[o]=t[o]}function p(e,t){var r=Array.isArray(t),o=r&&[]||{};return r?(e=e||[],o=o.concat(e),t.forEach(h.bind(null,e,o))):(e&&"object"===typeof e&&Object.keys(e).forEach(u.bind(null,e,o)),Object.keys(t).forEach(m.bind(null,e,t,o))),o}function g(e){return"/"+encodeURIComponent(e).replace(/~/g,"%7E")}t.deepCompareStrict=function e(t,r){if(typeof t!==typeof r)return!1;if(Array.isArray(t))return!!Array.isArray(r)&&(t.length===r.length&&t.every((function(o,a){return e(t[a],r[a])})));if("object"===typeof t){if(!t||!r)return t===r;var o=Object.keys(t),a=Object.keys(r);return o.length===a.length&&o.every((function(o){return e(t[o],r[o])}))}return t===r},e.exports.deepMerge=p,t.objectGetPath=function(e,t){for(var r,o=t.split("/").slice(1);"string"==typeof(r=o.shift());){var a=decodeURIComponent(r.replace(/~0/,"~").replace(/~1/g,"/"));if(!(a in e))return;e=e[a]}return e},t.encodePath=function(e){return e.map(g).join("")},t.getDecimalPlaces=function(e){var t=0;if(isNaN(e))return t;"number"!==typeof e&&(e=Number(e));var r=e.toString().split("e");if(2===r.length){if("-"!==r[1][0])return t;t=Number(r[1].slice(1))}var o=r[0].split(".");return 2===o.length&&(t+=o[1].length),t},t.isSchema=function(e){return"object"===typeof e&&e||"boolean"===typeof e}},34984:(e,t,r)=>{"use strict";var o=e.exports.Validator=r(54390);e.exports.ValidatorResult=r(53137).ValidatorResult,e.exports.ValidatorResultError=r(53137).ValidatorResultError,e.exports.ValidationError=r(53137).ValidationError,e.exports.SchemaError=r(53137).SchemaError,e.exports.SchemaScanResult=r(98849).SchemaScanResult,e.exports.scan=r(98849).scan,e.exports.validate=function(e,t,r){return(new o).validate(e,t,r)}},98849:(e,t,r)=>{"use strict";var o=r(12114),a=r(53137);function i(e,t){this.id=e,this.ref=t}e.exports.SchemaScanResult=i,e.exports.scan=function(e,t){function r(e,t){if(t&&"object"==typeof t)if(t.$ref){var i=o.resolve(e,t.$ref);d[i]=d[i]?d[i]+1:0}else{var f=t.$id||t.id,l=f?o.resolve(e,f):e;if(l){if(l.indexOf("#")<0&&(l+="#"),c[l]){if(!a.deepCompareStrict(c[l],t))throw new Error("Schema <"+l+"> already exists with different definition");return c[l]}c[l]=t,"#"==l[l.length-1]&&(c[l.substring(0,l.length-1)]=t)}s(l+"/items",Array.isArray(t.items)?t.items:[t.items]),s(l+"/extends",Array.isArray(t.extends)?t.extends:[t.extends]),r(l+"/additionalItems",t.additionalItems),n(l+"/properties",t.properties),r(l+"/additionalProperties",t.additionalProperties),n(l+"/definitions",t.definitions),n(l+"/patternProperties",t.patternProperties),n(l+"/dependencies",t.dependencies),s(l+"/disallow",t.disallow),s(l+"/allOf",t.allOf),s(l+"/anyOf",t.anyOf),s(l+"/oneOf",t.oneOf),r(l+"/not",t.not)}}function s(e,t){if(Array.isArray(t))for(var o=0;o<t.length;o++)r(e+"/"+o,t[o])}function n(e,t){if(t&&"object"==typeof t)for(var o in t)r(e+"/"+o,t[o])}var c={},d={};return r(e,t),new i(c,d)}},54390:(e,t,r)=>{"use strict";var o=r(12114),a=r(50109),i=r(53137),s=r(98849).scan,n=i.ValidatorResult,c=i.ValidatorResultError,d=i.SchemaError,f=i.SchemaContext,l=function e(){this.customFormats=Object.create(e.prototype.customFormats),this.schemas={},this.unresolvedRefs=[],this.types=Object.create(u),this.attributes=Object.create(a.validators)};function h(e){var t="string"===typeof e?e:e.$ref;return"string"==typeof t&&t}l.prototype.customFormats={},l.prototype.schemas=null,l.prototype.types=null,l.prototype.attributes=null,l.prototype.unresolvedRefs=null,l.prototype.addSchema=function(e,t){var r=this;if(!e)return null;var o=s(t||"/",e),a=t||e.$id||e.id;for(var i in o.id)this.schemas[i]=o.id[i];for(var i in o.ref)this.unresolvedRefs.push(i);return this.unresolvedRefs=this.unresolvedRefs.filter((function(e){return"undefined"===typeof r.schemas[e]})),this.schemas[a]},l.prototype.addSubSchemaArray=function(e,t){if(Array.isArray(t))for(var r=0;r<t.length;r++)this.addSubSchema(e,t[r])},l.prototype.addSubSchemaObject=function(e,t){if(t&&"object"==typeof t)for(var r in t)this.addSubSchema(e,t[r])},l.prototype.setSchemas=function(e){this.schemas=e},l.prototype.getSchema=function(e){return this.schemas[e]},l.prototype.validate=function(e,t,r,a){if("boolean"!==typeof t&&"object"!==typeof t||null===t)throw new d("Expected `schema` to be an object or boolean");r||(r={});var i,l=t.$id||t.id,h=o.resolve(r.base||"/",l||"");if(!a){(a=new f(t,r,[],h,Object.create(this.schemas))).schemas[h]||(a.schemas[h]=t);var u=s(h,t);for(var m in u.id){var p=u.id[m];a.schemas[m]=p}}if(r.required&&void 0===e)return(i=new n(e,t,r,a)).addError("is required, but is undefined"),i;if(!(i=this.validateSchema(e,t,r,a)))throw new Error("Result undefined");if(r.throwAll&&i.errors.length)throw new c(i);return i},l.prototype.validateSchema=function(e,t,r,o){var s=new n(e,t,r,o);if("boolean"===typeof t)!0===t?t={}:!1===t&&(t={type:[]});else if(!t)throw new Error("schema is undefined");if(t.extends)if(Array.isArray(t.extends)){var c={schema:t,ctx:o};t.extends.forEach(this.schemaTraverser.bind(this,c)),t=c.schema,c.schema=null,c.ctx=null,c=null}else t=i.deepMerge(t,this.superResolve(t.extends,o));var l=h(t);if(l){var u=this.resolve(t,l,o),m=new f(u.subschema,r,o.path,u.switchSchema,o.schemas);return this.validateSchema(e,u.subschema,r,m)}var p=r&&r.skipAttributes||[];for(var g in t)if(!a.ignoreProperties[g]&&p.indexOf(g)<0){var b=null,v=this.attributes[g];if(v)b=v.call(this,e,t,r,o);else if(!1===r.allowUnknownAttributes)throw new d("Unsupported attribute: "+g,t);b&&s.importErrors(b)}if("function"==typeof r.rewrite){var k=r.rewrite.call(this,e,t,r,o);s.instance=k}return s},l.prototype.schemaTraverser=function(e,t){e.schema=i.deepMerge(e.schema,this.superResolve(t,e.ctx))},l.prototype.superResolve=function(e,t){var r=h(e);return r?this.resolve(e,r,t).subschema:e},l.prototype.resolve=function(e,t,r){if(t=r.resolve(t),r.schemas[t])return{subschema:r.schemas[t],switchSchema:t};var a=o.parse(t),s=a&&a.hash,n=s&&s.length&&t.substr(0,t.length-s.length);if(!n||!r.schemas[n])throw new d("no such schema <"+t+">",e);var c=i.objectGetPath(r.schemas[n],s.substr(1));if(void 0===c)throw new d("no such schema "+s+" located in <"+n+">",e);return{subschema:c,switchSchema:t}},l.prototype.testType=function(e,t,r,o,a){if(void 0!==a){if(null===a)throw new d('Unexpected null in "type" keyword');if("function"==typeof this.types[a])return this.types[a].call(this,e);if(a&&"object"==typeof a){var i=this.validateSchema(e,a,r,o);return void 0===i||!(i&&i.errors.length)}return!0}};var u=l.prototype.types={};u.string=function(e){return"string"==typeof e},u.number=function(e){return"number"==typeof e&&isFinite(e)},u.integer=function(e){return"number"==typeof e&&e%1===0},u.boolean=function(e){return"boolean"==typeof e},u.array=function(e){return Array.isArray(e)},u.null=function(e){return null===e},u.date=function(e){return e instanceof Date},u.any=function(e){return!0},u.object=function(e){return e&&"object"===typeof e&&!Array.isArray(e)&&!(e instanceof Date)},e.exports=l},35228:e=>{"use strict";e.exports=JSON.parse('{"name":"goerli","chainId":5,"networkId":5,"defaultHardfork":"merge","consensus":{"type":"poa","algorithm":"clique","clique":{"period":15,"epoch":30000}},"comment":"Cross-client PoA test network","url":"https://github.com/goerli/testnet","genesis":{"timestamp":"0x5c51a607","gasLimit":10485760,"difficulty":1,"nonce":"0x0000000000000000","extraData":"0x22466c6578692069732061207468696e6722202d204166726900000000000000e0a2bd4258d2768837baa26a28fe71dc079f84c70000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"},"hardforks":[{"name":"chainstart","block":0,"forkHash":"0xa3f5ab08"},{"name":"homestead","block":0,"forkHash":"0xa3f5ab08"},{"name":"tangerineWhistle","block":0,"forkHash":"0xa3f5ab08"},{"name":"spuriousDragon","block":0,"forkHash":"0xa3f5ab08"},{"name":"byzantium","block":0,"forkHash":"0xa3f5ab08"},{"name":"constantinople","block":0,"forkHash":"0xa3f5ab08"},{"name":"petersburg","block":0,"forkHash":"0xa3f5ab08"},{"name":"istanbul","block":1561651,"forkHash":"0xc25efa5c"},{"name":"berlin","block":4460644,"forkHash":"0x757a1c47"},{"name":"london","block":5062605,"forkHash":"0xb8c6299d"},{"//_comment":"The forkHash will remain same as mergeForkIdTransition is post merge, terminal block: https://goerli.etherscan.io/block/7382818","name":"merge","ttd":"10790000","block":7382819,"forkHash":"0xb8c6299d"},{"name":"mergeForkIdTransition","block":null,"forkHash":null},{"name":"shanghai","block":null,"timestamp":"1678832736","forkHash":"0xf9843abf"}],"bootstrapNodes":[{"ip":"51.141.78.53","port":30303,"id":"011f758e6552d105183b1761c5e2dea0111bc20fd5f6422bc7f91e0fabbec9a6595caf6239b37feb773dddd3f87240d99d859431891e4a642cf2a0a9e6cbb98a","location":"","comment":"Upstream bootnode 1"},{"ip":"13.93.54.137","port":30303,"id":"176b9417f511d05b6b2cf3e34b756cf0a7096b3094572a8f6ef4cdcb9d1f9d00683bf0f83347eebdf3b81c3521c2332086d9592802230bf528eaf606a1d9677b","location":"","comment":"Upstream bootnode 2"},{"ip":"94.237.54.114","port":30313,"id":"46add44b9f13965f7b9875ac6b85f016f341012d84f975377573800a863526f4da19ae2c620ec73d11591fa9510e992ecc03ad0751f53cc02f7c7ed6d55c7291","location":"","comment":"Upstream bootnode 3"},{"ip":"18.218.250.66","port":30313,"id":"b5948a2d3e9d486c4d75bf32713221c2bd6cf86463302339299bd227dc2e276cd5a1c7ca4f43a0e9122fe9af884efed563bd2a1fd28661f3b5f5ad7bf1de5949","location":"","comment":"Upstream bootnode 4"},{"ip":"3.11.147.67","port":30303,"id":"a61215641fb8714a373c80edbfa0ea8878243193f57c96eeb44d0bc019ef295abd4e044fd619bfc4c59731a73fb79afe84e9ab6da0c743ceb479cbb6d263fa91","location":"","comment":"Ethereum Foundation bootnode"},{"ip":"51.15.116.226","port":30303,"id":"a869b02cec167211fb4815a82941db2e7ed2936fd90e78619c53eb17753fcf0207463e3419c264e2a1dd8786de0df7e68cf99571ab8aeb7c4e51367ef186b1dd","location":"","comment":"Goerli Initiative bootnode"},{"ip":"51.15.119.157","port":30303,"id":"807b37ee4816ecf407e9112224494b74dd5933625f655962d892f2f0f02d7fbbb3e2a94cf87a96609526f30c998fd71e93e2f53015c558ffc8b03eceaf30ee33","location":"","comment":"Goerli Initiative bootnode"},{"ip":"51.15.119.157","port":40303,"id":"a59e33ccd2b3e52d578f1fbd70c6f9babda2650f0760d6ff3b37742fdcdfdb3defba5d56d315b40c46b70198c7621e63ffa3f987389c7118634b0fefbbdfa7fd","location":"","comment":"Goerli Initiative bootnode"}],"dnsNetworks":["enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.goerli.ethdisco.net"]}')},95941:e=>{"use strict";e.exports=JSON.parse('{"name":"mainnet","chainId":1,"networkId":1,"defaultHardfork":"merge","consensus":{"type":"pow","algorithm":"ethash","ethash":{}},"comment":"The Ethereum main chain","url":"https://ethstats.net/","genesis":{"gasLimit":5000,"difficulty":17179869184,"nonce":"0x0000000000000042","extraData":"0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa"},"hardforks":[{"name":"chainstart","block":0,"forkHash":"0xfc64ec04"},{"name":"homestead","block":1150000,"forkHash":"0x97c2c34c"},{"name":"dao","block":1920000,"forkHash":"0x91d1f948"},{"name":"tangerineWhistle","block":2463000,"forkHash":"0x7a64da13"},{"name":"spuriousDragon","block":2675000,"forkHash":"0x3edd5b10"},{"name":"byzantium","block":4370000,"forkHash":"0xa00bc324"},{"name":"constantinople","block":7280000,"forkHash":"0x668db0af"},{"name":"petersburg","block":7280000,"forkHash":"0x668db0af"},{"name":"istanbul","block":9069000,"forkHash":"0x879d6e30"},{"name":"muirGlacier","block":9200000,"forkHash":"0xe029e991"},{"name":"berlin","block":12244000,"forkHash":"0x0eb440f6"},{"name":"london","block":12965000,"forkHash":"0xb715077d"},{"name":"arrowGlacier","block":13773000,"forkHash":"0x20c327fc"},{"name":"grayGlacier","block":15050000,"forkHash":"0xf0afd0e3"},{"//_comment":"The forkHash will remain same as mergeForkIdTransition is post merge, terminal block: https://etherscan.io/block/15537393","name":"merge","ttd":"58750000000000000000000","block":15537394,"forkHash":"0xf0afd0e3"},{"name":"mergeForkIdTransition","block":null,"forkHash":null},{"name":"shanghai","block":null,"timestamp":"1681338455","forkHash":"0xdce96c2d"}],"bootstrapNodes":[{"ip":"18.138.108.67","port":30303,"id":"d860a01f9722d78051619d1e2351aba3f43f943f6f00718d1b9baa4101932a1f5011f16bb2b1bb35db20d6fe28fa0bf09636d26a87d31de9ec6203eeedb1f666","location":"ap-southeast-1-001","comment":"bootnode-aws-ap-southeast-1-001"},{"ip":"3.209.45.79","port":30303,"id":"22a8232c3abc76a16ae9d6c3b164f98775fe226f0917b0ca871128a74a8e9630b458460865bab457221f1d448dd9791d24c4e5d88786180ac185df813a68d4de","location":"us-east-1-001","comment":"bootnode-aws-us-east-1-001"},{"ip":"65.108.70.101","port":30303,"id":"2b252ab6a1d0f971d9722cb839a42cb81db019ba44c08754628ab4a823487071b5695317c8ccd085219c3a03af063495b2f1da8d18218da2d6a82981b45e6ffc","location":"eu-west-1-001","comment":"bootnode-hetzner-hel"},{"ip":"157.90.35.166","port":30303,"id":"4aeb4ab6c14b23e2c4cfdce879c04b0748a20d8e9b59e25ded2a08143e265c6c25936e74cbc8e641e3312ca288673d91f2f93f8e277de3cfa444ecdaaf982052","location":"eu-central-1-001","comment":"bootnode-hetzner-fsn"}],"dnsNetworks":["enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.mainnet.ethdisco.net"]}')},70785:e=>{"use strict";e.exports=JSON.parse('{"name":"rinkeby","chainId":4,"networkId":4,"defaultHardfork":"london","consensus":{"type":"poa","algorithm":"clique","clique":{"period":15,"epoch":30000}},"comment":"PoA test network","url":"https://www.rinkeby.io","genesis":{"timestamp":"0x58ee40ba","gasLimit":4700000,"difficulty":1,"nonce":"0x0000000000000000","extraData":"0x52657370656374206d7920617574686f7269746168207e452e436172746d616e42eb768f2244c8811c63729a21a3569731535f067ffc57839b00206d1ad20c69a1981b489f772031b279182d99e65703f0076e4812653aab85fca0f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"},"hardforks":[{"name":"chainstart","block":0,"forkHash":"0x3b8e0691"},{"name":"homestead","block":1,"forkHash":"0x60949295"},{"name":"tangerineWhistle","block":2,"forkHash":"0x8bde40dd"},{"name":"spuriousDragon","block":3,"forkHash":"0xcb3a64bb"},{"name":"byzantium","block":1035301,"forkHash":"0x8d748b57"},{"name":"constantinople","block":3660663,"forkHash":"0xe49cab14"},{"name":"petersburg","block":4321234,"forkHash":"0xafec6b27"},{"name":"istanbul","block":5435345,"forkHash":"0xcbdb8838"},{"name":"berlin","block":8290928,"forkHash":"0x6910c8bd"},{"name":"london","block":8897988,"forkHash":"0x8e29f2f3"},{"name":"merge","block":null,"forkHash":null},{"name":"shanghai","block":null,"forkHash":null}],"bootstrapNodes":[{"ip":"52.169.42.101","port":30303,"id":"a24ac7c5484ef4ed0c5eb2d36620ba4e4aa13b8c84684e1b4aab0cebea2ae45cb4d375b77eab56516d34bfbd3c1a833fc51296ff084b770b94fb9028c4d25ccf","location":"","comment":"IE"},{"ip":"52.3.158.184","port":30303,"id":"343149e4feefa15d882d9fe4ac7d88f885bd05ebb735e547f12e12080a9fa07c8014ca6fd7f373123488102fe5e34111f8509cf0b7de3f5b44339c9f25e87cb8","location":"","comment":"INFURA"},{"ip":"159.89.28.211","port":30303,"id":"b6b28890b006743680c52e64e0d16db57f28124885595fa03a562be1d2bf0f3a1da297d56b13da25fb992888fd556d4c1a27b1f39d531bde7de1921c90061cc6","location":"","comment":"AKASHA"}],"dnsNetworks":["enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.rinkeby.ethdisco.net"]}')},65100:e=>{"use strict";e.exports=JSON.parse('{"name":"ropsten","chainId":3,"networkId":3,"defaultHardfork":"merge","consensus":{"type":"pow","algorithm":"ethash","ethash":{}},"comment":"PoW test network","url":"https://github.com/ethereum/ropsten","genesis":{"gasLimit":16777216,"difficulty":1048576,"nonce":"0x0000000000000042","extraData":"0x3535353535353535353535353535353535353535353535353535353535353535"},"hardforks":[{"name":"chainstart","block":0,"forkHash":"0x30c7ddbc"},{"name":"homestead","block":0,"forkHash":"0x30c7ddbc"},{"name":"tangerineWhistle","block":0,"forkHash":"0x30c7ddbc"},{"name":"spuriousDragon","block":10,"forkHash":"0x63760190"},{"name":"byzantium","block":1700000,"forkHash":"0x3ea159c7"},{"name":"constantinople","block":4230000,"forkHash":"0x97b544f3"},{"name":"petersburg","block":4939394,"forkHash":"0xd6e2149b"},{"name":"istanbul","block":6485846,"forkHash":"0x4bc66396"},{"name":"muirGlacier","block":7117117,"forkHash":"0x6727ef90"},{"name":"berlin","block":9812189,"forkHash":"0xa157d377"},{"name":"london","block":10499401,"forkHash":"0x7119b6b3"},{"//_comment":"The forkHash will remain same as mergeForkIdTransition is post merge","name":"merge","ttd":"50000000000000000","block":null,"forkHash":"0x7119b6b3"},{"name":"mergeForkIdTransition","block":null,"forkHash":null},{"name":"shanghai","block":null,"forkHash":null}],"bootstrapNodes":[{"ip":"52.176.7.10","port":30303,"id":"30b7ab30a01c124a6cceca36863ece12c4f5fa68e3ba9b0b51407ccc002eeed3b3102d20a88f1c1d3c3154e2449317b8ef95090e77b312d5cc39354f86d5d606","location":"","comment":"US-Azure geth"},{"ip":"52.176.100.77","port":30303,"id":"865a63255b3bb68023b6bffd5095118fcc13e79dcf014fe4e47e065c350c7cc72af2e53eff895f11ba1bbb6a2b33271c1116ee870f266618eadfc2e78aa7349c","location":"","comment":"US-Azure parity"},{"ip":"52.232.243.152","port":30303,"id":"6332792c4a00e3e4ee0926ed89e0d27ef985424d97b6a45bf0f23e51f0dcb5e66b875777506458aea7af6f9e4ffb69f43f3778ee73c81ed9d34c51c4b16b0b0f","location":"","comment":"Parity"},{"ip":"192.81.208.223","port":30303,"id":"94c15d1b9e2fe7ce56e458b9a3b672ef11894ddedd0c6f247e0f1d3487f52b66208fb4aeb8179fce6e3a749ea93ed147c37976d67af557508d199d9594c35f09","location":"","comment":"@gpip"}],"dnsNetworks":["enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.ropsten.ethdisco.net"]}')},59848:e=>{"use strict";e.exports=JSON.parse('{"name":"sepolia","chainId":11155111,"networkId":11155111,"defaultHardfork":"merge","consensus":{"type":"pow","algorithm":"ethash","ethash":{}},"comment":"PoW test network to replace Ropsten","url":"https://github.com/ethereum/go-ethereum/pull/23730","genesis":{"timestamp":"0x6159af19","gasLimit":30000000,"difficulty":131072,"nonce":"0x0000000000000000","extraData":"0x5365706f6c69612c20417468656e732c204174746963612c2047726565636521"},"hardforks":[{"name":"chainstart","block":0,"forkHash":"0xfe3366e7"},{"name":"homestead","block":0,"forkHash":"0xfe3366e7"},{"name":"tangerineWhistle","block":0,"forkHash":"0xfe3366e7"},{"name":"spuriousDragon","block":0,"forkHash":"0xfe3366e7"},{"name":"byzantium","block":0,"forkHash":"0xfe3366e7"},{"name":"constantinople","block":0,"forkHash":"0xfe3366e7"},{"name":"petersburg","block":0,"forkHash":"0xfe3366e7"},{"name":"istanbul","block":0,"forkHash":"0xfe3366e7"},{"name":"muirGlacier","block":0,"forkHash":"0xfe3366e7"},{"name":"berlin","block":0,"forkHash":"0xfe3366e7"},{"name":"london","block":0,"forkHash":"0xfe3366e7"},{"//_comment":"The forkHash will remain same as mergeForkIdTransition is post merge, terminal block: https://sepolia.etherscan.io/block/1450408","name":"merge","ttd":"17000000000000000","block":1450409,"forkHash":"0xfe3366e7"},{"name":"mergeForkIdTransition","block":1735371,"forkHash":"0xb96cbd13"},{"name":"shanghai","block":null,"timestamp":"1677557088","forkHash":"0xf7f9bc08"}],"bootstrapNodes":[{"ip":"18.168.182.86","port":30303,"id":"9246d00bc8fd1742e5ad2428b80fc4dc45d786283e05ef6edbd9002cbc335d40998444732fbe921cb88e1d2c73d1b1de53bae6a2237996e9bfe14f871baf7066","location":"","comment":"geth"},{"ip":"52.14.151.177","port":30303,"id":"ec66ddcf1a974950bd4c782789a7e04f8aa7110a72569b6e65fcd51e937e74eed303b1ea734e4d19cfaec9fbff9b6ee65bf31dcb50ba79acce9dd63a6aca61c7","location":"","comment":"besu"},{"ip":"165.22.196.173","port":30303,"id":"ce970ad2e9daa9e14593de84a8b49da3d54ccfdf83cbc4fe519cb8b36b5918ed4eab087dedd4a62479b8d50756b492d5f762367c8d20329a7854ec01547568a6","location":"","comment":"EF"},{"ip":"65.108.95.67","port":30303,"id":"075503b13ed736244896efcde2a992ec0b451357d46cb7a8132c0384721742597fc8f0d91bbb40bb52e7d6e66728d36a1fda09176294e4a30cfac55dcce26bc6","location":"","comment":"lodestar"}],"dnsNetworks":["enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.sepolia.ethdisco.net"]}')},10076:e=>{"use strict";e.exports=JSON.parse('{"name":"EIP-1153","number":1153,"comment":"Transient Storage","url":"https://eips.ethereum.org/EIPS/eip-1153","status":"Review","minimumHardfork":"chainstart","requiredEIPs":[],"gasConfig":{},"gasPrices":{"tstore":{"v":100,"d":"Base fee of the TSTORE opcode"},"tload":{"v":100,"d":"Base fee of the TLOAD opcode"}},"vm":{},"pow":{}}')},22946:e=>{"use strict";e.exports=JSON.parse('{"name":"EIP-1559","number":1559,"comment":"Fee market change for ETH 1.0 chain","url":"https://eips.ethereum.org/EIPS/eip-1559","status":"Final","minimumHardfork":"berlin","requiredEIPs":[2930],"gasConfig":{"baseFeeMaxChangeDenominator":{"v":8,"d":"Maximum base fee change denominator"},"elasticityMultiplier":{"v":2,"d":"Maximum block gas target elasticity"},"initialBaseFee":{"v":1000000000,"d":"Initial base fee on first EIP1559 block"}},"gasPrices":{},"vm":{},"pow":{}}')},85628:e=>{"use strict";e.exports=JSON.parse('{"name":"EIP-2315","number":2315,"comment":"Simple subroutines for the EVM","url":"https://eips.ethereum.org/EIPS/eip-2315","status":"Draft","minimumHardfork":"istanbul","gasConfig":{},"gasPrices":{"beginsub":{"v":2,"d":"Base fee of the BEGINSUB opcode"},"returnsub":{"v":5,"d":"Base fee of the RETURNSUB opcode"},"jumpsub":{"v":10,"d":"Base fee of the JUMPSUB opcode"}},"vm":{},"pow":{}}')},23969:e=>{"use strict";e.exports=JSON.parse('{"name":"EIP-2537","number":2537,"comment":"BLS12-381 precompiles","url":"https://eips.ethereum.org/EIPS/eip-2537","status":"Draft","minimumHardfork":"chainstart","gasConfig":{},"gasPrices":{"Bls12381G1AddGas":{"v":600,"d":"Gas cost of a single BLS12-381 G1 addition precompile-call"},"Bls12381G1MulGas":{"v":12000,"d":"Gas cost of a single BLS12-381 G1 multiplication precompile-call"},"Bls12381G2AddGas":{"v":4500,"d":"Gas cost of a single BLS12-381 G2 addition precompile-call"},"Bls12381G2MulGas":{"v":55000,"d":"Gas cost of a single BLS12-381 G2 multiplication precompile-call"},"Bls12381PairingBaseGas":{"v":115000,"d":"Base gas cost of BLS12-381 pairing check"},"Bls12381PairingPerPairGas":{"v":23000,"d":"Per-pair gas cost of BLS12-381 pairing check"},"Bls12381MapG1Gas":{"v":5500,"d":"Gas cost of BLS12-381 map field element to G1"},"Bls12381MapG2Gas":{"v":110000,"d":"Gas cost of BLS12-381 map field element to G2"},"Bls12381MultiExpGasDiscount":{"v":[[1,1200],[2,888],[3,764],[4,641],[5,594],[6,547],[7,500],[8,453],[9,438],[10,423],[11,408],[12,394],[13,379],[14,364],[15,349],[16,334],[17,330],[18,326],[19,322],[20,318],[21,314],[22,310],[23,306],[24,302],[25,298],[26,294],[27,289],[28,285],[29,281],[30,277],[31,273],[32,269],[33,268],[34,266],[35,265],[36,263],[37,262],[38,260],[39,259],[40,257],[41,256],[42,254],[43,253],[44,251],[45,250],[46,248],[47,247],[48,245],[49,244],[50,242],[51,241],[52,239],[53,238],[54,236],[55,235],[56,233],[57,232],[58,231],[59,229],[60,228],[61,226],[62,225],[63,223],[64,222],[65,221],[66,220],[67,219],[68,219],[69,218],[70,217],[71,216],[72,216],[73,215],[74,214],[75,213],[76,213],[77,212],[78,211],[79,211],[80,210],[81,209],[82,208],[83,208],[84,207],[85,206],[86,205],[87,205],[88,204],[89,203],[90,202],[91,202],[92,201],[93,200],[94,199],[95,199],[96,198],[97,197],[98,196],[99,196],[100,195],[101,194],[102,193],[103,193],[104,192],[105,191],[106,191],[107,190],[108,189],[109,188],[110,188],[111,187],[112,186],[113,185],[114,185],[115,184],[116,183],[117,182],[118,182],[119,181],[120,180],[121,179],[122,179],[123,178],[124,177],[125,176],[126,176],[127,175],[128,174]],"d":"Discount gas costs of calls to the MultiExp precompiles with `k` (point, scalar) pair"}},"vm":{},"pow":{}}')},30295:e=>{"use strict";e.exports=JSON.parse('{"name":"EIP-2565","number":2565,"comment":"ModExp gas cost","url":"https://eips.ethereum.org/EIPS/eip-2565","status":"Final","minimumHardfork":"byzantium","gasConfig":{},"gasPrices":{"modexpGquaddivisor":{"v":3,"d":"Gquaddivisor from modexp precompile for gas calculation"}},"vm":{},"pow":{}}')},1016:e=>{"use strict";e.exports=JSON.parse('{"name":"EIP-2718","comment":"Typed Transaction Envelope","url":"https://eips.ethereum.org/EIPS/eip-2718","status":"Final","minimumHardfork":"chainstart","gasConfig":{},"gasPrices":{},"vm":{},"pow":{}}')},73563:e=>{"use strict";e.exports=JSON.parse('{"name":"EIP-2929","comment":"Gas cost increases for state access opcodes","url":"https://eips.ethereum.org/EIPS/eip-2929","status":"Final","minimumHardfork":"chainstart","gasConfig":{},"gasPrices":{"coldsload":{"v":2100,"d":"Gas cost of the first read of storage from a given location (per transaction)"},"coldaccountaccess":{"v":2600,"d":"Gas cost of the first read of a given address (per transaction)"},"warmstorageread":{"v":100,"d":"Gas cost of reading storage locations which have already loaded \'cold\'"},"sstoreCleanGasEIP2200":{"v":2900,"d":"Once per SSTORE operation from clean non-zero to something else"},"sstoreNoopGasEIP2200":{"v":100,"d":"Once per SSTORE operation if the value doesn\'t change"},"sstoreDirtyGasEIP2200":{"v":100,"d":"Once per SSTORE operation if a dirty value is changed"},"sstoreInitRefundEIP2200":{"v":19900,"d":"Once per SSTORE operation for resetting to the original zero value"},"sstoreCleanRefundEIP2200":{"v":4900,"d":"Once per SSTORE operation for resetting to the original non-zero value"},"call":{"v":0,"d":"Base fee of the CALL opcode"},"callcode":{"v":0,"d":"Base fee of the CALLCODE opcode"},"delegatecall":{"v":0,"d":"Base fee of the DELEGATECALL opcode"},"staticcall":{"v":0,"d":"Base fee of the STATICCALL opcode"},"balance":{"v":0,"d":"Base fee of the BALANCE opcode"},"extcodesize":{"v":0,"d":"Base fee of the EXTCODESIZE opcode"},"extcodecopy":{"v":0,"d":"Base fee of the EXTCODECOPY opcode"},"extcodehash":{"v":0,"d":"Base fee of the EXTCODEHASH opcode"},"sload":{"v":0,"d":"Base fee of the SLOAD opcode"},"sstore":{"v":0,"d":"Base fee of the SSTORE opcode"}},"vm":{},"pow":{}}')},82969:e=>{"use strict";e.exports=JSON.parse('{"name":"EIP-2930","comment":"Optional access lists","url":"https://eips.ethereum.org/EIPS/eip-2930","status":"Final","minimumHardfork":"istanbul","requiredEIPs":[2718,2929],"gasConfig":{},"gasPrices":{"accessListStorageKeyCost":{"v":1900,"d":"Gas cost per storage key in an Access List transaction"},"accessListAddressCost":{"v":2400,"d":"Gas cost per storage key in an Access List transaction"}},"vm":{},"pow":{}}')},37427:e=>{"use strict";e.exports=JSON.parse('{"name":"EIP-3074","number":3074,"comment":"AUTH and AUTHCALL opcodes","url":"https://eips.ethereum.org/EIPS/eip-3074","status":"Review","minimumHardfork":"london","gasConfig":{},"gasPrices":{"auth":{"v":3100,"d":"Gas cost of the AUTH opcode"},"authcall":{"v":0,"d":"Gas cost of the AUTHCALL opcode"},"authcallValueTransfer":{"v":6700,"d":"Paid for CALL when the value transfer is non-zero"}},"vm":{},"pow":{}}')},69841:e=>{"use strict";e.exports=JSON.parse('{"name":"EIP-3198","number":3198,"comment":"BASEFEE opcode","url":"https://eips.ethereum.org/EIPS/eip-3198","status":"Final","minimumHardfork":"london","gasConfig":{},"gasPrices":{"basefee":{"v":2,"d":"Gas cost of the BASEFEE opcode"}},"vm":{},"pow":{}}')},43300:e=>{"use strict";e.exports=JSON.parse('{"name":"EIP-3529","comment":"Reduction in refunds","url":"https://eips.ethereum.org/EIPS/eip-3529","status":"Final","minimumHardfork":"berlin","requiredEIPs":[2929],"gasConfig":{"maxRefundQuotient":{"v":5,"d":"Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)"}},"gasPrices":{"selfdestructRefund":{"v":0,"d":"Refunded following a selfdestruct operation"},"sstoreClearRefundEIP2200":{"v":4800,"d":"Once per SSTORE operation for clearing an originally existing storage slot"}},"vm":{},"pow":{}}')},85460:e=>{"use strict";e.exports=JSON.parse('{"name":"EIP-3540","number":3540,"comment":"EVM Object Format (EOF) v1","url":"https://eips.ethereum.org/EIPS/eip-3540","status":"Review","minimumHardfork":"london","requiredEIPs":[3541],"gasConfig":{},"gasPrices":{},"vm":{},"pow":{}}')},42040:e=>{"use strict";e.exports=JSON.parse('{"name":"EIP-3541","comment":"Reject new contracts starting with the 0xEF byte","url":"https://eips.ethereum.org/EIPS/eip-3541","status":"Final","minimumHardfork":"berlin","requiredEIPs":[],"gasConfig":{},"gasPrices":{},"vm":{},"pow":{}}')},90152:e=>{"use strict";e.exports=JSON.parse('{"name":"EIP-3554","comment":"Reduction in refunds","url":"Difficulty Bomb Delay to December 1st 2021","status":"Final","minimumHardfork":"muirGlacier","requiredEIPs":[],"gasConfig":{},"gasPrices":{},"vm":{},"pow":{"difficultyBombDelay":{"v":9500000,"d":"the amount of blocks to delay the difficulty bomb with"}}}')},62699:e=>{"use strict";e.exports=JSON.parse('{"name":"EIP-3607","number":3607,"comment":"Reject transactions from senders with deployed code","url":"https://eips.ethereum.org/EIPS/eip-3607","status":"Final","minimumHardfork":"chainstart","requiredEIPs":[],"gasConfig":{},"gasPrices":{},"vm":{},"pow":{}}')},95737:e=>{"use strict";e.exports=JSON.parse('{"name":"EIP-3651","number":3198,"comment":"Warm COINBASE","url":"https://eips.ethereum.org/EIPS/eip-3651","status":"Review","minimumHardfork":"london","requiredEIPs":[2929],"gasConfig":{},"gasPrices":{},"vm":{},"pow":{}}')},97819:e=>{"use strict";e.exports=JSON.parse('{"name":"EIP-3670","number":3670,"comment":"EOF - Code Validation","url":"https://eips.ethereum.org/EIPS/eip-3670","status":"Review","minimumHardfork":"london","requiredEIPs":[3540],"gasConfig":{},"gasPrices":{},"vm":{},"pow":{}}')},58039:e=>{"use strict";e.exports=JSON.parse('{"name":"EIP-3675","number":3675,"comment":"Upgrade consensus to Proof-of-Stake","url":"https://eips.ethereum.org/EIPS/eip-3675","status":"Final","minimumHardfork":"london","requiredEIPs":[],"gasConfig":{},"gasPrices":{},"vm":{},"pow":{}}')},97620:e=>{"use strict";e.exports=JSON.parse('{"name":"EIP-3855","number":3855,"comment":"PUSH0 instruction","url":"https://eips.ethereum.org/EIPS/eip-3855","status":"Review","minimumHardfork":"chainstart","requiredEIPs":[],"gasConfig":{},"gasPrices":{"push0":{"v":2,"d":"Base fee of the PUSH0 opcode"}},"vm":{},"pow":{}}')},24795:e=>{"use strict";e.exports=JSON.parse('{"name":"EIP-3860","number":3860,"comment":"Limit and meter initcode","url":"https://eips.ethereum.org/EIPS/eip-3860","status":"Review","minimumHardfork":"spuriousDragon","requiredEIPs":[],"gasConfig":{},"gasPrices":{"initCodeWordCost":{"v":2,"d":"Gas to pay for each word (32 bytes) of initcode when creating a contract"}},"vm":{"maxInitCodeSize":{"v":49152,"d":"Maximum length of initialization code when creating a contract"}},"pow":{}}')},49768:e=>{"use strict";e.exports=JSON.parse('{"name":"EIP-4345","number":4345,"comment":"Difficulty Bomb Delay to June 2022","url":"https://eips.ethereum.org/EIPS/eip-4345","status":"Final","minimumHardfork":"london","gasConfig":{},"gasPrices":{},"vm":{},"pow":{"difficultyBombDelay":{"v":10700000,"d":"the amount of blocks to delay the difficulty bomb with"}}}')},83146:e=>{"use strict";e.exports=JSON.parse('{"name":"EIP-4399","number":4399,"comment":"Supplant DIFFICULTY opcode with PREVRANDAO","url":"https://eips.ethereum.org/EIPS/eip-4399","status":"Review","minimumHardfork":"london","requiredEIPs":[],"gasConfig":{},"gasPrices":{},"vm":{},"pow":{}}')},20123:e=>{"use strict";e.exports=JSON.parse('{"name":"EIP-4844","number":4844,"comment":"Shard Blob Transactions","url":"https://eips.ethereum.org/EIPS/eip-4844","status":"Draft","minimumHardfork":"merge","requiredEIPs":[1559,2718,2930,4895],"gasConfig":{"dataGasPerBlob":{"v":131072,"d":"The base fee for data gas per blob"},"targetDataGasPerBlock":{"v":262144,"d":"The target data gas consumed per block"},"maxDataGasPerBlock":{"v":524288,"d":"The max data gas allowable per block"},"dataGasPriceUpdateFraction":{"v":2225652,"d":"The denominator used in the exponential when calculating a data gas price"}},"gasPrices":{"simpleGasPerBlob":{"v":12000,"d":"The basic gas fee for each blob"},"minDataGasPrice":{"v":1,"d":"The minimum fee per data gas"},"kzgPointEvaluationGasPrecompilePrice":{"v":50000,"d":"The fee associated with the point evaluation precompile"},"datahash":{"v":3,"d":"Base fee of the DATAHASH opcode"}},"sharding":{"blobCommitmentVersionKzg":{"v":1,"d":"The number indicated a versioned hash is a KZG commitment"},"fieldElementsPerBlob":{"v":4096,"d":"The number of field elements allowed per blob"}},"vm":{},"pow":{}}')},44476:e=>{"use strict";e.exports=JSON.parse('{"name":"EIP-4895","number":4895,"comment":"Beacon chain push withdrawals as operations","url":"https://eips.ethereum.org/EIPS/eip-4895","status":"Review","minimumHardfork":"merge","requiredEIPs":[],"gasConfig":{},"gasPrices":{},"vm":{},"pow":{}}')},60105:e=>{"use strict";e.exports=JSON.parse('{"name":"EIP-5133","number":5133,"comment":"Delaying Difficulty Bomb to mid-September 2022","url":"https://eips.ethereum.org/EIPS/eip-5133","status":"Draft","minimumHardfork":"grayGlacier","gasConfig":{},"gasPrices":{},"vm":{},"pow":{"difficultyBombDelay":{"v":11400000,"d":"the amount of blocks to delay the difficulty bomb with"}}}')},93754:e=>{"use strict";e.exports=JSON.parse('{"name":"arrowGlacier","comment":"HF to delay the difficulty bomb","url":"https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/arrow-glacier.md","status":"Final","eips":[4345],"gasConfig":{},"gasPrices":{},"vm":{},"pow":{}}')},46667:e=>{"use strict";e.exports=JSON.parse('{"name":"berlin","comment":"HF targeted for July 2020 following the Muir Glacier HF","url":"https://eips.ethereum.org/EIPS/eip-2070","status":"Final","eips":[2565,2929,2718,2930]}')},89903:e=>{"use strict";e.exports=JSON.parse('{"name":"byzantium","comment":"Hardfork with new precompiles, instructions and other protocol changes","url":"https://eips.ethereum.org/EIPS/eip-609","status":"Final","gasConfig":{},"gasPrices":{"modexpGquaddivisor":{"v":20,"d":"Gquaddivisor from modexp precompile for gas calculation"},"ecAdd":{"v":500,"d":"Gas costs for curve addition precompile"},"ecMul":{"v":40000,"d":"Gas costs for curve multiplication precompile"},"ecPairing":{"v":100000,"d":"Base gas costs for curve pairing precompile"},"ecPairingWord":{"v":80000,"d":"Gas costs regarding curve pairing precompile input length"},"revert":{"v":0,"d":"Base fee of the REVERT opcode"},"staticcall":{"v":700,"d":"Base fee of the STATICCALL opcode"},"returndatasize":{"v":2,"d":"Base fee of the RETURNDATASIZE opcode"},"returndatacopy":{"v":3,"d":"Base fee of the RETURNDATACOPY opcode"}},"vm":{},"pow":{"minerReward":{"v":"3000000000000000000","d":"the amount a miner get rewarded for mining a block"},"difficultyBombDelay":{"v":3000000,"d":"the amount of blocks to delay the difficulty bomb with"}}}')},52593:e=>{"use strict";e.exports=JSON.parse('{"name":"chainstart","comment":"Start of the Ethereum main chain","url":"","status":"","gasConfig":{"minGasLimit":{"v":5000,"d":"Minimum the gas limit may ever be"},"gasLimitBoundDivisor":{"v":1024,"d":"The bound divisor of the gas limit, used in update calculations"},"maxRefundQuotient":{"v":2,"d":"Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)"}},"gasPrices":{"base":{"v":2,"d":"Gas base cost, used e.g. for ChainID opcode (Istanbul)"},"tierStep":{"v":[0,2,3,5,8,10,20],"d":"Once per operation, for a selection of them"},"exp":{"v":10,"d":"Base fee of the EXP opcode"},"expByte":{"v":10,"d":"Times ceil(log256(exponent)) for the EXP instruction"},"sha3":{"v":30,"d":"Base fee of the SHA3 opcode"},"sha3Word":{"v":6,"d":"Once per word of the SHA3 operation\'s data"},"sload":{"v":50,"d":"Base fee of the SLOAD opcode"},"sstoreSet":{"v":20000,"d":"Once per SSTORE operation if the zeroness changes from zero"},"sstoreReset":{"v":5000,"d":"Once per SSTORE operation if the zeroness does not change from zero"},"sstoreRefund":{"v":15000,"d":"Once per SSTORE operation if the zeroness changes to zero"},"jumpdest":{"v":1,"d":"Base fee of the JUMPDEST opcode"},"log":{"v":375,"d":"Base fee of the LOG opcode"},"logData":{"v":8,"d":"Per byte in a LOG* operation\'s data"},"logTopic":{"v":375,"d":"Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas"},"create":{"v":32000,"d":"Base fee of the CREATE opcode"},"call":{"v":40,"d":"Base fee of the CALL opcode"},"callStipend":{"v":2300,"d":"Free gas given at beginning of call"},"callValueTransfer":{"v":9000,"d":"Paid for CALL when the value transfor is non-zero"},"callNewAccount":{"v":25000,"d":"Paid for CALL when the destination address didn\'t exist prior"},"selfdestructRefund":{"v":24000,"d":"Refunded following a selfdestruct operation"},"memory":{"v":3,"d":"Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL"},"quadCoeffDiv":{"v":512,"d":"Divisor for the quadratic particle of the memory cost equation"},"createData":{"v":200,"d":""},"tx":{"v":21000,"d":"Per transaction. NOTE: Not payable on data of calls between transactions"},"txCreation":{"v":32000,"d":"The cost of creating a contract via tx"},"txDataZero":{"v":4,"d":"Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions"},"txDataNonZero":{"v":68,"d":"Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions"},"copy":{"v":3,"d":"Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added"},"ecRecover":{"v":3000,"d":""},"sha256":{"v":60,"d":""},"sha256Word":{"v":12,"d":""},"ripemd160":{"v":600,"d":""},"ripemd160Word":{"v":120,"d":""},"identity":{"v":15,"d":""},"identityWord":{"v":3,"d":""},"stop":{"v":0,"d":"Base fee of the STOP opcode"},"add":{"v":3,"d":"Base fee of the ADD opcode"},"mul":{"v":5,"d":"Base fee of the MUL opcode"},"sub":{"v":3,"d":"Base fee of the SUB opcode"},"div":{"v":5,"d":"Base fee of the DIV opcode"},"sdiv":{"v":5,"d":"Base fee of the SDIV opcode"},"mod":{"v":5,"d":"Base fee of the MOD opcode"},"smod":{"v":5,"d":"Base fee of the SMOD opcode"},"addmod":{"v":8,"d":"Base fee of the ADDMOD opcode"},"mulmod":{"v":8,"d":"Base fee of the MULMOD opcode"},"signextend":{"v":5,"d":"Base fee of the SIGNEXTEND opcode"},"lt":{"v":3,"d":"Base fee of the LT opcode"},"gt":{"v":3,"d":"Base fee of the GT opcode"},"slt":{"v":3,"d":"Base fee of the SLT opcode"},"sgt":{"v":3,"d":"Base fee of the SGT opcode"},"eq":{"v":3,"d":"Base fee of the EQ opcode"},"iszero":{"v":3,"d":"Base fee of the ISZERO opcode"},"and":{"v":3,"d":"Base fee of the AND opcode"},"or":{"v":3,"d":"Base fee of the OR opcode"},"xor":{"v":3,"d":"Base fee of the XOR opcode"},"not":{"v":3,"d":"Base fee of the NOT opcode"},"byte":{"v":3,"d":"Base fee of the BYTE opcode"},"address":{"v":2,"d":"Base fee of the ADDRESS opcode"},"balance":{"v":20,"d":"Base fee of the BALANCE opcode"},"origin":{"v":2,"d":"Base fee of the ORIGIN opcode"},"caller":{"v":2,"d":"Base fee of the CALLER opcode"},"callvalue":{"v":2,"d":"Base fee of the CALLVALUE opcode"},"calldataload":{"v":3,"d":"Base fee of the CALLDATALOAD opcode"},"calldatasize":{"v":2,"d":"Base fee of the CALLDATASIZE opcode"},"calldatacopy":{"v":3,"d":"Base fee of the CALLDATACOPY opcode"},"codesize":{"v":2,"d":"Base fee of the CODESIZE opcode"},"codecopy":{"v":3,"d":"Base fee of the CODECOPY opcode"},"gasprice":{"v":2,"d":"Base fee of the GASPRICE opcode"},"extcodesize":{"v":20,"d":"Base fee of the EXTCODESIZE opcode"},"extcodecopy":{"v":20,"d":"Base fee of the EXTCODECOPY opcode"},"blockhash":{"v":20,"d":"Base fee of the BLOCKHASH opcode"},"coinbase":{"v":2,"d":"Base fee of the COINBASE opcode"},"timestamp":{"v":2,"d":"Base fee of the TIMESTAMP opcode"},"number":{"v":2,"d":"Base fee of the NUMBER opcode"},"difficulty":{"v":2,"d":"Base fee of the DIFFICULTY opcode"},"gaslimit":{"v":2,"d":"Base fee of the GASLIMIT opcode"},"pop":{"v":2,"d":"Base fee of the POP opcode"},"mload":{"v":3,"d":"Base fee of the MLOAD opcode"},"mstore":{"v":3,"d":"Base fee of the MSTORE opcode"},"mstore8":{"v":3,"d":"Base fee of the MSTORE8 opcode"},"sstore":{"v":0,"d":"Base fee of the SSTORE opcode"},"jump":{"v":8,"d":"Base fee of the JUMP opcode"},"jumpi":{"v":10,"d":"Base fee of the JUMPI opcode"},"pc":{"v":2,"d":"Base fee of the PC opcode"},"msize":{"v":2,"d":"Base fee of the MSIZE opcode"},"gas":{"v":2,"d":"Base fee of the GAS opcode"},"push":{"v":3,"d":"Base fee of the PUSH opcode"},"dup":{"v":3,"d":"Base fee of the DUP opcode"},"swap":{"v":3,"d":"Base fee of the SWAP opcode"},"callcode":{"v":40,"d":"Base fee of the CALLCODE opcode"},"return":{"v":0,"d":"Base fee of the RETURN opcode"},"invalid":{"v":0,"d":"Base fee of the INVALID opcode"},"selfdestruct":{"v":0,"d":"Base fee of the SELFDESTRUCT opcode"}},"vm":{"stackLimit":{"v":1024,"d":"Maximum size of VM stack allowed"},"callCreateDepth":{"v":1024,"d":"Maximum depth of call/create stack"},"maxExtraDataSize":{"v":32,"d":"Maximum size extra data may be after Genesis"}},"pow":{"minimumDifficulty":{"v":131072,"d":"The minimum that the difficulty may ever be"},"difficultyBoundDivisor":{"v":2048,"d":"The bound divisor of the difficulty, used in the update calculations"},"durationLimit":{"v":13,"d":"The decision boundary on the blocktime duration used to determine whether difficulty should go up or not"},"epochDuration":{"v":30000,"d":"Duration between proof-of-work epochs"},"timebombPeriod":{"v":100000,"d":"Exponential difficulty timebomb period"},"minerReward":{"v":"5000000000000000000","d":"the amount a miner get rewarded for mining a block"},"difficultyBombDelay":{"v":0,"d":"the amount of blocks to delay the difficulty bomb with"}}}')},90188:e=>{"use strict";e.exports=JSON.parse('{"name":"constantinople","comment":"Postponed hardfork including EIP-1283 (SSTORE gas metering changes)","url":"https://eips.ethereum.org/EIPS/eip-1013","status":"Final","gasConfig":{},"gasPrices":{"netSstoreNoopGas":{"v":200,"d":"Once per SSTORE operation if the value doesn\'t change"},"netSstoreInitGas":{"v":20000,"d":"Once per SSTORE operation from clean zero"},"netSstoreCleanGas":{"v":5000,"d":"Once per SSTORE operation from clean non-zero"},"netSstoreDirtyGas":{"v":200,"d":"Once per SSTORE operation from dirty"},"netSstoreClearRefund":{"v":15000,"d":"Once per SSTORE operation for clearing an originally existing storage slot"},"netSstoreResetRefund":{"v":4800,"d":"Once per SSTORE operation for resetting to the original non-zero value"},"netSstoreResetClearRefund":{"v":19800,"d":"Once per SSTORE operation for resetting to the original zero value"},"shl":{"v":3,"d":"Base fee of the SHL opcode"},"shr":{"v":3,"d":"Base fee of the SHR opcode"},"sar":{"v":3,"d":"Base fee of the SAR opcode"},"extcodehash":{"v":400,"d":"Base fee of the EXTCODEHASH opcode"},"create2":{"v":32000,"d":"Base fee of the CREATE2 opcode"}},"vm":{},"pow":{"minerReward":{"v":"2000000000000000000","d":"The amount a miner gets rewarded for mining a block"},"difficultyBombDelay":{"v":5000000,"d":"the amount of blocks to delay the difficulty bomb with"}}}')},28953:e=>{"use strict";e.exports=JSON.parse('{"name":"dao","comment":"DAO rescue hardfork","url":"https://eips.ethereum.org/EIPS/eip-779","status":"Final","gasConfig":{},"gasPrices":{},"vm":{},"pow":{}}')},80228:e=>{"use strict";e.exports=JSON.parse('{"name":"grayGlacier","comment":"Delaying the difficulty bomb to Mid September 2022","url":"https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/gray-glacier.md","status":"Draft","eips":[5133],"gasConfig":{},"gasPrices":{},"vm":{},"pow":{}}')},47582:e=>{"use strict";e.exports=JSON.parse('{"name":"homestead","comment":"Homestead hardfork with protocol and network changes","url":"https://eips.ethereum.org/EIPS/eip-606","status":"Final","gasConfig":{},"gasPrices":{"delegatecall":{"v":40,"d":"Base fee of the DELEGATECALL opcode"}},"vm":{},"pow":{}}')},20619:e=>{"use strict";e.exports=JSON.parse('{"name":"istanbul","comment":"HF targeted for December 2019 following the Constantinople/Petersburg HF","url":"https://eips.ethereum.org/EIPS/eip-1679","status":"Final","gasConfig":{},"gasPrices":{"blake2Round":{"v":1,"d":"Gas cost per round for the Blake2 F precompile"},"ecAdd":{"v":150,"d":"Gas costs for curve addition precompile"},"ecMul":{"v":6000,"d":"Gas costs for curve multiplication precompile"},"ecPairing":{"v":45000,"d":"Base gas costs for curve pairing precompile"},"ecPairingWord":{"v":34000,"d":"Gas costs regarding curve pairing precompile input length"},"txDataNonZero":{"v":16,"d":"Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions"},"sstoreSentryGasEIP2200":{"v":2300,"d":"Minimum gas required to be present for an SSTORE call, not consumed"},"sstoreNoopGasEIP2200":{"v":800,"d":"Once per SSTORE operation if the value doesn\'t change"},"sstoreDirtyGasEIP2200":{"v":800,"d":"Once per SSTORE operation if a dirty value is changed"},"sstoreInitGasEIP2200":{"v":20000,"d":"Once per SSTORE operation from clean zero to non-zero"},"sstoreInitRefundEIP2200":{"v":19200,"d":"Once per SSTORE operation for resetting to the original zero value"},"sstoreCleanGasEIP2200":{"v":5000,"d":"Once per SSTORE operation from clean non-zero to something else"},"sstoreCleanRefundEIP2200":{"v":4200,"d":"Once per SSTORE operation for resetting to the original non-zero value"},"sstoreClearRefundEIP2200":{"v":15000,"d":"Once per SSTORE operation for clearing an originally existing storage slot"},"balance":{"v":700,"d":"Base fee of the BALANCE opcode"},"extcodehash":{"v":700,"d":"Base fee of the EXTCODEHASH opcode"},"chainid":{"v":2,"d":"Base fee of the CHAINID opcode"},"selfbalance":{"v":5,"d":"Base fee of the SELFBALANCE opcode"},"sload":{"v":800,"d":"Base fee of the SLOAD opcode"}},"vm":{},"pow":{}}')},67857:e=>{"use strict";e.exports=JSON.parse('{"name":"london","comment":"HF targeted for July 2021 following the Berlin fork","url":"https://github.com/ethereum/eth1.0-specs/blob/master/network-upgrades/mainnet-upgrades/london.md","status":"Final","eips":[1559,3198,3529,3541]}')},18387:e=>{"use strict";e.exports=JSON.parse('{"name":"merge","comment":"Hardfork to upgrade the consensus mechanism to Proof-of-Stake","url":"https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/merge.md","status":"Final","consensus":{"type":"pos","algorithm":"casper","casper":{}},"eips":[3675,4399]}')},64580:e=>{"use strict";e.exports=JSON.parse('{"name":"mergeForkIdTransition","comment":"Pre-merge hardfork to fork off non-upgraded clients","url":"https://eips.ethereum.org/EIPS/eip-3675","status":"Draft","eips":[]}')},33450:e=>{"use strict";e.exports=JSON.parse('{"name":"muirGlacier","comment":"HF to delay the difficulty bomb","url":"https://eips.ethereum.org/EIPS/eip-2384","status":"Final","gasConfig":{},"gasPrices":{},"vm":{},"pow":{"difficultyBombDelay":{"v":9000000,"d":"the amount of blocks to delay the difficulty bomb with"}}}')},48612:e=>{"use strict";e.exports=JSON.parse('{"name":"petersburg","comment":"Aka constantinopleFix, removes EIP-1283, activate together with or after constantinople","url":"https://eips.ethereum.org/EIPS/eip-1716","status":"Final","gasConfig":{},"gasPrices":{"netSstoreNoopGas":{"v":null,"d":"Removed along EIP-1283"},"netSstoreInitGas":{"v":null,"d":"Removed along EIP-1283"},"netSstoreCleanGas":{"v":null,"d":"Removed along EIP-1283"},"netSstoreDirtyGas":{"v":null,"d":"Removed along EIP-1283"},"netSstoreClearRefund":{"v":null,"d":"Removed along EIP-1283"},"netSstoreResetRefund":{"v":null,"d":"Removed along EIP-1283"},"netSstoreResetClearRefund":{"v":null,"d":"Removed along EIP-1283"}},"vm":{},"pow":{}}')},71787:e=>{"use strict";e.exports=JSON.parse('{"name":"shanghai","comment":"Next feature hardfork after the merge hardfork having withdrawals, warm coinbase, push0, limit/meter initcode","url":"https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/shanghai.md","status":"Final","eips":[3651,3855,3860,4895]}')},74718:e=>{"use strict";e.exports=JSON.parse('{"name":"shardingFork","comment":"Internal hardfork to test proto-danksharding (do not use in production)","url":"https://eips.ethereum.org/EIPS/eip-4844","status":"Experimental","eips":[4844]}')},81759:e=>{"use strict";e.exports=JSON.parse('{"name":"spuriousDragon","comment":"HF with EIPs for simple replay attack protection, EXP cost increase, state trie clearing, contract code size limit","url":"https://eips.ethereum.org/EIPS/eip-607","status":"Final","gasConfig":{},"gasPrices":{"expByte":{"v":50,"d":"Times ceil(log256(exponent)) for the EXP instruction"}},"vm":{"maxCodeSize":{"v":24576,"d":"Maximum length of contract code"}},"pow":{}}')},47295:e=>{"use strict";e.exports=JSON.parse('{"name":"tangerineWhistle","comment":"Hardfork with gas cost changes for IO-heavy operations","url":"https://eips.ethereum.org/EIPS/eip-608","status":"Final","gasConfig":{},"gasPrices":{"sload":{"v":200,"d":"Once per SLOAD operation"},"call":{"v":700,"d":"Once per CALL operation & message call transaction"},"extcodesize":{"v":700,"d":"Base fee of the EXTCODESIZE opcode"},"extcodecopy":{"v":700,"d":"Base fee of the EXTCODECOPY opcode"},"balance":{"v":400,"d":"Base fee of the BALANCE opcode"},"delegatecall":{"v":700,"d":"Base fee of the DELEGATECALL opcode"},"callcode":{"v":700,"d":"Base fee of the CALLCODE opcode"},"selfdestruct":{"v":5000,"d":"Base fee of the SELFDESTRUCT opcode"}},"vm":{},"pow":{}}')},50746:e=>{"use strict";e.exports=JSON.parse('{"name":"goerli","chainId":5,"networkId":5,"defaultHardfork":"merge","consensus":{"type":"poa","algorithm":"clique","clique":{"period":15,"epoch":30000}},"comment":"Cross-client PoA test network","url":"https://github.com/goerli/testnet","genesis":{"timestamp":"0x5c51a607","gasLimit":10485760,"difficulty":1,"nonce":"0x0000000000000000","extraData":"0x22466c6578692069732061207468696e6722202d204166726900000000000000e0a2bd4258d2768837baa26a28fe71dc079f84c70000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"},"hardforks":[{"name":"chainstart","block":0,"forkHash":"0xa3f5ab08"},{"name":"homestead","block":0,"forkHash":"0xa3f5ab08"},{"name":"tangerineWhistle","block":0,"forkHash":"0xa3f5ab08"},{"name":"spuriousDragon","block":0,"forkHash":"0xa3f5ab08"},{"name":"byzantium","block":0,"forkHash":"0xa3f5ab08"},{"name":"constantinople","block":0,"forkHash":"0xa3f5ab08"},{"name":"petersburg","block":0,"forkHash":"0xa3f5ab08"},{"name":"istanbul","block":1561651,"forkHash":"0xc25efa5c"},{"name":"berlin","block":4460644,"forkHash":"0x757a1c47"},{"name":"london","block":5062605,"forkHash":"0xb8c6299d"},{"//_comment":"The forkHash will remain same as mergeForkIdTransition is post merge, terminal block: https://goerli.etherscan.io/block/7382818","name":"merge","ttd":"10790000","block":7382819,"forkHash":"0xb8c6299d"},{"name":"mergeForkIdTransition","block":null,"forkHash":null},{"name":"shanghai","block":null,"timestamp":"1678832736","forkHash":"0xf9843abf"}],"bootstrapNodes":[{"ip":"51.141.78.53","port":30303,"id":"011f758e6552d105183b1761c5e2dea0111bc20fd5f6422bc7f91e0fabbec9a6595caf6239b37feb773dddd3f87240d99d859431891e4a642cf2a0a9e6cbb98a","location":"","comment":"Upstream bootnode 1"},{"ip":"13.93.54.137","port":30303,"id":"176b9417f511d05b6b2cf3e34b756cf0a7096b3094572a8f6ef4cdcb9d1f9d00683bf0f83347eebdf3b81c3521c2332086d9592802230bf528eaf606a1d9677b","location":"","comment":"Upstream bootnode 2"},{"ip":"94.237.54.114","port":30313,"id":"46add44b9f13965f7b9875ac6b85f016f341012d84f975377573800a863526f4da19ae2c620ec73d11591fa9510e992ecc03ad0751f53cc02f7c7ed6d55c7291","location":"","comment":"Upstream bootnode 3"},{"ip":"18.218.250.66","port":30313,"id":"b5948a2d3e9d486c4d75bf32713221c2bd6cf86463302339299bd227dc2e276cd5a1c7ca4f43a0e9122fe9af884efed563bd2a1fd28661f3b5f5ad7bf1de5949","location":"","comment":"Upstream bootnode 4"},{"ip":"3.11.147.67","port":30303,"id":"a61215641fb8714a373c80edbfa0ea8878243193f57c96eeb44d0bc019ef295abd4e044fd619bfc4c59731a73fb79afe84e9ab6da0c743ceb479cbb6d263fa91","location":"","comment":"Ethereum Foundation bootnode"},{"ip":"51.15.116.226","port":30303,"id":"a869b02cec167211fb4815a82941db2e7ed2936fd90e78619c53eb17753fcf0207463e3419c264e2a1dd8786de0df7e68cf99571ab8aeb7c4e51367ef186b1dd","location":"","comment":"Goerli Initiative bootnode"},{"ip":"51.15.119.157","port":30303,"id":"807b37ee4816ecf407e9112224494b74dd5933625f655962d892f2f0f02d7fbbb3e2a94cf87a96609526f30c998fd71e93e2f53015c558ffc8b03eceaf30ee33","location":"","comment":"Goerli Initiative bootnode"},{"ip":"51.15.119.157","port":40303,"id":"a59e33ccd2b3e52d578f1fbd70c6f9babda2650f0760d6ff3b37742fdcdfdb3defba5d56d315b40c46b70198c7621e63ffa3f987389c7118634b0fefbbdfa7fd","location":"","comment":"Goerli Initiative bootnode"}],"dnsNetworks":["enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.goerli.ethdisco.net"]}')},6331:e=>{"use strict";e.exports=JSON.parse('{"name":"mainnet","chainId":1,"networkId":1,"defaultHardfork":"merge","consensus":{"type":"pow","algorithm":"ethash","ethash":{}},"comment":"The Ethereum main chain","url":"https://ethstats.net/","genesis":{"gasLimit":5000,"difficulty":17179869184,"nonce":"0x0000000000000042","extraData":"0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa"},"hardforks":[{"name":"chainstart","block":0,"forkHash":"0xfc64ec04"},{"name":"homestead","block":1150000,"forkHash":"0x97c2c34c"},{"name":"dao","block":1920000,"forkHash":"0x91d1f948"},{"name":"tangerineWhistle","block":2463000,"forkHash":"0x7a64da13"},{"name":"spuriousDragon","block":2675000,"forkHash":"0x3edd5b10"},{"name":"byzantium","block":4370000,"forkHash":"0xa00bc324"},{"name":"constantinople","block":7280000,"forkHash":"0x668db0af"},{"name":"petersburg","block":7280000,"forkHash":"0x668db0af"},{"name":"istanbul","block":9069000,"forkHash":"0x879d6e30"},{"name":"muirGlacier","block":9200000,"forkHash":"0xe029e991"},{"name":"berlin","block":12244000,"forkHash":"0x0eb440f6"},{"name":"london","block":12965000,"forkHash":"0xb715077d"},{"name":"arrowGlacier","block":13773000,"forkHash":"0x20c327fc"},{"name":"grayGlacier","block":15050000,"forkHash":"0xf0afd0e3"},{"//_comment":"The forkHash will remain same as mergeForkIdTransition is post merge, terminal block: https://etherscan.io/block/15537393","name":"merge","ttd":"58750000000000000000000","block":15537394,"forkHash":"0xf0afd0e3"},{"name":"mergeForkIdTransition","block":null,"forkHash":null},{"name":"shanghai","block":null,"timestamp":"1681338455","forkHash":"0xdce96c2d"}],"bootstrapNodes":[{"ip":"18.138.108.67","port":30303,"id":"d860a01f9722d78051619d1e2351aba3f43f943f6f00718d1b9baa4101932a1f5011f16bb2b1bb35db20d6fe28fa0bf09636d26a87d31de9ec6203eeedb1f666","location":"ap-southeast-1-001","comment":"bootnode-aws-ap-southeast-1-001"},{"ip":"3.209.45.79","port":30303,"id":"22a8232c3abc76a16ae9d6c3b164f98775fe226f0917b0ca871128a74a8e9630b458460865bab457221f1d448dd9791d24c4e5d88786180ac185df813a68d4de","location":"us-east-1-001","comment":"bootnode-aws-us-east-1-001"},{"ip":"65.108.70.101","port":30303,"id":"2b252ab6a1d0f971d9722cb839a42cb81db019ba44c08754628ab4a823487071b5695317c8ccd085219c3a03af063495b2f1da8d18218da2d6a82981b45e6ffc","location":"eu-west-1-001","comment":"bootnode-hetzner-hel"},{"ip":"157.90.35.166","port":30303,"id":"4aeb4ab6c14b23e2c4cfdce879c04b0748a20d8e9b59e25ded2a08143e265c6c25936e74cbc8e641e3312ca288673d91f2f93f8e277de3cfa444ecdaaf982052","location":"eu-central-1-001","comment":"bootnode-hetzner-fsn"}],"dnsNetworks":["enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.mainnet.ethdisco.net"]}')},54135:e=>{"use strict";e.exports=JSON.parse('{"name":"rinkeby","chainId":4,"networkId":4,"defaultHardfork":"london","consensus":{"type":"poa","algorithm":"clique","clique":{"period":15,"epoch":30000}},"comment":"PoA test network","url":"https://www.rinkeby.io","genesis":{"timestamp":"0x58ee40ba","gasLimit":4700000,"difficulty":1,"nonce":"0x0000000000000000","extraData":"0x52657370656374206d7920617574686f7269746168207e452e436172746d616e42eb768f2244c8811c63729a21a3569731535f067ffc57839b00206d1ad20c69a1981b489f772031b279182d99e65703f0076e4812653aab85fca0f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"},"hardforks":[{"name":"chainstart","block":0,"forkHash":"0x3b8e0691"},{"name":"homestead","block":1,"forkHash":"0x60949295"},{"name":"tangerineWhistle","block":2,"forkHash":"0x8bde40dd"},{"name":"spuriousDragon","block":3,"forkHash":"0xcb3a64bb"},{"name":"byzantium","block":1035301,"forkHash":"0x8d748b57"},{"name":"constantinople","block":3660663,"forkHash":"0xe49cab14"},{"name":"petersburg","block":4321234,"forkHash":"0xafec6b27"},{"name":"istanbul","block":5435345,"forkHash":"0xcbdb8838"},{"name":"berlin","block":8290928,"forkHash":"0x6910c8bd"},{"name":"london","block":8897988,"forkHash":"0x8e29f2f3"},{"name":"merge","block":null,"forkHash":null},{"name":"shanghai","block":null,"forkHash":null}],"bootstrapNodes":[{"ip":"52.169.42.101","port":30303,"id":"a24ac7c5484ef4ed0c5eb2d36620ba4e4aa13b8c84684e1b4aab0cebea2ae45cb4d375b77eab56516d34bfbd3c1a833fc51296ff084b770b94fb9028c4d25ccf","location":"","comment":"IE"},{"ip":"52.3.158.184","port":30303,"id":"343149e4feefa15d882d9fe4ac7d88f885bd05ebb735e547f12e12080a9fa07c8014ca6fd7f373123488102fe5e34111f8509cf0b7de3f5b44339c9f25e87cb8","location":"","comment":"INFURA"},{"ip":"159.89.28.211","port":30303,"id":"b6b28890b006743680c52e64e0d16db57f28124885595fa03a562be1d2bf0f3a1da297d56b13da25fb992888fd556d4c1a27b1f39d531bde7de1921c90061cc6","location":"","comment":"AKASHA"}],"dnsNetworks":["enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.rinkeby.ethdisco.net"]}')},35358:e=>{"use strict";e.exports=JSON.parse('{"name":"ropsten","chainId":3,"networkId":3,"defaultHardfork":"merge","consensus":{"type":"pow","algorithm":"ethash","ethash":{}},"comment":"PoW test network","url":"https://github.com/ethereum/ropsten","genesis":{"gasLimit":16777216,"difficulty":1048576,"nonce":"0x0000000000000042","extraData":"0x3535353535353535353535353535353535353535353535353535353535353535"},"hardforks":[{"name":"chainstart","block":0,"forkHash":"0x30c7ddbc"},{"name":"homestead","block":0,"forkHash":"0x30c7ddbc"},{"name":"tangerineWhistle","block":0,"forkHash":"0x30c7ddbc"},{"name":"spuriousDragon","block":10,"forkHash":"0x63760190"},{"name":"byzantium","block":1700000,"forkHash":"0x3ea159c7"},{"name":"constantinople","block":4230000,"forkHash":"0x97b544f3"},{"name":"petersburg","block":4939394,"forkHash":"0xd6e2149b"},{"name":"istanbul","block":6485846,"forkHash":"0x4bc66396"},{"name":"muirGlacier","block":7117117,"forkHash":"0x6727ef90"},{"name":"berlin","block":9812189,"forkHash":"0xa157d377"},{"name":"london","block":10499401,"forkHash":"0x7119b6b3"},{"//_comment":"The forkHash will remain same as mergeForkIdTransition is post merge","name":"merge","ttd":"50000000000000000","block":null,"forkHash":"0x7119b6b3"},{"name":"mergeForkIdTransition","block":null,"forkHash":null},{"name":"shanghai","block":null,"forkHash":null}],"bootstrapNodes":[{"ip":"52.176.7.10","port":30303,"id":"30b7ab30a01c124a6cceca36863ece12c4f5fa68e3ba9b0b51407ccc002eeed3b3102d20a88f1c1d3c3154e2449317b8ef95090e77b312d5cc39354f86d5d606","location":"","comment":"US-Azure geth"},{"ip":"52.176.100.77","port":30303,"id":"865a63255b3bb68023b6bffd5095118fcc13e79dcf014fe4e47e065c350c7cc72af2e53eff895f11ba1bbb6a2b33271c1116ee870f266618eadfc2e78aa7349c","location":"","comment":"US-Azure parity"},{"ip":"52.232.243.152","port":30303,"id":"6332792c4a00e3e4ee0926ed89e0d27ef985424d97b6a45bf0f23e51f0dcb5e66b875777506458aea7af6f9e4ffb69f43f3778ee73c81ed9d34c51c4b16b0b0f","location":"","comment":"Parity"},{"ip":"192.81.208.223","port":30303,"id":"94c15d1b9e2fe7ce56e458b9a3b672ef11894ddedd0c6f247e0f1d3487f52b66208fb4aeb8179fce6e3a749ea93ed147c37976d67af557508d199d9594c35f09","location":"","comment":"@gpip"}],"dnsNetworks":["enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.ropsten.ethdisco.net"]}')},6956:e=>{"use strict";e.exports=JSON.parse('{"name":"sepolia","chainId":11155111,"networkId":11155111,"defaultHardfork":"merge","consensus":{"type":"pow","algorithm":"ethash","ethash":{}},"comment":"PoW test network to replace Ropsten","url":"https://github.com/ethereum/go-ethereum/pull/23730","genesis":{"timestamp":"0x6159af19","gasLimit":30000000,"difficulty":131072,"nonce":"0x0000000000000000","extraData":"0x5365706f6c69612c20417468656e732c204174746963612c2047726565636521"},"hardforks":[{"name":"chainstart","block":0,"forkHash":"0xfe3366e7"},{"name":"homestead","block":0,"forkHash":"0xfe3366e7"},{"name":"tangerineWhistle","block":0,"forkHash":"0xfe3366e7"},{"name":"spuriousDragon","block":0,"forkHash":"0xfe3366e7"},{"name":"byzantium","block":0,"forkHash":"0xfe3366e7"},{"name":"constantinople","block":0,"forkHash":"0xfe3366e7"},{"name":"petersburg","block":0,"forkHash":"0xfe3366e7"},{"name":"istanbul","block":0,"forkHash":"0xfe3366e7"},{"name":"muirGlacier","block":0,"forkHash":"0xfe3366e7"},{"name":"berlin","block":0,"forkHash":"0xfe3366e7"},{"name":"london","block":0,"forkHash":"0xfe3366e7"},{"//_comment":"The forkHash will remain same as mergeForkIdTransition is post merge, terminal block: https://sepolia.etherscan.io/block/1450408","name":"merge","ttd":"17000000000000000","block":1450409,"forkHash":"0xfe3366e7"},{"name":"mergeForkIdTransition","block":1735371,"forkHash":"0xb96cbd13"},{"name":"shanghai","block":null,"timestamp":"1677557088","forkHash":"0xf7f9bc08"}],"bootstrapNodes":[{"ip":"18.168.182.86","port":30303,"id":"9246d00bc8fd1742e5ad2428b80fc4dc45d786283e05ef6edbd9002cbc335d40998444732fbe921cb88e1d2c73d1b1de53bae6a2237996e9bfe14f871baf7066","location":"","comment":"geth"},{"ip":"52.14.151.177","port":30303,"id":"ec66ddcf1a974950bd4c782789a7e04f8aa7110a72569b6e65fcd51e937e74eed303b1ea734e4d19cfaec9fbff9b6ee65bf31dcb50ba79acce9dd63a6aca61c7","location":"","comment":"besu"},{"ip":"165.22.196.173","port":30303,"id":"ce970ad2e9daa9e14593de84a8b49da3d54ccfdf83cbc4fe519cb8b36b5918ed4eab087dedd4a62479b8d50756b492d5f762367c8d20329a7854ec01547568a6","location":"","comment":"EF"},{"ip":"65.108.95.67","port":30303,"id":"075503b13ed736244896efcde2a992ec0b451357d46cb7a8132c0384721742597fc8f0d91bbb40bb52e7d6e66728d36a1fda09176294e4a30cfac55dcce26bc6","location":"","comment":"lodestar"}],"dnsNetworks":["enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.sepolia.ethdisco.net"]}')},27303:e=>{"use strict";e.exports=JSON.parse('{"name":"EIP-1153","number":1153,"comment":"Transient Storage","url":"https://eips.ethereum.org/EIPS/eip-1153","status":"Review","minimumHardfork":"chainstart","requiredEIPs":[],"gasConfig":{},"gasPrices":{"tstore":{"v":100,"d":"Base fee of the TSTORE opcode"},"tload":{"v":100,"d":"Base fee of the TLOAD opcode"}},"vm":{},"pow":{}}')},57346:e=>{"use strict";e.exports=JSON.parse('{"name":"EIP-1559","number":1559,"comment":"Fee market change for ETH 1.0 chain","url":"https://eips.ethereum.org/EIPS/eip-1559","status":"Final","minimumHardfork":"berlin","requiredEIPs":[2930],"gasConfig":{"baseFeeMaxChangeDenominator":{"v":8,"d":"Maximum base fee change denominator"},"elasticityMultiplier":{"v":2,"d":"Maximum block gas target elasticity"},"initialBaseFee":{"v":1000000000,"d":"Initial base fee on first EIP1559 block"}},"gasPrices":{},"vm":{},"pow":{}}')},39774:e=>{"use strict";e.exports=JSON.parse('{"name":"EIP-2315","number":2315,"comment":"Simple subroutines for the EVM","url":"https://eips.ethereum.org/EIPS/eip-2315","status":"Draft","minimumHardfork":"istanbul","gasConfig":{},"gasPrices":{"beginsub":{"v":2,"d":"Base fee of the BEGINSUB opcode"},"returnsub":{"v":5,"d":"Base fee of the RETURNSUB opcode"},"jumpsub":{"v":10,"d":"Base fee of the JUMPSUB opcode"}},"vm":{},"pow":{}}')},16928:e=>{"use strict";e.exports=JSON.parse('{"name":"EIP-2537","number":2537,"comment":"BLS12-381 precompiles","url":"https://eips.ethereum.org/EIPS/eip-2537","status":"Draft","minimumHardfork":"chainstart","gasConfig":{},"gasPrices":{"Bls12381G1AddGas":{"v":600,"d":"Gas cost of a single BLS12-381 G1 addition precompile-call"},"Bls12381G1MulGas":{"v":12000,"d":"Gas cost of a single BLS12-381 G1 multiplication precompile-call"},"Bls12381G2AddGas":{"v":4500,"d":"Gas cost of a single BLS12-381 G2 addition precompile-call"},"Bls12381G2MulGas":{"v":55000,"d":"Gas cost of a single BLS12-381 G2 multiplication precompile-call"},"Bls12381PairingBaseGas":{"v":115000,"d":"Base gas cost of BLS12-381 pairing check"},"Bls12381PairingPerPairGas":{"v":23000,"d":"Per-pair gas cost of BLS12-381 pairing check"},"Bls12381MapG1Gas":{"v":5500,"d":"Gas cost of BLS12-381 map field element to G1"},"Bls12381MapG2Gas":{"v":110000,"d":"Gas cost of BLS12-381 map field element to G2"},"Bls12381MultiExpGasDiscount":{"v":[[1,1200],[2,888],[3,764],[4,641],[5,594],[6,547],[7,500],[8,453],[9,438],[10,423],[11,408],[12,394],[13,379],[14,364],[15,349],[16,334],[17,330],[18,326],[19,322],[20,318],[21,314],[22,310],[23,306],[24,302],[25,298],[26,294],[27,289],[28,285],[29,281],[30,277],[31,273],[32,269],[33,268],[34,266],[35,265],[36,263],[37,262],[38,260],[39,259],[40,257],[41,256],[42,254],[43,253],[44,251],[45,250],[46,248],[47,247],[48,245],[49,244],[50,242],[51,241],[52,239],[53,238],[54,236],[55,235],[56,233],[57,232],[58,231],[59,229],[60,228],[61,226],[62,225],[63,223],[64,222],[65,221],[66,220],[67,219],[68,219],[69,218],[70,217],[71,216],[72,216],[73,215],[74,214],[75,213],[76,213],[77,212],[78,211],[79,211],[80,210],[81,209],[82,208],[83,208],[84,207],[85,206],[86,205],[87,205],[88,204],[89,203],[90,202],[91,202],[92,201],[93,200],[94,199],[95,199],[96,198],[97,197],[98,196],[99,196],[100,195],[101,194],[102,193],[103,193],[104,192],[105,191],[106,191],[107,190],[108,189],[109,188],[110,188],[111,187],[112,186],[113,185],[114,185],[115,184],[116,183],[117,182],[118,182],[119,181],[120,180],[121,179],[122,179],[123,178],[124,177],[125,176],[126,176],[127,175],[128,174]],"d":"Discount gas costs of calls to the MultiExp precompiles with `k` (point, scalar) pair"}},"vm":{},"pow":{}}')},78143:e=>{"use strict";e.exports=JSON.parse('{"name":"EIP-2565","number":2565,"comment":"ModExp gas cost","url":"https://eips.ethereum.org/EIPS/eip-2565","status":"Final","minimumHardfork":"byzantium","gasConfig":{},"gasPrices":{"modexpGquaddivisor":{"v":3,"d":"Gquaddivisor from modexp precompile for gas calculation"}},"vm":{},"pow":{}}')},45620:e=>{"use strict";e.exports=JSON.parse('{"name":"EIP-2718","comment":"Typed Transaction Envelope","url":"https://eips.ethereum.org/EIPS/eip-2718","status":"Final","minimumHardfork":"chainstart","gasConfig":{},"gasPrices":{},"vm":{},"pow":{}}')},93689:e=>{"use strict";e.exports=JSON.parse('{"name":"EIP-2929","comment":"Gas cost increases for state access opcodes","url":"https://eips.ethereum.org/EIPS/eip-2929","status":"Final","minimumHardfork":"chainstart","gasConfig":{},"gasPrices":{"coldsload":{"v":2100,"d":"Gas cost of the first read of storage from a given location (per transaction)"},"coldaccountaccess":{"v":2600,"d":"Gas cost of the first read of a given address (per transaction)"},"warmstorageread":{"v":100,"d":"Gas cost of reading storage locations which have already loaded \'cold\'"},"sstoreCleanGasEIP2200":{"v":2900,"d":"Once per SSTORE operation from clean non-zero to something else"},"sstoreNoopGasEIP2200":{"v":100,"d":"Once per SSTORE operation if the value doesn\'t change"},"sstoreDirtyGasEIP2200":{"v":100,"d":"Once per SSTORE operation if a dirty value is changed"},"sstoreInitRefundEIP2200":{"v":19900,"d":"Once per SSTORE operation for resetting to the original zero value"},"sstoreCleanRefundEIP2200":{"v":4900,"d":"Once per SSTORE operation for resetting to the original non-zero value"},"call":{"v":0,"d":"Base fee of the CALL opcode"},"callcode":{"v":0,"d":"Base fee of the CALLCODE opcode"},"delegatecall":{"v":0,"d":"Base fee of the DELEGATECALL opcode"},"staticcall":{"v":0,"d":"Base fee of the STATICCALL opcode"},"balance":{"v":0,"d":"Base fee of the BALANCE opcode"},"extcodesize":{"v":0,"d":"Base fee of the EXTCODESIZE opcode"},"extcodecopy":{"v":0,"d":"Base fee of the EXTCODECOPY opcode"},"extcodehash":{"v":0,"d":"Base fee of the EXTCODEHASH opcode"},"sload":{"v":0,"d":"Base fee of the SLOAD opcode"},"sstore":{"v":0,"d":"Base fee of the SSTORE opcode"}},"vm":{},"pow":{}}')},58631:e=>{"use strict";e.exports=JSON.parse('{"name":"EIP-2930","comment":"Optional access lists","url":"https://eips.ethereum.org/EIPS/eip-2930","status":"Final","minimumHardfork":"istanbul","requiredEIPs":[2718,2929],"gasConfig":{},"gasPrices":{"accessListStorageKeyCost":{"v":1900,"d":"Gas cost per storage key in an Access List transaction"},"accessListAddressCost":{"v":2400,"d":"Gas cost per storage key in an Access List transaction"}},"vm":{},"pow":{}}')},16234:e=>{"use strict";e.exports=JSON.parse('{"name":"EIP-3074","number":3074,"comment":"AUTH and AUTHCALL opcodes","url":"https://eips.ethereum.org/EIPS/eip-3074","status":"Review","minimumHardfork":"london","gasConfig":{},"gasPrices":{"auth":{"v":3100,"d":"Gas cost of the AUTH opcode"},"authcall":{"v":0,"d":"Gas cost of the AUTHCALL opcode"},"authcallValueTransfer":{"v":6700,"d":"Paid for CALL when the value transfer is non-zero"}},"vm":{},"pow":{}}')},37079:e=>{"use strict";e.exports=JSON.parse('{"name":"EIP-3198","number":3198,"comment":"BASEFEE opcode","url":"https://eips.ethereum.org/EIPS/eip-3198","status":"Final","minimumHardfork":"london","gasConfig":{},"gasPrices":{"basefee":{"v":2,"d":"Gas cost of the BASEFEE opcode"}},"vm":{},"pow":{}}')},88179:e=>{"use strict";e.exports=JSON.parse('{"name":"EIP-3529","comment":"Reduction in refunds","url":"https://eips.ethereum.org/EIPS/eip-3529","status":"Final","minimumHardfork":"berlin","requiredEIPs":[2929],"gasConfig":{"maxRefundQuotient":{"v":5,"d":"Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)"}},"gasPrices":{"selfdestructRefund":{"v":0,"d":"Refunded following a selfdestruct operation"},"sstoreClearRefundEIP2200":{"v":4800,"d":"Once per SSTORE operation for clearing an originally existing storage slot"}},"vm":{},"pow":{}}')},48803:e=>{"use strict";e.exports=JSON.parse('{"name":"EIP-3540","number":3540,"comment":"EVM Object Format (EOF) v1","url":"https://eips.ethereum.org/EIPS/eip-3540","status":"Review","minimumHardfork":"london","requiredEIPs":[3541],"gasConfig":{},"gasPrices":{},"vm":{},"pow":{}}')},812:e=>{"use strict";e.exports=JSON.parse('{"name":"EIP-3541","comment":"Reject new contracts starting with the 0xEF byte","url":"https://eips.ethereum.org/EIPS/eip-3541","status":"Final","minimumHardfork":"berlin","requiredEIPs":[],"gasConfig":{},"gasPrices":{},"vm":{},"pow":{}}')},81884:e=>{"use strict";e.exports=JSON.parse('{"name":"EIP-3554","comment":"Reduction in refunds","url":"Difficulty Bomb Delay to December 1st 2021","status":"Final","minimumHardfork":"muirGlacier","requiredEIPs":[],"gasConfig":{},"gasPrices":{},"vm":{},"pow":{"difficultyBombDelay":{"v":9500000,"d":"the amount of blocks to delay the difficulty bomb with"}}}')},12887:e=>{"use strict";e.exports=JSON.parse('{"name":"EIP-3607","number":3607,"comment":"Reject transactions from senders with deployed code","url":"https://eips.ethereum.org/EIPS/eip-3607","status":"Final","minimumHardfork":"chainstart","requiredEIPs":[],"gasConfig":{},"gasPrices":{},"vm":{},"pow":{}}')},99349:e=>{"use strict";e.exports=JSON.parse('{"name":"EIP-3651","number":3198,"comment":"Warm COINBASE","url":"https://eips.ethereum.org/EIPS/eip-3651","status":"Review","minimumHardfork":"london","requiredEIPs":[2929],"gasConfig":{},"gasPrices":{},"vm":{},"pow":{}}')},92914:e=>{"use strict";e.exports=JSON.parse('{"name":"EIP-3670","number":3670,"comment":"EOF - Code Validation","url":"https://eips.ethereum.org/EIPS/eip-3670","status":"Review","minimumHardfork":"london","requiredEIPs":[3540],"gasConfig":{},"gasPrices":{},"vm":{},"pow":{}}')},6131:e=>{"use strict";e.exports=JSON.parse('{"name":"EIP-3675","number":3675,"comment":"Upgrade consensus to Proof-of-Stake","url":"https://eips.ethereum.org/EIPS/eip-3675","status":"Final","minimumHardfork":"london","requiredEIPs":[],"gasConfig":{},"gasPrices":{},"vm":{},"pow":{}}')},86035:e=>{"use strict";e.exports=JSON.parse('{"name":"EIP-3855","number":3855,"comment":"PUSH0 instruction","url":"https://eips.ethereum.org/EIPS/eip-3855","status":"Review","minimumHardfork":"chainstart","requiredEIPs":[],"gasConfig":{},"gasPrices":{"push0":{"v":2,"d":"Base fee of the PUSH0 opcode"}},"vm":{},"pow":{}}')},19331:e=>{"use strict";e.exports=JSON.parse('{"name":"EIP-3860","number":3860,"comment":"Limit and meter initcode","url":"https://eips.ethereum.org/EIPS/eip-3860","status":"Review","minimumHardfork":"spuriousDragon","requiredEIPs":[],"gasConfig":{},"gasPrices":{"initCodeWordCost":{"v":2,"d":"Gas to pay for each word (32 bytes) of initcode when creating a contract"}},"vm":{"maxInitCodeSize":{"v":49152,"d":"Maximum length of initialization code when creating a contract"}},"pow":{}}')},85878:e=>{"use strict";e.exports=JSON.parse('{"name":"EIP-4345","number":4345,"comment":"Difficulty Bomb Delay to June 2022","url":"https://eips.ethereum.org/EIPS/eip-4345","status":"Final","minimumHardfork":"london","gasConfig":{},"gasPrices":{},"vm":{},"pow":{"difficultyBombDelay":{"v":10700000,"d":"the amount of blocks to delay the difficulty bomb with"}}}')},84648:e=>{"use strict";e.exports=JSON.parse('{"name":"EIP-4399","number":4399,"comment":"Supplant DIFFICULTY opcode with PREVRANDAO","url":"https://eips.ethereum.org/EIPS/eip-4399","status":"Review","minimumHardfork":"london","requiredEIPs":[],"gasConfig":{},"gasPrices":{},"vm":{},"pow":{}}')},16786:e=>{"use strict";e.exports=JSON.parse('{"name":"EIP-4844","number":4844,"comment":"Shard Blob Transactions","url":"https://eips.ethereum.org/EIPS/eip-4844","status":"Draft","minimumHardfork":"merge","requiredEIPs":[1559,2718,2930,4895],"gasConfig":{"dataGasPerBlob":{"v":131072,"d":"The base fee for data gas per blob"},"targetDataGasPerBlock":{"v":262144,"d":"The target data gas consumed per block"},"maxDataGasPerBlock":{"v":524288,"d":"The max data gas allowable per block"},"dataGasPriceUpdateFraction":{"v":2225652,"d":"The denominator used in the exponential when calculating a data gas price"}},"gasPrices":{"simpleGasPerBlob":{"v":12000,"d":"The basic gas fee for each blob"},"minDataGasPrice":{"v":1,"d":"The minimum fee per data gas"},"kzgPointEvaluationGasPrecompilePrice":{"v":50000,"d":"The fee associated with the point evaluation precompile"},"datahash":{"v":3,"d":"Base fee of the DATAHASH opcode"}},"sharding":{"blobCommitmentVersionKzg":{"v":1,"d":"The number indicated a versioned hash is a KZG commitment"},"fieldElementsPerBlob":{"v":4096,"d":"The number of field elements allowed per blob"}},"vm":{},"pow":{}}')},1391:e=>{"use strict";e.exports=JSON.parse('{"name":"EIP-4895","number":4895,"comment":"Beacon chain push withdrawals as operations","url":"https://eips.ethereum.org/EIPS/eip-4895","status":"Review","minimumHardfork":"merge","requiredEIPs":[],"gasConfig":{},"gasPrices":{},"vm":{},"pow":{}}')},21471:e=>{"use strict";e.exports=JSON.parse('{"name":"EIP-5133","number":5133,"comment":"Delaying Difficulty Bomb to mid-September 2022","url":"https://eips.ethereum.org/EIPS/eip-5133","status":"Draft","minimumHardfork":"grayGlacier","gasConfig":{},"gasPrices":{},"vm":{},"pow":{"difficultyBombDelay":{"v":11400000,"d":"the amount of blocks to delay the difficulty bomb with"}}}')},28748:e=>{"use strict";e.exports=JSON.parse('{"name":"arrowGlacier","comment":"HF to delay the difficulty bomb","url":"https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/arrow-glacier.md","status":"Final","eips":[4345],"gasConfig":{},"gasPrices":{},"vm":{},"pow":{}}')},63430:e=>{"use strict";e.exports=JSON.parse('{"name":"berlin","comment":"HF targeted for July 2020 following the Muir Glacier HF","url":"https://eips.ethereum.org/EIPS/eip-2070","status":"Final","eips":[2565,2929,2718,2930]}')},25239:e=>{"use strict";e.exports=JSON.parse('{"name":"byzantium","comment":"Hardfork with new precompiles, instructions and other protocol changes","url":"https://eips.ethereum.org/EIPS/eip-609","status":"Final","gasConfig":{},"gasPrices":{"modexpGquaddivisor":{"v":20,"d":"Gquaddivisor from modexp precompile for gas calculation"},"ecAdd":{"v":500,"d":"Gas costs for curve addition precompile"},"ecMul":{"v":40000,"d":"Gas costs for curve multiplication precompile"},"ecPairing":{"v":100000,"d":"Base gas costs for curve pairing precompile"},"ecPairingWord":{"v":80000,"d":"Gas costs regarding curve pairing precompile input length"},"revert":{"v":0,"d":"Base fee of the REVERT opcode"},"staticcall":{"v":700,"d":"Base fee of the STATICCALL opcode"},"returndatasize":{"v":2,"d":"Base fee of the RETURNDATASIZE opcode"},"returndatacopy":{"v":3,"d":"Base fee of the RETURNDATACOPY opcode"}},"vm":{},"pow":{"minerReward":{"v":"3000000000000000000","d":"the amount a miner get rewarded for mining a block"},"difficultyBombDelay":{"v":3000000,"d":"the amount of blocks to delay the difficulty bomb with"}}}')},41220:e=>{"use strict";e.exports=JSON.parse('{"name":"chainstart","comment":"Start of the Ethereum main chain","url":"","status":"","gasConfig":{"minGasLimit":{"v":5000,"d":"Minimum the gas limit may ever be"},"gasLimitBoundDivisor":{"v":1024,"d":"The bound divisor of the gas limit, used in update calculations"},"maxRefundQuotient":{"v":2,"d":"Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)"}},"gasPrices":{"base":{"v":2,"d":"Gas base cost, used e.g. for ChainID opcode (Istanbul)"},"tierStep":{"v":[0,2,3,5,8,10,20],"d":"Once per operation, for a selection of them"},"exp":{"v":10,"d":"Base fee of the EXP opcode"},"expByte":{"v":10,"d":"Times ceil(log256(exponent)) for the EXP instruction"},"sha3":{"v":30,"d":"Base fee of the SHA3 opcode"},"sha3Word":{"v":6,"d":"Once per word of the SHA3 operation\'s data"},"sload":{"v":50,"d":"Base fee of the SLOAD opcode"},"sstoreSet":{"v":20000,"d":"Once per SSTORE operation if the zeroness changes from zero"},"sstoreReset":{"v":5000,"d":"Once per SSTORE operation if the zeroness does not change from zero"},"sstoreRefund":{"v":15000,"d":"Once per SSTORE operation if the zeroness changes to zero"},"jumpdest":{"v":1,"d":"Base fee of the JUMPDEST opcode"},"log":{"v":375,"d":"Base fee of the LOG opcode"},"logData":{"v":8,"d":"Per byte in a LOG* operation\'s data"},"logTopic":{"v":375,"d":"Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas"},"create":{"v":32000,"d":"Base fee of the CREATE opcode"},"call":{"v":40,"d":"Base fee of the CALL opcode"},"callStipend":{"v":2300,"d":"Free gas given at beginning of call"},"callValueTransfer":{"v":9000,"d":"Paid for CALL when the value transfor is non-zero"},"callNewAccount":{"v":25000,"d":"Paid for CALL when the destination address didn\'t exist prior"},"selfdestructRefund":{"v":24000,"d":"Refunded following a selfdestruct operation"},"memory":{"v":3,"d":"Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL"},"quadCoeffDiv":{"v":512,"d":"Divisor for the quadratic particle of the memory cost equation"},"createData":{"v":200,"d":""},"tx":{"v":21000,"d":"Per transaction. NOTE: Not payable on data of calls between transactions"},"txCreation":{"v":32000,"d":"The cost of creating a contract via tx"},"txDataZero":{"v":4,"d":"Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions"},"txDataNonZero":{"v":68,"d":"Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions"},"copy":{"v":3,"d":"Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added"},"ecRecover":{"v":3000,"d":""},"sha256":{"v":60,"d":""},"sha256Word":{"v":12,"d":""},"ripemd160":{"v":600,"d":""},"ripemd160Word":{"v":120,"d":""},"identity":{"v":15,"d":""},"identityWord":{"v":3,"d":""},"stop":{"v":0,"d":"Base fee of the STOP opcode"},"add":{"v":3,"d":"Base fee of the ADD opcode"},"mul":{"v":5,"d":"Base fee of the MUL opcode"},"sub":{"v":3,"d":"Base fee of the SUB opcode"},"div":{"v":5,"d":"Base fee of the DIV opcode"},"sdiv":{"v":5,"d":"Base fee of the SDIV opcode"},"mod":{"v":5,"d":"Base fee of the MOD opcode"},"smod":{"v":5,"d":"Base fee of the SMOD opcode"},"addmod":{"v":8,"d":"Base fee of the ADDMOD opcode"},"mulmod":{"v":8,"d":"Base fee of the MULMOD opcode"},"signextend":{"v":5,"d":"Base fee of the SIGNEXTEND opcode"},"lt":{"v":3,"d":"Base fee of the LT opcode"},"gt":{"v":3,"d":"Base fee of the GT opcode"},"slt":{"v":3,"d":"Base fee of the SLT opcode"},"sgt":{"v":3,"d":"Base fee of the SGT opcode"},"eq":{"v":3,"d":"Base fee of the EQ opcode"},"iszero":{"v":3,"d":"Base fee of the ISZERO opcode"},"and":{"v":3,"d":"Base fee of the AND opcode"},"or":{"v":3,"d":"Base fee of the OR opcode"},"xor":{"v":3,"d":"Base fee of the XOR opcode"},"not":{"v":3,"d":"Base fee of the NOT opcode"},"byte":{"v":3,"d":"Base fee of the BYTE opcode"},"address":{"v":2,"d":"Base fee of the ADDRESS opcode"},"balance":{"v":20,"d":"Base fee of the BALANCE opcode"},"origin":{"v":2,"d":"Base fee of the ORIGIN opcode"},"caller":{"v":2,"d":"Base fee of the CALLER opcode"},"callvalue":{"v":2,"d":"Base fee of the CALLVALUE opcode"},"calldataload":{"v":3,"d":"Base fee of the CALLDATALOAD opcode"},"calldatasize":{"v":2,"d":"Base fee of the CALLDATASIZE opcode"},"calldatacopy":{"v":3,"d":"Base fee of the CALLDATACOPY opcode"},"codesize":{"v":2,"d":"Base fee of the CODESIZE opcode"},"codecopy":{"v":3,"d":"Base fee of the CODECOPY opcode"},"gasprice":{"v":2,"d":"Base fee of the GASPRICE opcode"},"extcodesize":{"v":20,"d":"Base fee of the EXTCODESIZE opcode"},"extcodecopy":{"v":20,"d":"Base fee of the EXTCODECOPY opcode"},"blockhash":{"v":20,"d":"Base fee of the BLOCKHASH opcode"},"coinbase":{"v":2,"d":"Base fee of the COINBASE opcode"},"timestamp":{"v":2,"d":"Base fee of the TIMESTAMP opcode"},"number":{"v":2,"d":"Base fee of the NUMBER opcode"},"difficulty":{"v":2,"d":"Base fee of the DIFFICULTY opcode"},"gaslimit":{"v":2,"d":"Base fee of the GASLIMIT opcode"},"pop":{"v":2,"d":"Base fee of the POP opcode"},"mload":{"v":3,"d":"Base fee of the MLOAD opcode"},"mstore":{"v":3,"d":"Base fee of the MSTORE opcode"},"mstore8":{"v":3,"d":"Base fee of the MSTORE8 opcode"},"sstore":{"v":0,"d":"Base fee of the SSTORE opcode"},"jump":{"v":8,"d":"Base fee of the JUMP opcode"},"jumpi":{"v":10,"d":"Base fee of the JUMPI opcode"},"pc":{"v":2,"d":"Base fee of the PC opcode"},"msize":{"v":2,"d":"Base fee of the MSIZE opcode"},"gas":{"v":2,"d":"Base fee of the GAS opcode"},"push":{"v":3,"d":"Base fee of the PUSH opcode"},"dup":{"v":3,"d":"Base fee of the DUP opcode"},"swap":{"v":3,"d":"Base fee of the SWAP opcode"},"callcode":{"v":40,"d":"Base fee of the CALLCODE opcode"},"return":{"v":0,"d":"Base fee of the RETURN opcode"},"invalid":{"v":0,"d":"Base fee of the INVALID opcode"},"selfdestruct":{"v":0,"d":"Base fee of the SELFDESTRUCT opcode"}},"vm":{"stackLimit":{"v":1024,"d":"Maximum size of VM stack allowed"},"callCreateDepth":{"v":1024,"d":"Maximum depth of call/create stack"},"maxExtraDataSize":{"v":32,"d":"Maximum size extra data may be after Genesis"}},"pow":{"minimumDifficulty":{"v":131072,"d":"The minimum that the difficulty may ever be"},"difficultyBoundDivisor":{"v":2048,"d":"The bound divisor of the difficulty, used in the update calculations"},"durationLimit":{"v":13,"d":"The decision boundary on the blocktime duration used to determine whether difficulty should go up or not"},"epochDuration":{"v":30000,"d":"Duration between proof-of-work epochs"},"timebombPeriod":{"v":100000,"d":"Exponential difficulty timebomb period"},"minerReward":{"v":"5000000000000000000","d":"the amount a miner get rewarded for mining a block"},"difficultyBombDelay":{"v":0,"d":"the amount of blocks to delay the difficulty bomb with"}}}')},72175:e=>{"use strict";e.exports=JSON.parse('{"name":"constantinople","comment":"Postponed hardfork including EIP-1283 (SSTORE gas metering changes)","url":"https://eips.ethereum.org/EIPS/eip-1013","status":"Final","gasConfig":{},"gasPrices":{"netSstoreNoopGas":{"v":200,"d":"Once per SSTORE operation if the value doesn\'t change"},"netSstoreInitGas":{"v":20000,"d":"Once per SSTORE operation from clean zero"},"netSstoreCleanGas":{"v":5000,"d":"Once per SSTORE operation from clean non-zero"},"netSstoreDirtyGas":{"v":200,"d":"Once per SSTORE operation from dirty"},"netSstoreClearRefund":{"v":15000,"d":"Once per SSTORE operation for clearing an originally existing storage slot"},"netSstoreResetRefund":{"v":4800,"d":"Once per SSTORE operation for resetting to the original non-zero value"},"netSstoreResetClearRefund":{"v":19800,"d":"Once per SSTORE operation for resetting to the original zero value"},"shl":{"v":3,"d":"Base fee of the SHL opcode"},"shr":{"v":3,"d":"Base fee of the SHR opcode"},"sar":{"v":3,"d":"Base fee of the SAR opcode"},"extcodehash":{"v":400,"d":"Base fee of the EXTCODEHASH opcode"},"create2":{"v":32000,"d":"Base fee of the CREATE2 opcode"}},"vm":{},"pow":{"minerReward":{"v":"2000000000000000000","d":"The amount a miner gets rewarded for mining a block"},"difficultyBombDelay":{"v":5000000,"d":"the amount of blocks to delay the difficulty bomb with"}}}')},39684:e=>{"use strict";e.exports=JSON.parse('{"name":"dao","comment":"DAO rescue hardfork","url":"https://eips.ethereum.org/EIPS/eip-779","status":"Final","gasConfig":{},"gasPrices":{},"vm":{},"pow":{}}')},37713:e=>{"use strict";e.exports=JSON.parse('{"name":"grayGlacier","comment":"Delaying the difficulty bomb to Mid September 2022","url":"https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/gray-glacier.md","status":"Draft","eips":[5133],"gasConfig":{},"gasPrices":{},"vm":{},"pow":{}}')},35109:e=>{"use strict";e.exports=JSON.parse('{"name":"homestead","comment":"Homestead hardfork with protocol and network changes","url":"https://eips.ethereum.org/EIPS/eip-606","status":"Final","gasConfig":{},"gasPrices":{"delegatecall":{"v":40,"d":"Base fee of the DELEGATECALL opcode"}},"vm":{},"pow":{}}')},97947:e=>{"use strict";e.exports=JSON.parse('{"name":"istanbul","comment":"HF targeted for December 2019 following the Constantinople/Petersburg HF","url":"https://eips.ethereum.org/EIPS/eip-1679","status":"Final","gasConfig":{},"gasPrices":{"blake2Round":{"v":1,"d":"Gas cost per round for the Blake2 F precompile"},"ecAdd":{"v":150,"d":"Gas costs for curve addition precompile"},"ecMul":{"v":6000,"d":"Gas costs for curve multiplication precompile"},"ecPairing":{"v":45000,"d":"Base gas costs for curve pairing precompile"},"ecPairingWord":{"v":34000,"d":"Gas costs regarding curve pairing precompile input length"},"txDataNonZero":{"v":16,"d":"Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions"},"sstoreSentryGasEIP2200":{"v":2300,"d":"Minimum gas required to be present for an SSTORE call, not consumed"},"sstoreNoopGasEIP2200":{"v":800,"d":"Once per SSTORE operation if the value doesn\'t change"},"sstoreDirtyGasEIP2200":{"v":800,"d":"Once per SSTORE operation if a dirty value is changed"},"sstoreInitGasEIP2200":{"v":20000,"d":"Once per SSTORE operation from clean zero to non-zero"},"sstoreInitRefundEIP2200":{"v":19200,"d":"Once per SSTORE operation for resetting to the original zero value"},"sstoreCleanGasEIP2200":{"v":5000,"d":"Once per SSTORE operation from clean non-zero to something else"},"sstoreCleanRefundEIP2200":{"v":4200,"d":"Once per SSTORE operation for resetting to the original non-zero value"},"sstoreClearRefundEIP2200":{"v":15000,"d":"Once per SSTORE operation for clearing an originally existing storage slot"},"balance":{"v":700,"d":"Base fee of the BALANCE opcode"},"extcodehash":{"v":700,"d":"Base fee of the EXTCODEHASH opcode"},"chainid":{"v":2,"d":"Base fee of the CHAINID opcode"},"selfbalance":{"v":5,"d":"Base fee of the SELFBALANCE opcode"},"sload":{"v":800,"d":"Base fee of the SLOAD opcode"}},"vm":{},"pow":{}}')},22354:e=>{"use strict";e.exports=JSON.parse('{"name":"london","comment":"HF targeted for July 2021 following the Berlin fork","url":"https://github.com/ethereum/eth1.0-specs/blob/master/network-upgrades/mainnet-upgrades/london.md","status":"Final","eips":[1559,3198,3529,3541]}')},71722:e=>{"use strict";e.exports=JSON.parse('{"name":"merge","comment":"Hardfork to upgrade the consensus mechanism to Proof-of-Stake","url":"https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/merge.md","status":"Final","consensus":{"type":"pos","algorithm":"casper","casper":{}},"eips":[3675,4399]}')},70953:e=>{"use strict";e.exports=JSON.parse('{"name":"mergeForkIdTransition","comment":"Pre-merge hardfork to fork off non-upgraded clients","url":"https://eips.ethereum.org/EIPS/eip-3675","status":"Draft","eips":[]}')},42119:e=>{"use strict";e.exports=JSON.parse('{"name":"muirGlacier","comment":"HF to delay the difficulty bomb","url":"https://eips.ethereum.org/EIPS/eip-2384","status":"Final","gasConfig":{},"gasPrices":{},"vm":{},"pow":{"difficultyBombDelay":{"v":9000000,"d":"the amount of blocks to delay the difficulty bomb with"}}}')},73983:e=>{"use strict";e.exports=JSON.parse('{"name":"petersburg","comment":"Aka constantinopleFix, removes EIP-1283, activate together with or after constantinople","url":"https://eips.ethereum.org/EIPS/eip-1716","status":"Final","gasConfig":{},"gasPrices":{"netSstoreNoopGas":{"v":null,"d":"Removed along EIP-1283"},"netSstoreInitGas":{"v":null,"d":"Removed along EIP-1283"},"netSstoreCleanGas":{"v":null,"d":"Removed along EIP-1283"},"netSstoreDirtyGas":{"v":null,"d":"Removed along EIP-1283"},"netSstoreClearRefund":{"v":null,"d":"Removed along EIP-1283"},"netSstoreResetRefund":{"v":null,"d":"Removed along EIP-1283"},"netSstoreResetClearRefund":{"v":null,"d":"Removed along EIP-1283"}},"vm":{},"pow":{}}')},9988:e=>{"use strict";e.exports=JSON.parse('{"name":"shanghai","comment":"Next feature hardfork after the merge hardfork having withdrawals, warm coinbase, push0, limit/meter initcode","url":"https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/shanghai.md","status":"Final","eips":[3651,3855,3860,4895]}')},2732:e=>{"use strict";e.exports=JSON.parse('{"name":"shardingFork","comment":"Internal hardfork to test proto-danksharding (do not use in production)","url":"https://eips.ethereum.org/EIPS/eip-4844","status":"Experimental","eips":[4844]}')},47466:e=>{"use strict";e.exports=JSON.parse('{"name":"spuriousDragon","comment":"HF with EIPs for simple replay attack protection, EXP cost increase, state trie clearing, contract code size limit","url":"https://eips.ethereum.org/EIPS/eip-607","status":"Final","gasConfig":{},"gasPrices":{"expByte":{"v":50,"d":"Times ceil(log256(exponent)) for the EXP instruction"}},"vm":{"maxCodeSize":{"v":24576,"d":"Maximum length of contract code"}},"pow":{}}')},28092:e=>{"use strict";e.exports=JSON.parse('{"name":"tangerineWhistle","comment":"Hardfork with gas cost changes for IO-heavy operations","url":"https://eips.ethereum.org/EIPS/eip-608","status":"Final","gasConfig":{},"gasPrices":{"sload":{"v":200,"d":"Once per SLOAD operation"},"call":{"v":700,"d":"Once per CALL operation & message call transaction"},"extcodesize":{"v":700,"d":"Base fee of the EXTCODESIZE opcode"},"extcodecopy":{"v":700,"d":"Base fee of the EXTCODECOPY opcode"},"balance":{"v":400,"d":"Base fee of the BALANCE opcode"},"delegatecall":{"v":700,"d":"Base fee of the DELEGATECALL opcode"},"callcode":{"v":700,"d":"Base fee of the CALLCODE opcode"},"selfdestruct":{"v":5000,"d":"Base fee of the SELFDESTRUCT opcode"}},"vm":{},"pow":{}}')}}]);
//# sourceMappingURL=454.b9fe6f82.chunk.js.map